<?xml version="1.0" encoding="UTF-8"?><elements><element id="9b1e7086-25cc-4bdf-ba77-6adfb503603b" type="para">Erste Schritte mit Xspec</element><element id="eef21ef4-793e-4fef-9f1e-a22ecf24b64c" type="para">XSpecist einTest-Frameworkfür XSLT, XQuery und Schematron. Um beispielsweise komplexe Schematron Regeln zu testen, hinterlegt man in einemTest-SzenarioErwartungswerte für positive und negative Testfälle in Form von XML Schnippseln.</element><element id="65d1d809-d019-41fb-a29a-a374d1fde80bd7e9" type="code">&lt;test-szenario&gt; &lt;testfall&gt; &lt;personen&gt; &lt;person&gt; &lt;vorname&gt;Horst&lt;\/vorname&gt; &lt;nachname&gt;Schlämmer&lt;\/nachname&gt; &lt;gewicht&gt;100&lt;\/gewicht&gt; &lt;\/person&gt; &lt;person&gt; &lt;vorname&gt;Gundula&lt;\/vorname&gt; &lt;nachname&gt;&lt;\/nachname&gt; &lt;gewicht&gt;60&lt;\/gewicht&gt; &lt;\/person&gt; &lt;\/personen&gt; &lt;\/testfall&gt; &lt;\/test-szenario&gt;</element><element id="a495ec01-4794-4e28-b47f-0313ab934100d6e26" type="para">in einer XSpec DateiwerdenAssert- und Not-Assert-Methodendeklariert:</element><element id="cf505493-1387-4f90-8ca8-68388d4efde2d7e16" type="code">&lt;x:description xslt-version=\"2.0\"xmlns:x=\"http:\/\/www.jenitennison.com\/xslt\/xspec\"schematron=\"test.sch\"&gt; &lt;x:scenario label=\"ALL\"&gt; &lt;x:context href=\"test.xml\"\/&gt; &lt;x:expect-not-assert id=\"person-nachname-rule\"location=\"\/\/person[1]\/nachname\"\/&gt; &lt;x:expect-assert id=\"person-nachname-rule\"location=\"\/\/person[2]\/nachname\"\/&gt; &lt;\/x:scenario&gt; &lt;\/x:description&gt;</element><element id="9aac4097-bb50-44d5-8827-bd1775ce18fcd6e39" type="para">Grds. bdeutet ein Assert, dass das Mapping zwischen tatsächlichem Wert und Erwartungswert des Testfallspositiv erfüllt ist. Beim Not-Assert ist das Gegenteil der Fall. Im obigen Beispiel reichen zwei Regeln, um den Testfall vollständig abzudecken.</element><element id="350b086a-a78e-47cc-9a3e-4f8c596fadf4d6e41" type="para">Wenn man SchematronRegeln mit Hilfe von XSpec testen will, dann muss man ein bisschen um die Ecke denken. Denn auch diese Regeln werden mittels Assert und Not-Assert modelliert.</element><element id="e0dc1a00-ca3e-4bbc-982f-9b9496df8844d7e22" type="code">&lt;sch:schema xmlns:sch=\"http:\/\/purl.oclc.org\/dsdl\/schematron\"xmlns:xsl=\"http:\/\/www.w3.org\/1999\/XSL\/Transform\"queryBinding=\"xslt2\"&gt; &lt;sch:pattern id=\"main\"&gt; &lt;sch:rule context=\"nachname\"&gt; &lt;sch:assert id=\"person-nachname-rule\"role=\"error\"test=\"normalize-space(.)\"&gt; Der Nachname der Person mit ID: &lt;sch:value-of select=\"@id\"\/&gt; fehlt! &lt;\/sch:assert&gt; &lt;\/sch:rule&gt; &lt;\/sch:pattern&gt; &lt;\/sch:schema&gt;</element><element id="5da4afab-3eda-4027-956a-1e72b6dd19b3d6e48" type="para">In der Schematron-Regel wird zugesichert (Assert), dass jede Person einen Nachnamen hat.</element><element id="6d2dba49-cecd-4315-8956-4beb19e4af08d6e50" type="para">Hat sie keinen Nachnamen so wird der Bericht zum Fehlerfall in die Schematron Ergebnisdatei geschrieben. Diese Datei wertet nun Xspec aus.</element><element id="611d787d-7b54-46dd-9548-158dd6db0bfcd6e53" type="para">Erscheint ein Fehler (= das Feldnachnameist leer), so greift bei Xspec die Assert-Regel! Das ist die umgekehrte Logik zu den Schematron Regeln.</element><element id="1ed9b5fd-88c2-4a6b-998b-6eac55854ec7d6e58" type="para">Als Eselsbrücke kann man ein Assert in der Xspec Datei gleichsetzen mitAppearund ein Not-Assert mitNot-Appear.</element><element id="5f9a44b2-0d88-4bf3-81f2-d93a28301049d6e67" type="para">Ein Assert sichert also zu, dass sich ein Fehlerbericht in der Schematron Ergebnisdatei zum Testfall befindet. Ein Not-Assert sichert zu, dass sich kein Fehlerbericht befindet.</element><element id="23ee0dc1-c910-43f7-a86b-442562947535d6e69" type="para">Wie man sich leicht vorstellen kann, sind Assert-Regeln in diesem Fall leicht zu finden, dazu muss man nur die Schematron Testregeln ins Leere zeigen lassen. Alles ist grün und alles ist gut - dem Augenschein nach.</element></elements>