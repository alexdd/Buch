<?xml version="1.0" encoding="UTF-8"?><topic id="821f8271-e9a1-43e8-ba9a-b1e8aa0ce4f4"><title id="9b1e7086-25cc-4bdf-ba77-6adfb503603b">Erste Schritte mit Xspec</title><body id="9036318d-3693-4e5c-be19-8a62e8748b03"><p id="eef21ef4-793e-4fef-9f1e-a22ecf24b64c">XSpec[[xe1:Tools;xe2:XSpec]] ist ein <b id="f7bc6aa2-0978-410e-b4cc-fd74b8d2c0c1d6e6">Test-Framework</b>[[fn:https://github.com/xspec*XSpec auf GitHub]][[xe1:Test-Framework]] für XSLT, XQuery und Schematron. 
Um beispielsweise komplexe Schematron Regeln zu testen, hinterlegt man in einem <b id="f6d68885-0ad1-420b-82ea-92bd5889e0bcd6e9">Test-Szenario</b> 
Erwartungswerte für positive und negative Testfälle in Form von XML Schnippseln.</p><pre id="b072c7dd-cb8c-402d-a4cf-6b04cc1c14a2d6e12" xml:space="preserve">&lt;test-szenario&gt;
  &lt;testfall&gt;
    &lt;personen&gt;
      &lt;person&gt;
        &lt;vorname&gt;Horst&lt;/vorname&gt;
        &lt;<b id="e87374ec-bf2c-4f03-9367-42d12d889774d6e14">nachname</b>&gt;Schlämmer&lt;/<b id="cfbe22ab-cf86-48fe-8717-0862a92b60aed6e17">nachname</b>&gt;
        &lt;gewicht&gt;100&lt;/gewicht&gt;
      &lt;/person&gt;
      &lt;person&gt;
        &lt;vorname&gt;Gundula&lt;/vorname&gt;
        &lt;<b id="fe6fa3a1-3ec7-466f-9580-adb0c9a0108cd6e20">nachname</b>&gt;&lt;/<b id="9c67350d-fd59-42f5-88a6-5d22c0d6f244d6e23">nachname</b>&gt;
        &lt;gewicht&gt;60&lt;/gewicht&gt;
      &lt;/person&gt;
    &lt;/personen&gt;
  &lt;/testfall&gt;
&lt;/test-szenario&gt;</pre><p id="a495ec01-4794-4e28-b47f-0313ab934100d6e26">in einer XSpec Datei *. werden <b id="31a39752-2463-4c05-bbc6-043c7fa89e67d6e28">Assert- und Not-Assert-Methoden</b> [[xe1:Assert- und Not-Assert]]deklariert:</p><pre id="384eb571-54a4-4f75-bad3-a8427f050bb4d6e31" xml:space="preserve">&lt;x:description xslt-version="2.0" xmlns:x="http://www.jenitennison.com/xslt/xspec" 
               schematron="test.sch"&gt;
  &lt;x:scenario label="ALL"&gt;
    &lt;x:context href="test.xml"/&gt;
    &lt;x:expect-not-assert id="person-nachname-rule" location="//person[1]/<b id="f1da55c6-96eb-44b5-ad06-0677145589f9d6e33">nachname</b>"/&gt;
    &lt;x:expect-assert id="person-nachname-rule" location="//person[2]/<b id="0cf62582-9a6c-4163-b6b1-5c28aa9fe998d6e36">nachname</b>"/&gt;
  &lt;/x:scenario&gt;
&lt;/x:description&gt;</pre><p id="9aac4097-bb50-44d5-8827-bd1775ce18fcd6e39">Grds. bdeutet ein Assert, dass das Mapping zwischen tatsächlichem Wert und Erwartungswert des
Testfalls[[xe1:Testfall]] positiv erfüllt ist. Beim Not-Assert ist das Gegenteil der Fall. Im obigen Beispiel
reichen zwei Regeln, um den Testfall vollständig abzudecken.</p><p id="350b086a-a78e-47cc-9a3e-4f8c596fadf4d6e41">Wenn man Schematron[[xe1:Tools;xe2:Schematron]] Regeln mit Hilfe von XSpec testen will, dann muss man ein bisschen um 
die Ecke denken. Denn auch diese Regeln werden mittels Assert und Not-Assert modelliert.</p><pre id="9ff0d274-75b8-4dcf-8ae4-2d6b0b7c6921d6e43" xml:space="preserve">&lt;sch:schema xmlns:sch="http://purl.oclc.org/dsdl/schematron" 
            xmlns:xsl="http://www.w3.org/1999/XSL/Transform" queryBinding="xslt2"&gt;
  &lt;sch:pattern id="main"&gt;
    &lt;sch:rule context="<b id="2ab3f43e-5f41-475a-82bf-df2c227b6756d6e45">nachname</b>"&gt;
      &lt;sch:assert id="person-nachname-rule" role="error" test="normalize-space(.)"&gt;
        Der Nachname der Person mit ID: &lt;sch:value-of select="@id"/&gt; fehlt! 
      &lt;/sch:assert&gt;
    &lt;/sch:rule&gt;
  &lt;/sch:pattern&gt;
&lt;/sch:schema&gt;</pre><p id="5da4afab-3eda-4027-956a-1e72b6dd19b3d6e48">In der Schematron-Regel wird zugesichert (Assert), dass jede Person einen Nachnamen hat.</p><p id="6d2dba49-cecd-4315-8956-4beb19e4af08d6e50">Hat sie keinen Nachnamen so wird der Bericht zum Fehlerfall in die Schematron Ergebnisdatei
geschrieben. Diese Datei wertet nun Xspec aus.</p><note id="ea57e169-b898-4515-8b70-935043004cfad6e52"><p id="611d787d-7b54-46dd-9548-158dd6db0bfcd6e53">Erscheint ein Fehler (= das Feld <b id="171bb098-8941-486f-b6e0-c577438c996dd6e55">nachname</b> ist leer), so greift bei Xspec die Assert-Regel! Das ist die umgekehrte Logik zu den Schematron Regeln.</p></note><p id="1ed9b5fd-88c2-4a6b-998b-6eac55854ec7d6e58">Als Eselsbrücke kann man
ein Assert in der Xspec Datei gleichsetzen mit <b id="30100a12-de8b-4e03-a6ff-86361fb1e578d6e60">Appear</b> und ein Not-Assert mit
<b id="be31f20f-1e9b-4c0d-b42d-f12afa043917d6e63">Not-Appear</b>. [[xe1:Tipps und Tricks;xe2:Appear- und Not-Appear]]</p><p id="5f9a44b2-0d88-4bf3-81f2-d93a28301049d6e67">Ein Assert sichert also zu, dass sich ein Fehlerbericht in der
Schematron Ergebnisdatei zum Testfall befindet. Ein Not-Assert sichert zu, dass
sich kein Fehlerbericht befindet. </p><p id="23ee0dc1-c910-43f7-a86b-442562947535d6e69"> Wie man sich leicht vorstellen kann, sind Assert-Regeln in diesem Fall leicht zu finden,
dazu muss man nur die Schematron Testregeln ins Leere zeigen lassen. Alles ist grün
und alles ist gut - dem Augenschein nach.</p></body></topic>