<?xml version="1.0" encoding="UTF-8"?><topic id="0ede2c7f-f0c8-4212-9c31-cf3caefa613c"><title id="47f2fdc5-eca0-4e9b-bfc8-f2fbd76403d8">Komplexe Anwendung</title><body id="4c47d822-0170-4ff7-b065-932773eb0e10"><p id="25b21e23-d4ce-4721-a7d1-2c6b83245a70">Vom Single-Source Publishing bis zur Generierung von Java Code aus Klassendiagrammen.</p><section id="0010aab5-f425-4968-bf0b-f22bc59159b1d6e6"><title id="012db970-b72c-425a-a3ad-3e817e002282d6e7">Single Source Publishing</title><p id="e88e78e7-d931-45f4-bb7f-0e055e7db65cd6e9">Gängige Formate in der Technischen Dokumentation sind elektronische Ausgabe-Formate wie: CHM, EclipseHelp, JavaHelp, ePub, ..., Print-Ausgabe Formate, wie PDF oder Adobe Framemaker, oder XML Standard Austauschformate, wie DITA, S1000D, PI-MOD oder TEI.
Vorteile:</p><ul id="553bfff3-3f37-487a-bcf4-41a7af675214d6e11"><li id="d41fdd94-47cd-4579-bb54-832ec1bd4bafd6e12"><p id="ada9653b-2335-47be-bcd7-a5042e1aedfed6e13">Bei einer Änderung in der XML Quelle werden auch automatisch alle anschließenden Formate aktualisiert.</p></li><li id="33e6382f-3e2e-433b-9f96-7b0d139fe8ecd6e15"><p id="9c7312ef-0291-4c2d-8fd1-5e3454490334d6e16">Strikte Trennung von Content ( / Semantik) und Layout/Design.</p></li><li id="fb06e39f-6f64-4ae1-b60b-98cd66ee1260d6e18"><p id="134e480d-ab4c-4554-95d7-55cceb619677d6e19">Auf der XML Quelle sind XML Features möglich, wie:
	
		Modularisierung: Erlaubt die fein-granulare Wiederverwendung von Content-Bausteinen, sowie das Verlinken, Filtern, Suchen und Exportieren derselben.
		Generalisierung ist ein DITA Konzept, welches die Wiederverendung von angepassten Topics in anderen DITA Systemen ermöglicht.
		Gültigkeiten erlauben die bedingte Anwendung von Content-Bestandteilen auf Satz und Wort-Ebene.
		Versionierung und Diffing - Vergleich von Änderungen zwischen Versionen
		Intelligente Querverweise: Ein Link zwischen einzelnen XML Topics  bleibt versionstreu.
		Automatischer Satz, inkl. Zusamenhalte- und Trennregeln für Seiten, Absätze und Blöcke (Listen, Tabellen, etc).
	
	</p></li><li id="5efb1726-da14-40f9-8780-2f3302897666d6e21"><p id="23dc2a71-64a3-4305-b3d7-81094ca5bcd8d6e22">Veraltete Formate können ausgetauscht werden, ohne dass der Content geändert werden muss oder verlorengeht.</p></li><li id="25171ed0-23f9-4687-b1aa-f1f205f44f9ed6e24"><p id="47b354c2-4b48-48c9-ac10-ed3f041feb2fd6e25">Die XML Quelle kann ohne Aufbereitung in anderen Systemen wiederverwendet werden.</p></li><li id="23038ff3-7ac5-410b-a730-cb33a3c50c9ad6e27"><p id="252ae481-7a29-4117-9b72-94ae88638e75d6e28">Es gibt weit verbreitete Standards zur Struktur der XML Quelle.</p></li><li id="a1cc694b-da1e-4941-9777-01442a21755fd6e30"><p id="578ead23-ba8a-4186-bf96-e9c9dae8ec9fd6e31">Nur das XML muss in der Datenhaltung persistiert werden</p></li><li id="c6a284d6-23aa-404e-8b5d-4f76ee4dab97d6e33"><p id="c6122f80-b8a0-4cca-9939-4122325dfef2d6e34">Es gibt spezialisierte XML Datenbanken, die besonders gut auf Baumstrukturen arbeiten. (Dokumente sind per se baum-strukturiert und sind eigentlich für eine relationale Datenbank ungeignet)</p></li></ul><p id="df845a80-c690-4551-af36-90a401ff12aed6e36">Die Redaktionssysteme der Technischen Dokumentation der führenden Hersteller in Deutschland haben XML unter der Haube und setzen auf die Single-Source-Multi-Channel Strategie.</p></section><section id="ddc898c3-a0c6-45e4-8470-f04e3ccb9603d6e38"><title id="c2ea4ffe-bfc9-4c96-b5d9-d793083fc510d6e39">Code Generierung</title><p id="62ada423-a662-4d08-ba65-63ccadd079ced6e41">Nachdem man bei XSLT im Format der Ausgabe frei ist, kann auch direkt Plain-Text mit  XSLT Regeln generiert werden. Daher liegt es nahe sich jegliche Form von Quelltext aus einer XML Repräsentation erzeugen zu lassen.</p><p id="52746a75-07e2-4452-8f21-1fb22d4e1332d6e43">Beispielsweise speichern gängige CASE Tools (Computer Aided Software Engineering) UML Diagramme im XML Format ab, so z.B. <b id="43400dd9-4a11-4782-9346-c781c079abd7d6e45">ArgoUML</b>[[fn:http://argouml.tigris.org]].</p><p id="a655bc68-8f84-470f-ad3f-a5bb41b19aa6d6e48">Diese Klassendiagramme lassen sich mittels XSLT direkt in Java-Code transformieren, wie z.B. in einem kleinen Open Source Projekt (aus vergangenen Tagen) :
<b id="4dffbb1e-cad8-46da-ac7e-66377dd85fc3d6e50" href="undefined">Butterfly Code Generator</b>[[fn:http://butterflycode.sourceforge.net]]</p><p id="ba1967f4-d697-4466-8455-dd17d935c68ed6e53">Es gibt aber auch einen schönen Artikel dazu im Java World Journal[[fn:https://www.javaworld.com/article/2073998/java-web-development/generate-javabean-classes-dynamically-with-xslt.html]].</p></section><section id="30786084-ece7-4b45-a77b-88512e4fe461d6e55"><title id="bd0e17e7-dce2-45a0-b5eb-90297e678e88d6e56">Migrationen und Konvertierungen</title><p id="b7221c07-bea2-4a1e-a1cd-09318580ea8dd6e58">Für jede erdenkliche Art der Migration eines XML Datenbestands oder eines Datenbank-Dumps / -Exports im XML Format, zwischen Produktversionen oder zwischen Dienstleister- und Dienstnutzer-Systemen bietet sich XSLT als Mittel der Wahl zur schnellen und komplexen Transformation an.</p><p id="755dccf0-48c4-4b8f-a778-4e4eb27089a9d6e60">Dabei ist zu beachten, dass XSLT besonders schnell und gut auf verschachtelten Strukturen arbeitet. Entartet ein Baum zur Liste und/oder sind nur geringe Strukturanpassungen notwendig, wird man sich mit einem schnellen SAX Parser leichter tun. 
Mittels der XSLT3.0 Streaming Option können auch sehr große XML Quellen (Big Data) verarbeitet werden. Saxon bietet bspw. diese Streaming Option[[fn:http://www.saxonica.com/html/documentation/sourcedocs/streaming/]].</p></section></body></topic>