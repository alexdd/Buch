<?xml version="1.0" encoding="UTF-8"?><elements><element id="47f2fdc5-eca0-4e9b-bfc8-f2fbd76403d8">Professionelle XML Verarbeitung </element><element id="25b21e23-d4ce-4721-a7d1-2c6b83245a70">Vom Single-Source Publishing bis zur Generierung von Java Code aus Klassendiagrammen. XSLT ist in vielen großen Softwareprojekten vertreten. Heute liefert eine Suche nach  bspw. 14.868.501 Treffer.</element><element id="012db970-b72c-425a-a3ad-3e817e002282d6e7">Single Source Publishing</element><element id="e88e78e7-d931-45f4-bb7f-0e055e7db65cd6e9">Aus einer Quelle werden viele Ausgabe Formate generiert. Gängige Formate in der Technischen Dokumentation sind elektronische Ausgabe-Formate wie: CHM, EclipseHelp, JavaHelp, ePub, ..., Print-Ausgabe Formate, wie PDF oder Adobe Framemaker, oder XML Standard Austauschformate, wie DITA, S1000D, PI-MOD oder TEI.\nVorteile:</element><element id="ada9653b-2335-47be-bcd7-a5042e1aedfed6e13">Bei einer Änderung in der XML Quelle werden auch automatisch alle anschließenden Formate aktualisiert.</element><element id="9c7312ef-0291-4c2d-8fd1-5e3454490334d6e16">Strikte Trennung von Content\/Semantik und Layout\/Design.</element><element id="134e480d-ab4c-4554-95d7-55cceb619677d6e19">Auf der XML Quelle sind XML Features möglich, wie:\n\t\n\t\tModularisierung: Erlaubt die fein-granulare Wiederverwendung von Content-Bausteinen, sowie das Verlinken, Filtern, Suchen und Exportieren derselben.\n\t\tGeneralisierung ist ein DITA Konzept, welches die Wiederverendung von angepassten Topics in anderen DITA Systemen ermöglicht.\n\t\tGültigkeiten erlauben die bedingte Anwendung von Content-Bestandteilen auf Satz und Wort-Ebene.\n\t\tVersionierung und Diffing - Vergleich von Änderungen zwischen Versionen. Intelligente Querverweise: Ein Link zwischen einzelnen XML Topics  bleibt versionstreu.\n\t\tAutomatischer Satz, inkl. Zusamenhalte- und Trennregeln für Seiten, Absätze und Blöcke (Listen, Tabellen, etc).\n\t\n\t</element><element id="23dc2a71-64a3-4305-b3d7-81094ca5bcd8d6e22">Veraltete Formate können ausgetauscht werden, ohne dass der Content geändert werden muss oder verlorengeht.</element><element id="47b354c2-4b48-48c9-ac10-ed3f041feb2fd6e25">Die XML Quelle kann ohne Aufbereitung in anderen Systemen wiederverwendet werden.</element><element id="252ae481-7a29-4117-9b72-94ae88638e75d6e28">Es gibt weit verbreitete Standards zur Struktur der XML Quelle.</element><element id="578ead23-ba8a-4186-bf96-e9c9dae8ec9fd6e31">Nur das XML wird in der Datenhaltung persistiert.</element><element id="c6122f80-b8a0-4cca-9939-4122325dfef2d6e34">Es gibt spezialisierte XML Datenbanken , die besonders gut auf Baumstrukturen arbeiten. (Dokumente sind per se baum-strukturiert und sind eigentlich für eine relationale Datenbank ungeignet)</element><element id="df845a80-c690-4551-af36-90a401ff12aed6e36">Die Redaktionssysteme der Technischen Dokumentation der führenden Hersteller in Deutschland haben XML unter der Haube und setzen auf die Single-Source Strategie.</element><element id="c2ea4ffe-bfc9-4c96-b5d9-d793083fc510d6e39">Code Generierung</element><element id="62ada423-a662-4d08-ba65-63ccadd079ced6e41">Nachdem man bei XSLT im Format der Ausgabe frei ist, kann auch direkt Plain-Text mit  XSLT Regeln generiert werden. Daher liegt es nahe sich jegliche Form von Quelltext aus einer XML Repräsentation erzeugen zu lassen.</element><element id="52746a75-07e2-4452-8f21-1fb22d4e1332d6e43">Beispielsweise speichern gängige CASE Tools (Computer Aided Software Engineering) UML Diagramme im XML Format ab, so z.B. ArgoUML.</element><element id="a655bc68-8f84-470f-ad3f-a5bb41b19aa6d6e48">Diese Klassendiagramme lassen sich mittels XSLT direkt in Java-Code transformieren, wie z.B. in einem kleinen Open Source Projekt (aus vergangenen Tagen) : Butterfly Code Generator</element><element id="ba1967f4-d697-4466-8455-dd17d935c68ed6e53">Es gibt auch einen schönen Artikel dazu im Java World Journal.</element><element id="bd0e17e7-dce2-45a0-b5eb-90297e678e88d6e56">Migrationen und Konvertierungen</element><element id="b7221c07-bea2-4a1e-a1cd-09318580ea8dd6e58">Für jede erdenkliche Art der Migration eines XML Datenbestands oder eines Datenbank-Dumps \/ -Exports im XML Format, zwischen Produktversionen oder zwischen Dienstleister- und Dienstnutzer-Systemen, bietet sich XSLT zur Transformation an.</element><element id="755dccf0-48c4-4b8f-a778-4e4eb27089a9d6e60">Dabei ist zu beachten, dass XSLT besonders schnell und gut auf verschachtelten Strukturen arbeitet. Entartet ein Baum zur Liste und\/oder sind nur geringe Strukturanpassungen notwendig, wird man sich mit einem schnellen SAX Parser leichter tun. </element><element id="e438ab3c-2aa9-4400-a40a-9181c1911835d6e90"> Mittels der XSLT 3.0 Streaming Option können auch sehr große XML Quellen (Big Data) verarbeitet werden. Saxon bietet bspw. diese Streaming Option.</element></elements>