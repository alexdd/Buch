<?xml version="1.0" encoding="UTF-8"?><elements><element id="6dc3be8f-5b8c-407c-9853-0533fdbf8267" type="para">SQL Views in MarkLogic</element><element id="51cd2348-5ac3-401f-bfec-d6669662af27" type="para">Es macht nicht immer Sinn über eine Baumstruktur zu suchen. Obwohl das in einer XML Datenbank rasend schnell geht, weil jeder Knoten des Baums initial in einen Index aufgenommen wird. So gibt es doch Anwendungsfälle bei denen man lieber eine relationale Sicht auf die Daten hätte.</element><element id="fa6fb1a1-78b4-4a46-9b1e-ba2328fdd2f3d6e6" type="para">In MarkLogic heisst die Lösung dazu SQL Views.</element><element id="8029ae2f-5b5a-4df5-97c1-aad92ac65df2d6e8" type="para">Bspw. benötigt man eine relationale Sicht auf die Daten, wenn über verschiedene Datensätze ein Report generiert werden soll.</element><element id="93e04ead-905f-488b-a0bc-d024c912fc35d6e10" type="para">Nehmen wir an es gibt im Datenbestand die folgenden Dokumente:</element><element id="4808773c-022b-400d-9b22-88b15bfeb842d7e12" type="code">&lt;k:kunde&gt; &lt;k:id&gt;1&lt;\/k:id&gt; &lt;k:name&gt;Alex&lt;\/k:name&gt; &lt;k:eMail&gt;tekturcms@gmail.com&lt;\/k:eMail&gt; &lt;\/k:kunde&gt; &lt;k:kunde&gt; &lt;k:id&gt;2&lt;\/k:id&gt; &lt;k:name&gt;Horst&lt;\/k:name&gt; &lt;k:eMail&gt;horst@horst.de&lt;\/k:eMail&gt; &lt;\/k:kunde&gt; &lt;k:kunde&gt; &lt;k:id&gt;3&lt;\/k:id&gt; &lt;k:name&gt;Gundula&lt;\/k:name&gt; &lt;k:eMail&gt;gundl@gundula.de&lt;\/k:eMail&gt; &lt;\/k:kunde&gt; &lt;b:bestellung&gt; &lt;b:id&gt;1&lt;\/b:id&gt; &lt;b:datum&gt;02.01.2019&lt;\/b:datum&gt; &lt;b:preis&gt;99.90&lt;\/b:preis&gt; &lt;kunde-id&gt;2&lt;\/kunde-id&gt; &lt;\/b:bestellung&gt; &lt;b:bestellung&gt; &lt;b:id&gt;2&lt;\/b:id&gt; &lt;b:datum&gt;03.01.2019&lt;\/b:datum&gt; &lt;b:preis&gt;68.90&lt;\/b:preis&gt; &lt;b:kunde-id&gt;1&lt;\/b:kunde-id&gt; &lt;\/b:bestellung&gt;</element><element id="2328ace1-a84c-4d9b-839c-e81962bff15ed6e14" type="para">Will man sich alle Kunden anzeigen lassen, die eine Bestellung abgegeben haben - das sind Alex und Horst - so würde man bei einem relationalen Ansatz einen JOIN verwenden, so wie:</element><element id="afe4f08c-777a-49e2-aba9-735cec9c002cd7e16" type="code">SELECT name, datum, preis FROM kunden k INNER JOIN bestellungen b ON k.id = b.kunde_id</element><element id="634aa470-0b4d-4ef9-ad31-e23e72e82857d6e18" type="para">In einer relationalen Sicht würde uns das dann die folgende Tabelle liefern:</element><element id="2e536d64-f04d-4f9a-b2e1-8ac7af22c198d7e20" type="code">name, datum, preis Alex, 03.01.2019, 68.90 Horst, 02.01.2019, 99.90</element><element id="32221bf5-8e13-4057-90ab-06577e278a90d6e22" type="para">Um für MarkLogic eine SQL View zu definieren verwendet man einen Mechanismus, der da heisst: Template Driven Extraction </element><element id="300d1425-14e5-4fe0-b486-327254ed8cf0d6e24" type="para">Dazu werden Templates in XML deklariert und in die Template Collection eingefügt. Für unser obiges Beispiel würden wir zwei Templates brauchen, die so aussehen:</element><element id="96f033f5-3eb2-4728-833a-f9be39489e0fd7e27" type="code">xquery version \"1.0-ml\"; import module namespace tde = \"http:\/\/marklogic.com\/xdmp\/tde\" at \"\/MarkLogic\/tde.xqy\"; let $sql-view-name := 'kunden-view.xml' let $sql-view := &lt;template xmlns=\"http:\/\/marklogic.com\/xdmp\/tde\"&gt; &lt;path-namespaces&gt; &lt;path-namespace&gt; &lt;prefix&gt;k&lt;\/prefix&gt; &lt;namespace-uri&gt;https:\/\/tekturcms.de\/schema\/kunde\/1.0&lt;\/namespace-uri&gt; &lt;\/path-namespace&gt; &lt;\/path-namespaces&gt; &lt;context&gt;\/k:kunde&lt;\/context&gt; &lt;collections&gt; &lt;collections-and&gt; &lt;collection&gt;\/kunden&lt;\/collection&gt; &lt;\/collections-and&gt; &lt;\/collections&gt; &lt;rows&gt; &lt;row&gt; &lt;schema-name&gt;kunden_schema&lt;\/schema-name&gt; &lt;view-name&gt;kunden_view&lt;\/view-name&gt; &lt;columns&gt; &lt;column&gt; &lt;name&gt;id&lt;\/name&gt; &lt;scalar-type&gt;string&lt;\/scalar-type&gt; &lt;val&gt;k:id&lt;\/val&gt; &lt;nullable&gt;true&lt;\/nullable&gt; &lt;\/column&gt; &lt;column&gt; &lt;name&gt;datum&lt;\/name&gt; &lt;scalar-type&gt;string&lt;\/scalar-type&gt; &lt;val&gt;k:datum&lt;\/val&gt; &lt;nullable&gt;true&lt;\/nullable&gt; &lt;\/column&gt; &lt;column&gt; &lt;name&gt;eMail&lt;\/name&gt; &lt;scalar-type&gt;string&lt;\/scalar-type&gt; &lt;val&gt;k:eMail&lt;\/val&gt; &lt;nullable&gt;true&lt;\/nullable&gt; &lt;\/column&gt; &lt;\/columns&gt; &lt;\/row&gt; &lt;\/rows&gt; &lt;\/template&gt; return( tde:template-insert(concat('\/templates\/', $sql-view-name), $sql-view, xdmp:default-permissions()) )</element><element id="1b5ad441-b64a-48a5-beaf-fcb03b693c17d6e29" type="para">und analog für die Bestellungen:</element><element id="dc507d90-62e7-449a-b209-a8373c639cffd7e31" type="code">[...] &lt;rows&gt; &lt;row&gt; &lt;schema-name&gt;bestellungen_schema&lt;\/schema-name&gt; &lt;view-name&gt;bestellungen_view&lt;\/view-name&gt; &lt;columns&gt; &lt;column&gt; &lt;name&gt;id&lt;\/name&gt; &lt;scalar-type&gt;string&lt;\/scalar-type&gt; &lt;val&gt;b:id&lt;\/val&gt; &lt;\/column&gt; &lt;column&gt; &lt;name&gt;datum&lt;\/name&gt; &lt;scalar-type&gt;string&lt;\/scalar-type&gt; &lt;val&gt;b:datum&lt;\/val&gt; &lt;\/column&gt; &lt;column&gt; &lt;name&gt;preis&lt;\/name&gt; &lt;scalar-type&gt;string&lt;\/scalar-type&gt; &lt;val&gt;b:preis&lt;\/val&gt; &lt;\/column&gt; &lt;column&gt; &lt;name&gt;kunde_id&lt;\/name&gt; &lt;scalar-type&gt;string&lt;\/scalar-type&gt; &lt;val&gt;b:kunde-id&lt;\/val&gt; &lt;\/column&gt; &lt;\/columns&gt; &lt;\/row&gt; [...]</element><element id="beda4ca5-f41c-4fbd-834a-6a375127725dd6e33" type="para">In XQuery eingebunden könnte man dann die definierten SQL Views mit dem folgenden Befehl abfragen:</element><element id="135a6a4b-0f5d-48af-b177-f9815d78bd47d7e35" type="code">xdmp:sql(\"SELECT name, datum, preis FROM kunden_view k INNER JOIN bestellungen_view b ON k.id = b.kunde_id\")</element><element id="30ca1f15-55f4-4eba-9f9f-eff3c661f764d6e37" type="para">Folgende ist das komplette Beispiel für eine MarkLogic XQuery Konsolensitzung abgebildet ...</element><element id="445ff5ef-bea2-4607-8812-624c3063e01dd7e39" type="code">xquery version \"1.0-ml\"; declare namespace k = 'http:\/\/www.tekturcms.de\/kunden'; declare namespace b = 'http:\/\/www.tekturcms.de\/bestellungen'; import module namespace tde = \"http:\/\/marklogic.com\/xdmp\/tde\" at \"\/MarkLogic\/tde.xqy\"; declare function local:loadKunde($id, $name, $eMail) { let $root := &lt;k:kunde&gt; &lt;k:id&gt;{ $id }&lt;\/k:id&gt; &lt;k:name&gt;{ $name }&lt;\/k:name&gt; &lt;k:eMail&gt;{ $eMail }&lt;\/k:eMail&gt; &lt;\/k:kunde&gt;, $options := &lt;options xmlns=\"xdmp:document-insert\"&gt; &lt;permissions&gt;{ xdmp:default-permissions() }&lt;\/permissions&gt; &lt;collections&gt; &lt;collection&gt;\/kunden&lt;\/collection&gt; &lt;\/collections&gt; &lt;\/options&gt;, $fname := concat('\/kunden\/',$id,\".xml\") return xdmp:document-insert($fname,$root,$options) }; declare function local:loadBestellung($id, $datum, $preis, $kunde-id) { let $root := &lt;b:bestellung&gt; &lt;b:id&gt;{ $id }&lt;\/b:id&gt; &lt;b:datum&gt;{ $datum }&lt;\/b:datum&gt; &lt;b:preis&gt;{ $preis }&lt;\/b:preis&gt; &lt;b:kunde-id&gt;{ $kunde-id }&lt;\/b:kunde-id&gt; &lt;\/b:bestellung&gt;, $options := &lt;options xmlns=\"xdmp:document-insert\"&gt; &lt;permissions&gt;{ xdmp:default-permissions() }&lt;\/permissions&gt; &lt;collections&gt; &lt;collection&gt;\/bestellungen&lt;\/collection&gt; &lt;\/collections&gt; &lt;\/options&gt;, $fname := concat('\/bestellungen\/',$id,\".xml\") return xdmp:document-insert($fname,$root,$options) }; declare function local:insertKundenSchema() { let $sql-view-name := 'kunden-view.xml', $sql-view := &lt;template xmlns=\"http:\/\/marklogic.com\/xdmp\/tde\"&gt; &lt;path-namespaces&gt; &lt;path-namespace&gt; &lt;prefix&gt;k&lt;\/prefix&gt; &lt;namespace-uri&gt;http:\/\/www.tekturcms.de\/kunden&lt;\/namespace-uri&gt; &lt;\/path-namespace&gt; &lt;\/path-namespaces&gt; &lt;context&gt;\/k:kunde&lt;\/context&gt; &lt;collections&gt; &lt;collections-and&gt; &lt;collection&gt;\/kunden&lt;\/collection&gt; &lt;\/collections-and&gt; &lt;\/collections&gt; &lt;rows&gt; &lt;row&gt; &lt;schema-name&gt;kunden_schema&lt;\/schema-name&gt; &lt;view-name&gt;kunden_view&lt;\/view-name&gt; &lt;columns&gt; &lt;column&gt; &lt;name&gt;id&lt;\/name&gt; &lt;scalar-type&gt;string&lt;\/scalar-type&gt; &lt;val&gt;k:id&lt;\/val&gt; &lt;\/column&gt; &lt;column&gt; &lt;name&gt;name&lt;\/name&gt; &lt;scalar-type&gt;string&lt;\/scalar-type&gt; &lt;val&gt;k:name&lt;\/val&gt; &lt;\/column&gt; &lt;column&gt; &lt;name&gt;eMail&lt;\/name&gt; &lt;scalar-type&gt;string&lt;\/scalar-type&gt; &lt;val&gt;k:eMail&lt;\/val&gt; &lt;\/column&gt; &lt;\/columns&gt; &lt;\/row&gt; &lt;\/rows&gt; &lt;\/template&gt; return tde:template-insert(concat('\/templates\/', $sql-view-name), $sql-view, xdmp:default-permissions()) }; declare function local:insertBestellungenSchema() { let $sql-view-name := 'bestellungen-view.xml', $sql-view := &lt;template xmlns=\"http:\/\/marklogic.com\/xdmp\/tde\"&gt; &lt;path-namespaces&gt; &lt;path-namespace&gt; &lt;prefix&gt;b&lt;\/prefix&gt; &lt;namespace-uri&gt;http:\/\/www.tekturcms.de\/bestellungen&lt;\/namespace-uri&gt; &lt;\/path-namespace&gt; &lt;\/path-namespaces&gt; &lt;context&gt;\/b:bestellung&lt;\/context&gt; &lt;collections&gt; &lt;collections-and&gt; &lt;collection&gt;\/bestellungen&lt;\/collection&gt; &lt;\/collections-and&gt; &lt;\/collections&gt; &lt;rows&gt; &lt;row&gt; &lt;schema-name&gt;bestellungen_schema&lt;\/schema-name&gt; &lt;view-name&gt;bestellungen_view&lt;\/view-name&gt; &lt;columns&gt; &lt;column&gt; &lt;name&gt;id&lt;\/name&gt; &lt;scalar-type&gt;string&lt;\/scalar-type&gt; &lt;val&gt;b:id&lt;\/val&gt; &lt;\/column&gt; &lt;column&gt; &lt;name&gt;datum&lt;\/name&gt; &lt;scalar-type&gt;string&lt;\/scalar-type&gt; &lt;val&gt;b:datum&lt;\/val&gt; &lt;\/column&gt; &lt;column&gt; &lt;name&gt;preis&lt;\/name&gt; &lt;scalar-type&gt;string&lt;\/scalar-type&gt; &lt;val&gt;b:preis&lt;\/val&gt; &lt;\/column&gt; &lt;column&gt; &lt;name&gt;kunde_id&lt;\/name&gt; &lt;scalar-type&gt;string&lt;\/scalar-type&gt; &lt;val&gt;b:kunde-id&lt;\/val&gt; &lt;\/column&gt; &lt;\/columns&gt; &lt;\/row&gt; &lt;\/rows&gt; &lt;\/template&gt; return tde:template-insert(concat('\/templates\/', $sql-view-name), $sql-view, xdmp:default-permissions()) }; local:loadKunde(\"1\",\"Alex\",\"tekturcms@gmail.com\"), local:loadKunde(\"2\",\"Horst\",\"horst@horst.de\"), local:loadKunde(\"3\",\"Gundula\",\"gundl@gundula.de\"), local:loadBestellung(\"1\",\"02.01.2019\",\"99.90\",\"2\"), local:loadBestellung(\"2\",\"03.01.2019\",\"68.90\",\"1\"), local:insertKundenSchema(), local:insertBestellungenSchema(), xdmp:sql(\"SELECT name, datum, preis FROM kunden_view k INNER JOIN bestellungen_view b ON k.id = b.kunde_id\")</element><element id="af0bb509-8735-46fb-8e48-918f1d3f8f15d6e41" type="para">... mit einer schönen tabellarischen Ausgabe im unteren Panel der Query Konsole - oder als JSON:</element><element id="781a32bb-be37-4c1e-8543-e2a5a337520ad7e43" type="code">[ [ \"k.name\", \"b.datum\", \"b.preis\" ], [ \"Alex\", \"03.01.2019\", \"68.90\" ], [ \"Horst\", \"02.01.2019\", \"99.90\" ] ]</element></elements>