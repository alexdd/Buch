<?xml version="1.0" encoding="UTF-8"?><elements><element id="9c13d213-40d3-4e74-b343-23cc42779c6d">Funktionen und Module </element><element id="2b09a4f1-af09-482e-b220-bbaa5e4f0897d6e5">Funktionen</element><element id="5de561e1-87c3-4f46-b36e-c5db56d9ae27d6e7">Um bestimmte Abschnitte des XQuery Programm wiederverwendbar zu machen, stehen Funktionsdeklarationen zur verfügung. Eine einfache Funktion wäre z.B. diese hier:</element><element id="285caf33-98eb-4945-acad-961bc509ce0cd6e11">Sie wickelt um einen JSON String eine passende Header Information.</element><element id="df24cc6b-17ff-486d-827c-9cec00d4a33bd6e13">Damit die Funktion eingebunden werden kann, muss ein passender Namespace deklariert werden:</element><element id="bc7c92a6-2eae-47e2-973b-904415f3fc0ed6e17">Nicht nur bzgl. Wiederverwendbarkeit sind Funktionen praktisch, sondern auch\num ganz elementare Konstrukte, wie  Schleifen, zu realisieren.</element><element id="6ec7b350-f2e7-4922-9e96-9c12fd07957ad6e19">Dazu nutzt man, wie in der funktionalen Programmierung üblich, die Rekursion:</element><element id="844b5256-5000-436c-bca3-c8f1c31f3ffed6e23">In diesem kleinen Schnippsel sind schon einige Besonderheiten von \nXQuery zu sehen. Variablenzuweisungen geschehen mit einem Doppelpunkt,\nVergleiche dagegen nur mit einem einfachen \"=\". Statements werden mit einem\nKomma getrennt.</element><element id="dab65cd2-0eb9-4487-99e0-07422d3c3759d6e26">Module</element><element id="2cc3effd-16fe-42c0-9fbd-bfa92cb6d10bd6e28">Um eine XQuery Anwendung zu modularisieren, können einzelne Skripte in\nModule ausgelagert werden. Ein Modul, z.B. common.xqy, wird dabei über einen eigenen\nNamespace deklariert:</element><element id="86f1276d-3550-4da6-887d-58012231ea7cd6e32">Dieses Modul kann dann in anderen Skripten eingebunden werden:</element><element id="d3d6ab20-364a-45c0-b0fa-e2e4578331bcd6e36">Funktionen und Variablen werden dann mir dem Namespace geprefixt aufgerufen:</element></elements>