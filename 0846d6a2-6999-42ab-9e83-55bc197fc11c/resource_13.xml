<?xml version="1.0" encoding="UTF-8"?><topic id="ae325776-f861-42c4-9a68-95d2d1c756a5"><title id="0e661463-0259-4d9f-a784-93f4f169bc52">Abfragen mit XQuery</title><body id="09f76c76-f17f-41fd-a303-1d0812cb6e21"><p id="c2687f09-7480-4b8a-aa85-97d3e6821592">Xquery[[xe1:Programmiersprachen;xe2:XQuery]] führt im Publishing-Bereich ein Schattendasein. In meiner Zeit als XSL Programmierer für zwei Publishing  Firmen hatte ich damit nie zu tun. Erst als ich näher an den eigentlichen Daten war und mit XML Datenbanken zu tun hatte, kam ich mit XQuery in Berührung.</p><p id="68844713-b2c6-475e-8649-74c9094a4533d6e6">Während relationale Datenbanken mit SQL abgefragt werden, verwendet man bei XML Datenbanken, wie [[link]]eXist[[fn:http://exist-db.org/exist/apps/homepage/index.html*Hompage der eXist XML Datenbank]] oder [[link]]Marklogic[[fn:https://de.marklogic.com/*Hompage der NoSQL/XML Datenbank MarkLogic]], XQuery als Abfragesprache.</p><p id="beb7e5e2-4c9d-4fc8-b536-7f06da326062d6e8">Aber auch einzelne XML Dokumente können z.B. in Oxygen XML Editor[[xe1:Tools;xe2:oXygen XML Editor]] mit dem [[link]]XQuery Builder Tool[[fn:https://www.oxygenxml.com/xml_editor/xquery_builder.html*Tool zur einfachen Eingabe von XQuery Test-Skripten im oXygen XML Editor]] oder auch per Saxon Kommandozeile abgefragt werden:</p><pre id="4c6e20b5-1f07-451e-9535-8245287e6790d6e10" xml:space="preserve">java -cp usr/lib/saxon/saxon.jar net.sf.saxon.Query 
     -s:"schulen.xml" 
     -qs:"/schulen/schule[id='6']" 
     -o:"/Users/Alex/Desktop/schule_6.xml"</pre><p id="82bd2bc8-d52c-4012-85f5-f167da7f8dc4d6e12">Mit der Option <b id="03edacb3-4ba0-4dd4-b0a7-0cfd1ee296f0d6e14" href="undefined">-qs </b>kann hier der Querystring angebenen werden. </p><p id="a1ae2cee-3b1d-4919-8531-d42c03a501f2d6e17">Wie man an dem einfachen Beispiel schon sieht, ist XQuery mit XPATH verwandt. XQuery umfasst den Sprachumfang von XPATH bietet aber zusätzlich die [[link]]FLOWR[[https://en.wikipedia.org/wiki/FLWOR*FLOWR steht für FOR LET WHERE ORDERBY RETURN]] Syntax um mächtigere Abfragen stellen zu können. Mittels weiterer [[link]]Extensions[[fn:http://cs.au.dk/~amoeller/XML/querying/flwrexp.html*XQuery Extensions für mächtigere Funktionen]] können aber auch ganze Programme erstellt werden, die weit über die Funktionalität einer "Abfragesprache" hinausgehen.</p><section id="1cd5f878-084e-40cf-90cb-8ca9d63ffc6ed6e19"><title id="c7e8acb5-6c21-4de1-a88d-8bbd376bbbb4d6e20">XQuery Builder</title><p id="10cad5f2-85f8-44a2-820b-25080e044176d6e22">Oxygen XML Editor bietet eine schöne Möglichkeit XQuery-Abfragen 
auf einem geladenen XML Dokument auszuführen. Dazu kann man 
seine Query in das betreffende Eingabefenster schreiben.</p><fig id="c84dd02b-4b5d-4f0d-894f-57a584b3568fd6e24"><title id="c59e607d-8c04-4519-83a4-829c1cc72065d6e25">oXygen XQuery Builder</title><desc id="e3b353c0-e500-41d9-8961-966e470ccccdd6e27">Mit dem XQuery Builder von oXygen lassen sich unkompliziert Queries testen</desc><image id="fa1912ac-cf6e-4314-89e8-176291e8190ad6e29" href="xquery-builder.png"/></fig><p id="f9cd5153-7930-46ee-9bfd-33e14ec55f03d6e28">Mit folgendem Ergebnis:</p><pre id="a1b08a82-3ee1-4f48-b80b-350e8b79229fd6e32" xml:space="preserve">&lt;dates&gt;
  &lt;today&gt;2019-01-16+01:00&lt;/today&gt;
  &lt;formatted&gt;Wednesday, 16th January 2019&lt;/formatted&gt;
&lt;/dates&gt;</pre></section><section id="78d3e155-c006-44ef-a982-32e490c351bcd6e34"><title id="59f98501-17c8-47d7-a314-8f89c6b7299ed6e33">FLOWR Expression</title><p id="d9c7b63e-5eb8-4c1a-8efb-88af290b55bfd6e34">FLOWR[[xe1:FLOWR Expression]] steht für [[code:for, let, where, order by, return]]. Das sind die Query-Anweisungen, die in 
dem Ausdruck erlaubt sind - in genau dieser Reihenfolge.</p><pre id="90f759f4-7d5d-4c81-99a2-cec586a44f23d6e39" xml:space="preserve">let $bibliothek := .
for $x in $bibliothek//buecher,
    $y in $bibliothek//autoren/autor
where starts-with($autor, 'Grass')
    and $x/@autorId = $y/@id
return $x/titel</pre><p id="c8a0cb85-703f-405f-b645-b24ac1e81133d6e38">In dieser Query werden die Titel aller Bücher von Grass zurückgeliefert.
Bemerkenswert ist hier die Syntax.</p><note id="bc11ed19-5ac1-4ba3-adb0-cf9b6c1f9705d6e43"><p id="9107c2a6-03d3-41db-b842-771ef054948fd6e41">Normalerweise würde man zwischen den
einzelnen Anweisungen einen Blockabschluss, wie ein Semikolon erwarten.
Da wir aber hier funtional prorgammieren, ist die Sache etwas anders...</p></note></section><section id="281a6804-7e8e-455a-965a-32eb82e70129d6e46"><title id="7dbf0fb3-8421-43c4-b792-0eba61c4bf27d6e44">XML per XQuery</title><p id="9ab1e252-cb55-4821-9893-74ec6ef84344d6e45">Es ist aber auch möglich XML zu erzeugen, wobei natürlich für eine Transformation XSLT 
vorzuziehen ist. Dazu werden Tags direkt in die Expression geschrieben, wie z.B. hier:</p><pre id="be571004-071e-4829-9ae6-58d8d18ff1a8d6e51" xml:space="preserve">declare variable $nachname as xs:string external;
&lt;buecher autor="{$nachname}"&gt;
{
  let $bibliothek := .
  for $x in $bibliothek/buecher//buch,
      $y in $bibliothek/autoren//autor
  where starts-with($y, $nachname)
      and $x/@autorId = $y/@id
  order by $x/ausgabe
  return
  &lt;buch ausgabe="{$x/ausgabe}"&gt;
    {$x/titel}
  &lt;/buch&gt;
}
&lt;/buecher&gt;</pre><p id="998102ca-7388-47ce-bb9d-0c6676f3788dd6e49">Speichert man dieses Schnippsel in einer Datei [[code:buecher.xquery]] ab,
so kann man mit der folgenden Kommandozeile auf einer [[code:buecher.xml]] Datei als Eingabe suchen:</p><pre id="83938c04-ade4-4db9-a782-79c6a92d7136d6e55" xml:space="preserve">java -cp usr/lib/saxon/saxon.jar net.sf.saxon.Query -t -s:buecher.xml 
                                                       -q:buecher.xquery 
                                                       -o:ergebnis.xml 
                                                       nachname=grass</pre></section><section id="adb55c2f-aace-4cf5-be7a-43c32fe876b4d6e57"><title id="72199b87-ef45-4bac-93aa-a03892a63e12d6e54">Document Projection</title><p id="4b856b14-5e37-4b3f-97aa-35d140f8c43bd6e55">[[link]]Document Projection[[fn:http://www.saxonica.com/documentation/#!sourcedocs/projection*Verstecktes Saxon Feature: Dokument Projektion bei einer XQuery Abfrage]][[xe1:Tipps und Tricks;xe2:Document Projection]]  ist ein verstecktes Saxon XQuery Feature. Es funktioniert nur für eine einzige Abfrage.
Das kann schon recht hilfreich sein, wenn man ein mehrere 100MB großes Dokument durchsuchen
will.</p><p id="ac58c0ea-28fd-4c0f-9ecc-722bb1233a6ad6e57">Ohne Projection würde das Beispiel von oben so verarbeitet:</p><pre id="3fa99ba0-b9a7-402a-a0fd-a482396d08ced6e64" xml:space="preserve">java -cp usr/lib/saxon/saxon.jar net.sf.saxon.Query -t 
     -s:buecher.xml 
     -q:buecher.xquery 
     -o:ergebnis.xml 
     -projection:off 
     nachname=grass
Saxon-EE 9.7.0.20J from Saxonica
Java version 1.8.0_60
Using license serial number V005095
Analyzing query from Desktop/buecher.xquery
Generating byte code...
Analysis time: 201.10095 milliseconds
Processing file:/Users/Alex/buecher.xml
Using parser com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser
Building tree for file:/Users/Alex/buecher.xml 
using class net.sf.saxon.tree.tiny.TinyBuilder
Tree built in 3.482278ms
Tree size: 46 nodes, 58 characters, 6 attributes
Execution time: 27.137589ms
Memory used: 67031664</pre><p id="f182025a-4c60-479e-a19f-5927645b8a2ed6e61">Mit der Option [[code:-projection:on]] verändert sich die Ausführungszeit signifikant:</p><pre id="4372c71f-69e1-486e-b335-a70e0fc04e84d6e68" xml:space="preserve">[...]

Document projection for file:/Users/Alex/buecher.xml
-- Input nodes 50; output nodes 27; reduction = 46%
Tree built in 3.80615ms
Tree size: 26 nodes, 58 characters, 3 attributes
Execution time: 15.83463ms
Memory used: 64339064</pre></section></body></topic>