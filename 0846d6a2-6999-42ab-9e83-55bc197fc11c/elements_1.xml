<?xml version="1.0" encoding="UTF-8"?><elements><element id="0e661463-0259-4d9f-a784-93f4f169bc52" type="para">Abfragen mit XQuery</element><element id="c2687f09-7480-4b8a-aa85-97d3e6821592" type="para">Xqueryführt im Publishing-Bereich ein Schattendasein. In meiner Zeit als XSL Programmierer für zwei Publishing Firmen hatte ich damit nie zu tun. Erst als ich näher an den eigentlichen Daten war und mitXML Datenbankenzu tun hatte, kam ich mit XQuery in Berührung.</element><element id="68844713-b2c6-475e-8649-74c9094a4533d6e6" type="para">Während relationale Datenbanken mit SQL abgefragt werden, verwendet man bei XML Datenbanken, wieeXistoderMarklogic, XQuery als Abfragesprache.</element><element id="beb7e5e2-4c9d-4fc8-b536-7f06da326062d6e8" type="para">Aber auch einzelne XML Dokumente können z.B. in Oxygen XML Editormit demXQuery Builder Tooloder auch per Saxon Kommandozeile abgefragt werden:</element><element id="3b40826f-0e86-4d99-8963-bbd5b8e15048d7e13" type="code">java -cp usr\/lib\/saxon\/saxon.jar net.sf.saxon.Query -s:\"schulen.xml\"-qs:\"\/schulen\/schule[id='6']\"-o:\"\/Users\/Alex\/Desktop\/schule_6.xml\"</element><element id="82bd2bc8-d52c-4012-85f5-f167da7f8dc4d6e12" type="para">Mit der Optionkann hier der Querystring angebenen werden.</element><element id="a1ae2cee-3b1d-4919-8531-d42c03a501f2d6e17" type="para">Wie man an dem einfachen Beispiel schon sieht, ist XQuery mit XPath verwandt. XQuery umfasst den Sprachumfang von XPath bietet aber zusätzlich dieFLOWRSyntax um mächtigere Abfragen stellen zu können. Mittels weitererExtensionskönnen aber auch ganze Programme erstellt werden, die weit über die Funktionalität einer\"Abfragesprache\"hinausgehen.</element><element id="c7e8acb5-6c21-4de1-a88d-8bbd376bbbb4d6e20" type="para">XQuery Builder</element><element id="10cad5f2-85f8-44a2-820b-25080e044176d6e22" type="para">Oxygen XML Editorbietet eine schöne Möglichkeit XQuery-Abfragen auf einem geladenen XML Dokument auszuführen. Dazu kann man seine Query in das betreffende Eingabefenster schreiben.</element><element id="4a22bb7c-894f-4889-b62b-f809732815ffd7e25" type="para">oXygen XQuery Builder</element><element id="f9cd5153-7930-46ee-9bfd-33e14ec55f03d6e28" type="para">Mit folgendem Ergebnis:</element><element id="1fd5004d-79db-4008-8e0d-72c79941d483d7e32" type="code">&lt;dates&gt; &lt;today&gt;2019-01-16+01:00&lt;\/today&gt; &lt;formatted&gt;Wednesday, 16th January 2019&lt;\/formatted&gt; &lt;\/dates&gt;</element><element id="59f98501-17c8-47d7-a314-8f89c6b7299ed6e33" type="para">FLOWR Expression</element><element id="d9c7b63e-5eb8-4c1a-8efb-88af290b55bfd6e34" type="para">FLOWRsteht für. Das sind die Query-Anweisungen, die in dem Ausdruck erlaubt sind - in genau dieser Reihenfolge.</element><element id="06686810-fbc9-4d7b-890c-bf9b0715c6b6d7e39" type="code">let $bibliothek := . for $x in $bibliothek\/\/buecher, $y in $bibliothek\/\/autoren\/autor where starts-with($autor, 'Grass') and $x\/@autorId = $y\/@id return $x\/titel</element><element id="c8a0cb85-703f-405f-b645-b24ac1e81133d6e38" type="para">In dieser Query werden die Titel aller Bücher von Grass zurückgeliefert. Bemerkenswert ist hier die Syntax.</element><element id="9107c2a6-03d3-41db-b842-771ef054948fd6e41" type="para">Normalerweise würde man zwischen den einzelnen Anweisungen einen Blockabschluss, wie ein Semikolon erwarten. Da wir aber hier funtional prorgammieren, ist die Sache etwas anders...</element><element id="7dbf0fb3-8421-43c4-b792-0eba61c4bf27d6e44" type="para">XML per XQuery</element><element id="9ab1e252-cb55-4821-9893-74ec6ef84344d6e45" type="para">Es ist aber auch möglich XML zu erzeugen, wobei natürlich für eine Transformation XSLT vorzuziehen ist. Dazu werden Tags direkt in die Expression geschrieben, wie z.B. hier:</element><element id="c3ffdbb6-121f-461a-b4e6-3d9362c54667d7e51" type="code">declare variable $nachname as xs:string external; &lt;buecher autor=\"{$nachname}\"&gt; { let $bibliothek := . for $x in $bibliothek\/buecher\/\/buch, $y in $bibliothek\/autoren\/\/autor where starts-with($y, $nachname) and $x\/@autorId = $y\/@id order by $x\/ausgabe return &lt;buch ausgabe=\"{$x\/ausgabe}\"&gt; {$x\/titel} &lt;\/buch&gt; } &lt;\/buecher&gt;</element><element id="998102ca-7388-47ce-bb9d-0c6676f3788dd6e49" type="para">Speichert man dieses Schnippsel in einer Dateiab, so kann man mit der folgenden Kommandozeile auf einerDatei als Eingabe suchen:</element><element id="1e9aa886-28f0-4335-8764-bfcf5d9c904ad7e55" type="code">java -cp usr\/lib\/saxon\/saxon.jar net.sf.saxon.Query -t -s:buecher.xml -q:buecher.xquery -o:ergebnis.xml nachname=grass</element><element id="72199b87-ef45-4bac-93aa-a03892a63e12d6e54" type="para">Document Projection</element><element id="4b856b14-5e37-4b3f-97aa-35d140f8c43bd6e55" type="para">Document Projectionist ein verstecktes Saxon XQuery Feature. Es funktioniert nur für eine einzige Abfrage. Das kann schon recht hilfreich sein, wenn man ein mehrere 100MB großes Dokument durchsuchen will.</element><element id="ac58c0ea-28fd-4c0f-9ecc-722bb1233a6ad6e57" type="para">Ohne Projection würde das Beispiel von oben so verarbeitet:</element><element id="590e4ba4-1907-43c5-a9b5-536a674f312bd7e64" type="code">java -cp usr\/lib\/saxon\/saxon.jar net.sf.saxon.Query -t -s:buecher.xml -q:buecher.xquery -o:ergebnis.xml -projection:off nachname=grass Saxon-EE 9.7.0.20J from Saxonica Java version 1.8.0_60 Using license serial number V005095 Analyzing query from Desktop\/buecher.xquery Generating byte code... Analysis time: 201.10095 milliseconds Processing file:\/Users\/Alex\/buecher.xml Using parser com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser Building tree for file:\/Users\/Alex\/buecher.xml using class net.sf.saxon.tree.tiny.TinyBuilder Tree built in 3.482278ms Tree size: 46 nodes, 58 characters, 6 attributes Execution time: 27.137589ms Memory used: 67031664</element><element id="f182025a-4c60-479e-a19f-5927645b8a2ed6e61" type="para">Mit der Optionverändert sich die Ausführungszeit signifikant:</element><element id="8b8ad05b-7495-4984-85f8-f086868d8cd7d7e68" type="code">[...] Document projection for file:\/Users\/Alex\/buecher.xml -- Input nodes 50; output nodes 27; reduction = 46% Tree built in 3.80615ms Tree size: 26 nodes, 58 characters, 3 attributes Execution time: 15.83463ms Memory used: 64339064</element></elements>