[{"id":"0e661463-0259-4d9f-a784-93f4f169bc52","type":"para","text":"Abfragen mit XQuery","title":" Abfragen mit XQuery "},{"id":"c2687f09-7480-4b8a-aa85-97d3e6821592","type":"para","text":"Xquery führt im Publishing-Bereich ein Schattendasein. In meiner Zeit als XSL Programmierer für zwei Publishing Firmen hatte ich damit nie zu tun. Erst als ich näher an den eigentlichen Daten war und mit XML Datenbanken zu tun hatte, kam ich mit XQuery in Berührung.","title":" Abfragen mit XQuery "},{"id":"68844713-b2c6-475e-8649-74c9094a4533d6e6","type":"para","text":"Während relationale Datenbanken mit SQL abgefragt werden, verwendet man bei XML Datenbanken, wie eXist oder Marklogic , XQuery als Abfragesprache.","title":" Abfragen mit XQuery "},{"id":"beb7e5e2-4c9d-4fc8-b536-7f06da326062d6e8","type":"para","text":"Aber auch einzelne XML Dokumente können z.B. in Oxygen XML Editor mit dem XQuery Builder Tool oder auch per Saxon Kommandozeile abgefragt werden:","title":" Abfragen mit XQuery "},{"id":"430742b0-f269-4459-915c-8786b6d5b02cd7e13","type":"code","text":"java -cp usr\/lib\/saxon\/saxon.jar net.sf.saxon.Query -s:\"schulen.xml\" -qs:\"\/schulen\/schule[id='6']\" -o:\"\/Users\/Alex\/Desktop\/schule_6.xml\"","title":" Abfragen mit XQuery "},{"id":"82bd2bc8-d52c-4012-85f5-f167da7f8dc4d6e12","type":"para","text":"Mit der Option kann hier der Querystring angebenen werden.","title":" Abfragen mit XQuery "},{"id":"a1ae2cee-3b1d-4919-8531-d42c03a501f2d6e17","type":"para","text":"Wie man an dem einfachen Beispiel schon sieht, ist XQuery mit XPath verwandt. XQuery umfasst den Sprachumfang von XPath bietet aber zusätzlich die FLOWR Syntax um mächtigere Abfragen stellen zu können. Mittels weiterer Extensions können aber auch ganze Programme erstellt werden, die weit über die Funktionalität einer \"Abfragesprache\" hinausgehen.","title":" Abfragen mit XQuery "},{"id":"c7e8acb5-6c21-4de1-a88d-8bbd376bbbb4d6e20","type":"para","text":"XQuery Builder","title":" Abfragen mit XQuery "},{"id":"10cad5f2-85f8-44a2-820b-25080e044176d6e22","type":"para","text":"Oxygen XML Editor bietet eine schöne Möglichkeit XQuery-Abfragen auf einem geladenen XML Dokument auszuführen. Dazu kann man seine Query in das betreffende Eingabefenster schreiben.","title":" Abfragen mit XQuery "},{"id":"178dfbab-d2e8-4850-8899-3337f01b70b1d7e25","type":"para","text":"oXygen XQuery Builder","title":" Abfragen mit XQuery "},{"id":"f9cd5153-7930-46ee-9bfd-33e14ec55f03d6e28","type":"para","text":"Mit folgendem Ergebnis:","title":" Abfragen mit XQuery "},{"id":"70f3cce4-2105-4eda-a1e6-be69a752c08cd7e32","type":"code","text":"<dates> <today>2019-01-16+01:00<\/today> <formatted>Wednesday, 16th January 2019<\/formatted> <\/dates>","title":" Abfragen mit XQuery "},{"id":"59f98501-17c8-47d7-a314-8f89c6b7299ed6e33","type":"para","text":"FLOWR Expression","title":" Abfragen mit XQuery "},{"id":"d9c7b63e-5eb8-4c1a-8efb-88af290b55bfd6e34","type":"para","text":"FLOWR steht für . Das sind die Query-Anweisungen, die in dem Ausdruck erlaubt sind - in genau dieser Reihenfolge.","title":" Abfragen mit XQuery "},{"id":"c9059a70-3b8c-473b-b1a1-ce6e8f54500cd7e39","type":"code","text":"let $bibliothek := . for $x in $bibliothek\/\/buecher, $y in $bibliothek\/\/autoren\/autor where starts-with($autor, 'Grass') and $x\/@autorId = $y\/@id return $x\/titel","title":" Abfragen mit XQuery "},{"id":"c8a0cb85-703f-405f-b645-b24ac1e81133d6e38","type":"para","text":"In dieser Query werden die Titel aller Bücher von Grass zurückgeliefert. Bemerkenswert ist hier die Syntax.","title":" Abfragen mit XQuery "},{"id":"9107c2a6-03d3-41db-b842-771ef054948fd6e41","type":"para","text":"Normalerweise würde man zwischen den einzelnen Anweisungen einen Blockabschluss, wie ein Semikolon erwarten. Da wir aber hier funtional prorgammieren, ist die Sache etwas anders...","title":" Abfragen mit XQuery "},{"id":"7dbf0fb3-8421-43c4-b792-0eba61c4bf27d6e44","type":"para","text":"XML per XQuery","title":" Abfragen mit XQuery "},{"id":"9ab1e252-cb55-4821-9893-74ec6ef84344d6e45","type":"para","text":"Es ist aber auch möglich XML zu erzeugen, wobei natürlich für eine Transformation XSLT vorzuziehen ist. Dazu werden Tags direkt in die Expression geschrieben, wie z.B. hier:","title":" Abfragen mit XQuery "},{"id":"5481692e-b896-4eb8-8303-09601df730b2d7e51","type":"code","text":"declare variable $nachname as xs:string external; <buecher autor=\"{$nachname}\"> { let $bibliothek := . for $x in $bibliothek\/buecher\/\/buch, $y in $bibliothek\/autoren\/\/autor where starts-with($y, $nachname) and $x\/@autorId = $y\/@id order by $x\/ausgabe return <buch ausgabe=\"{$x\/ausgabe}\"> {$x\/titel} <\/buch> } <\/buecher>","title":" Abfragen mit XQuery "},{"id":"998102ca-7388-47ce-bb9d-0c6676f3788dd6e49","type":"para","text":"Speichert man dieses Schnippsel in einer Datei ab, so kann man mit der folgenden Kommandozeile auf einer Datei als Eingabe suchen:","title":" Abfragen mit XQuery "},{"id":"0838df35-eb7f-457d-a02b-f8aef2febcf4d7e55","type":"code","text":"java -cp usr\/lib\/saxon\/saxon.jar net.sf.saxon.Query -t -s:buecher.xml -q:buecher.xquery -o:ergebnis.xml nachname=grass","title":" Abfragen mit XQuery "},{"id":"72199b87-ef45-4bac-93aa-a03892a63e12d6e54","type":"para","text":"Document Projection","title":" Abfragen mit XQuery "},{"id":"4b856b14-5e37-4b3f-97aa-35d140f8c43bd6e55","type":"para","text":"Document Projection ist ein verstecktes Saxon XQuery Feature. Es funktioniert nur für eine einzige Abfrage. Das kann schon recht hilfreich sein, wenn man ein mehrere 100MB großes Dokument durchsuchen will.","title":" Abfragen mit XQuery "},{"id":"ac58c0ea-28fd-4c0f-9ecc-722bb1233a6ad6e57","type":"para","text":"Ohne Projection würde das Beispiel von oben so verarbeitet:","title":" Abfragen mit XQuery "},{"id":"39fc30bb-a3d7-4d82-98d8-23d54a93f008d7e64","type":"code","text":"java -cp usr\/lib\/saxon\/saxon.jar net.sf.saxon.Query -t -s:buecher.xml -q:buecher.xquery -o:ergebnis.xml -projection:off nachname=grass Saxon-EE 9.7.0.20J from Saxonica Java version 1.8.0_60 Using license serial number V005095 Analyzing query from Desktop\/buecher.xquery Generating byte code... Analysis time: 201.10095 milliseconds Processing file:\/Users\/Alex\/buecher.xml Using parser com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser Building tree for file:\/Users\/Alex\/buecher.xml using class net.sf.saxon.tree.tiny.TinyBuilder Tree built in 3.482278ms Tree size: 46 nodes, 58 characters, 6 attributes Execution time: 27.137589ms Memory used: 67031664","title":" Abfragen mit XQuery "},{"id":"f182025a-4c60-479e-a19f-5927645b8a2ed6e61","type":"para","text":"Mit der Option verändert sich die Ausführungszeit signifikant:","title":" Abfragen mit XQuery "},{"id":"cc3b1512-220a-4bb8-9eb7-2432c7af6d78d7e68","type":"code","text":"[...] Document projection for file:\/Users\/Alex\/buecher.xml -- Input nodes 50; output nodes 27; reduction = 46% Tree built in 3.80615ms Tree size: 26 nodes, 58 characters, 3 attributes Execution time: 15.83463ms Memory used: 64339064","title":" Abfragen mit XQuery "}]