<div data-attribute-id="309017d9-9fd7-4a34-b13a-4bf8ecea4556" class="topic show_menu tags" data-element="topic" data-deletable="false" data-tektur-editor-id="c2b98a23-302d-4968-ae19-10ba76043608"><div class="gui-optional-elements-button" contenteditable="false"><div class="menu-icon" style="display:none">+</div></div><div data-attribute-id="743f34bc-c83e-49d3-9a2e-2c38d1c384c9" class="title pmarker tags" data-element="title" data-tektur-editor-id="e406297f-c0f1-4a98-b640-100678b39560" contenteditable="true">Namespaces</div><div class="abstract optional show_menu tags" data-element="abstract" data-excluding="shortdesc" style="display:none" data-tektur-editor-id="f18c5ff5-022c-4127-88c8-a5e8c59ac056"><div class="gui-optional-elements-button" contenteditable="false"><div class="menu-icon" style="display:none">+</div></div><div class="placeholder text pmarker tags" data-element="p" data-tektur-editor-id="b19c8203-f775-4381-9305-2de6a6d90e55" contenteditable="true"></div></div><div data-attribute-id="2e9a9f57-c540-4349-b553-b3ff06af8175" class="body show_menu tags" data-element="body" data-deletable="false" data-tektur-editor-id="a6a855ab-1f01-4202-9cbf-c0515b075c4b"><div class="gui-optional-elements-button" contenteditable="false"><div class="menu-icon" style="display:none">+</div></div><div class="section tektur-wrapper tags" data-element="section" data-tektur-editor-id="dcdcf32f-9a4b-46d9-a999-1699603d30f6"><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="6f3e2556-a8a9-4c91-bf51-cc4b05ba29c9" class="p pmarker tags" data-element="p" data-tektur-editor-id="f83489a8-35b9-4328-b3c3-c5655222d2a7" contenteditable="true">Wenn man XML Instanzen aus unterschiedlichen Quellen mit XSLT verarbeiten will, wird man sich wohl
oder übel mit dem Thema Namespaces<span class="bracket-tags-marker" id="2b6dea97-7f2c-4f72-a92f-60cb24266570">[[<span class="bracket-tags">xe1:XML Konstrukte;xe2: Namespaces</span>]]</span> auseinander setzen müssen, um Konflikte in den 
Elementselektoren zu vermeiden.</div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="408f70f7-e541-4c17-bc75-16db61b71e87d6e6" class="p pmarker tags" data-element="p" data-tektur-editor-id="ddf81341-f8c9-4efc-a0de-3476addfccce" contenteditable="true">Gerade bei hintereinandergeschalteten Transformationen kann es auch passieren, 
dass unerwartet ein Namespace in die Ausgabe generiert wird,
den der folgende Prozesschritt nicht versteht, weil er dort nicht deklariert wurde.</div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="7b6e758e-d962-425a-86cf-30fc852bda81d6e8" class="p pmarker tags" data-element="p" data-tektur-editor-id="e4ef22e5-bad2-4a1d-af55-7bc67a06132d" contenteditable="true">Es gibt meherere Möglichkeiten einen Namespace im Stylesheet zu deklarieren. Gehen wir davon aus,
dass in einem Transformationsschritt genau eine Quelle und max. eine Konfigurationsdatei verarbeitet 
wird, dann kann das Stylsheet-Element bspw. so aussehen:</div><div class="pre"><div data-attribute-id="9ca5e650-0f0e-4d13-afa3-775497ef6b4dd7e10" data-attribute-xml_space="preserve" class="pre-content pmarker tags" data-element="pre" data-tektur-editor-id="a86c30c2-3a8e-4ad5-9078-40d71d998b36" contenteditable="true">&#x3C;xsl:stylesheet version="2.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" 
  xmlns:tektur="https://namespace-eigener-xslt-funktionen"
  xmlns="http://namespace-in-der-xml-eingabe.com/"
  xpath-default-namespace="https://namespace-der-konfigdatei.com/"
  exclude-result-prefixes="#all"&#x3E;</div></div><div class="placeholder text pmarker tags" data-element="p" data-tektur-editor-id="3c367c17-5875-4cb7-b4c6-b29bd5387619" contenteditable="true"></div><ul data-attribute-id="f50cf486-fec3-4aca-a510-4347a0fffe51d6e12" class="ul tags" data-element="ul" data-tektur-editor-id="1556a043-2d44-4b20-bb25-8e2a09afa47b"><li data-attribute-id="a71c0a9a-d856-483b-a102-bace566e0c04d6e13" class="li tags" data-element="li" data-tektur-editor-id="339f56d2-f17e-49f6-9b07-6c07974fa5b7"><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="3bc26fb9-3d57-4990-9cb6-bdeea4a490d5d6e14" class="p pmarker tags" data-element="p" data-tektur-editor-id="cffb24d5-ccf8-42d3-9a81-62cb50e80463" contenteditable="true">Der <span class="bracket-tags-marker" id="ba06bc04-40dd-46e8-ba69-e7c7f2d61322">[[<span class="bracket-tags">code:xsl</span>]]</span>Namespace ist klar</div></li><li data-attribute-id="b2fa04fc-e0d0-4a22-868d-6de15f9536f0d6e19" class="li tags" data-element="li" data-tektur-editor-id="a9cd94a2-6f1d-4560-8dc9-629ef9429897"><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="9f37a0f6-0e32-4d52-a2df-26c8b92c584bd6e20" class="p pmarker tags" data-element="p" data-tektur-editor-id="3b229092-3564-4776-9942-067d411c7f44" contenteditable="true">Der <span class="bracket-tags-marker" id="47061981-cf34-49c7-a8d5-b6ac059bc7cf">[[<span class="bracket-tags">code:xs</span>]]</span>Namespace ist notwendig, wenn man typisiert arbeiten will. Er erlaubt das Einbinden von Datentypen
nach der <span class="bracket-tags-marker" id="32751e90-7cae-4501-82e8-28da1d43f4ba">[[<span class="bracket-tags">link</span>]]</span>XML Schema Spezifikation<span class="bracket-tags-marker" id="c32a0db9-59eb-4da7-8e28-3de3ee2ff571">[[<span class="bracket-tags">fn:https://de.wikipedia.org/wiki/XML_Schema*XML Schema ist der Nachfolger der DTD, ist XML basiert und erlaubt auch die die Content-Validierung in einem bestimmten Umfang</span>]]</span> und somit die 
bessere Validierung des Stylesheets zur Compile-Zeit.</div></li><li data-attribute-id="40b70b85-31dd-4109-882f-aa19e8e2b1b8d6e25" class="li tags" data-element="li" data-tektur-editor-id="3489c7f4-d134-4f43-83d5-d048b25fba2c"><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="effc0d73-d115-4f50-99c0-bd16960d52f6d6e26" class="p pmarker tags" data-element="p" data-tektur-editor-id="536b260f-ffd1-4266-8aa9-d2257d0c71ba" contenteditable="true">Die Deklaration eines eigenen geprefixten Namespaces erlaubt das Einbinden von eigenen XSLT Funktionen, 
wie z.B. auch das Einbinden der <span class="bracket-tags-marker" id="e931797a-21b9-4f99-9b9a-617606430d00">[[<span class="bracket-tags">link</span>]]</span>FunctX Bibliothek<span class="bracket-tags-marker" id="80dfb723-44ce-4d03-9ccc-aef7678ae4b0">[[<span class="bracket-tags">fn:http://www.xsltfunctions.com/*Sehr gut gegliederte Funktionsbibliothek von Priscilla Walmsley</span>]]</span></div></li><li data-attribute-id="0a804e4e-1e9c-4033-b79e-78fddeb0f809d6e28" class="li tags" data-element="li" data-tektur-editor-id="09f406fe-5bae-42d3-a4a4-10de353c014f"><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="985f02e1-ff86-49cd-9f9c-d285261fb6bed6e29" class="p pmarker tags" data-element="p" data-tektur-editor-id="89bd5bd4-e0e0-49c7-af4d-378c9663c33f" contenteditable="true">Der Nicht-geprefixte Namespace ist der <span data-attribute-id="6826fb26-31e6-46aa-b6a4-d5d1eb9704f2d7e55" class="b tags" data-element="b" data-tektur-editor-id="dc01842b-de2d-4bf9-b5fb-81a9642e5942">Default-Namespace</span> und kann einen Namespace aus der Eingabe behandeln</div></li><li data-attribute-id="77756675-79a9-49ee-a322-2fe357eb505ad6e31" class="li tags" data-element="li" data-tektur-editor-id="270a1b6c-46aa-4e06-a4d6-094154e23c0e"><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="6f7d075e-efb2-4407-adb3-6b0d46163a1ed6e32" class="p pmarker tags" data-element="p" data-tektur-editor-id="583064fa-da68-411c-899c-d1173fee5d23" contenteditable="true">Das Attribut <span data-attribute-id="4eb02d99-4049-43c5-a105-76f286898d2cd6e34" class="b tags" data-element="b" data-tektur-editor-id="43c3e0ec-ec4a-4a89-b80c-829a25eb080a">xpath-default-namespace</span> gibt einen weiteren Namespace an, der in XPath Funktionen verwendet werden kann.
In diesem Feld würde ich den Namespace einer Konfigurations- oder separaten Datendatei angeben.</div></li></ul><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="facda359-d33a-4d29-86cd-1c8ed0c0c37bd6e37" class="p pmarker tags" data-element="p" data-tektur-editor-id="a5698871-27f8-48dc-8167-f18d336f2325" contenteditable="true">Mehr als einen Namespace in der Eingabe sollte man aus meiner Sicht bei der XML Verarbeitung mit XSLT vermeiden wenn es geht.
Ggf. empfiehlt es sich, die Eingabe vor der Verarbeitung zu normalisieren und Elemente ggf. umzubenennen. Ansonsten kann man auch eigene Namespace-Prefixes deklarieren, wie z.B.:</div><div class="pre"><div data-attribute-id="e281d64e-8a65-481d-bb6a-b09e44eb0173d7e36" data-attribute-xml_space="preserve" class="pre-content pmarker tags" data-element="pre" data-tektur-editor-id="2a35ad02-124e-49cc-8181-301c48c6c264" contenteditable="true">xmlns:ext="https://www.tekturcms.de/external-tools"</div></div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="11bfa628-dd5a-46ee-9dfa-99ea9733ed73d6e41" class="p pmarker tags" data-element="p" data-tektur-editor-id="479fda6b-cd8a-4b4f-a9f9-283b7dbc3ac4" contenteditable="true">und diese in XPath Selektionen und Match-Regeln verwenden.</div><div data-attribute-id="d4c6a587-757b-4b00-883c-9e5273834a12d6e39" data-attribute-type="danger" data-attribute-status="changed" class="hazardstatement show_menu tags" data-element="hazardstatement" data-ommited="messagepanel" data-tektur-editor-id="0023f27c-a302-48f8-8924-3fba1b034ea1"><div class="gui-optional-elements-button" contenteditable="false"><div class="menu-icon" style="display:none">+</div></div><div class="Danger container"><div class="signal-word">DANGER</div><div class="hcontent"><div data-attribute-id="6a0d517a-4a6c-48b2-b637-699ec79f42a7d6e41" class="typeofhazard tags" data-element="typeofhazard" data-tektur-editor-id="510d44c4-1c57-4e58-a4d1-e9662ce41e16"><div class="p tektur-wrapper pmarker tags" data-element="p" data-tektur-editor-id="b4b2cc85-3426-4a2d-b2f8-0868de752810" contenteditable="true">Befinden sich in den Eingabedaten Namespaces, die man in den XSLT Stylesheets nicht handelt - der Namespace kann auch nur
an einem ganz bestimmten Element hängen - so kann es bei der Transformation - ohne Fehlermeldung - zu unerwarteten Ergebnissen kommen.</div></div><div class="consequence optional multiple tags" data-element="consequence" style="display:none" data-tektur-editor-id="cbbc6c33-a6c1-4856-9712-301d23112984"><div class="gui-multiple-elements-button" contenteditable="false"><div class="menu-icon" style="display:none">+</div></div><div class="p tektur-wrapper placeholder text pmarker tags" data-element="p" data-tektur-editor-id="478518dc-47b2-4a93-ac07-a21abc36abfa" contenteditable="true"></div></div><div data-attribute-id="4d47e81a-7a6a-4f2e-9621-45a6535edbb2d6e43" class="howtoavoid multiple tags" data-element="howtoavoid" data-tektur-editor-id="788bab6f-059a-4689-902e-e006f8216573"><div class="gui-multiple-elements-button" contenteditable="false"><div class="menu-icon" style="display:none">+</div></div><div class="p tektur-wrapper pmarker tags" data-element="p" data-tektur-editor-id="51bc7481-12e7-4840-8d05-e4b5c8228b31" contenteditable="true">Deshalb sollte man die Daten im Vorfeld bzgl. Namespaces sehr genau analysieren.</div></div></div></div></div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="b714b258-69e2-40ef-9d70-582d27bbfc6cd6e45" class="p pmarker tags" data-element="p" data-tektur-editor-id="fe4e10e7-7824-4de5-b792-e9271767b191" contenteditable="true">Namespaces in der Eingabe werden also meistens über die Kopfdeklaration in der Stylesheetdatei gehandelt, welcher Namespace
schliesslich in die Ausgabe geschrieben wird, hängt vom aktuell verarbeiteten Kontextknoten ab:</div><ul data-attribute-id="4fd51183-cb5c-454e-88a2-af0392a44343d6e47" class="ul tags" data-element="ul" data-tektur-editor-id="052e3c60-d1c2-406a-8271-19845ccdd93a"><li data-attribute-id="83a93052-ddd0-4ca8-a440-e11cae99f4e2d6e48" class="li tags" data-element="li" data-tektur-editor-id="d10449eb-ec1e-4991-abdd-49ae714ba0b9"><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="93df2752-2e39-44f2-8306-bc4014ec566ad6e49" class="p pmarker tags" data-element="p" data-tektur-editor-id="bd6a13bc-7565-4580-8933-21724f7ae35e" contenteditable="true">Elemente, die man erzeugt, erhalten automatisch den Default-Namespace, wenn man nicht explizit einen Namespace angibt.</div></li><li data-attribute-id="35a0b8ce-4224-4958-8bb7-9e65ce516d68d6e51" class="li tags" data-element="li" data-tektur-editor-id="5b714c9c-927f-4b72-afcb-8b4c1ee40183"><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="dd1681a1-b730-4864-9fc6-3b85c7d428c2d6e52" class="p pmarker tags" data-element="p" data-tektur-editor-id="f6b4fc4a-4035-4d30-a2c4-f52334db2dd9" contenteditable="true">Elemente, die man kopiert, transportieren den Namespace, den sie in der Eingabe hatten, wenn man dies nicht explizit verhindert.</div></li></ul><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="b7e9f54a-5c0b-48de-abf2-80f917c915acd6e54" class="p pmarker tags" data-element="p" data-tektur-editor-id="321b88b0-7184-40b7-bbf2-57ed7f252ecb" contenteditable="true">Um diese beiden Default Einstellungen zu steuern (bzw. zu überschreiben) gibt es mehrere Möglichkeiten:</div><div class="pre"><div data-attribute-id="fb376aa9-5867-454f-a5c7-8e462c69e4b6d7e58" data-attribute-xml_space="preserve" class="pre-content pmarker tags" data-element="pre" data-tektur-editor-id="a99c53cb-58ea-4158-afcc-0ce7fe46170b" contenteditable="true">&#x3C;xsl:element name="{local-name()}" namespace="{namespace-uri()}"&#x3E;</div></div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="e38c1750-4914-402d-a6c8-1189f6f96106d6e59" class="p pmarker tags" data-element="p" data-tektur-editor-id="416ea315-68c9-4a29-b3cb-e767aed09a94" contenteditable="true">Hier wird ein Element mit dem un-geprefixten Namespace des Kontextknotens deklariert.
Wenn der Kontextknoten keinen anderen Namespace hat, so wird hierdurch sichergestellt,
dass der Default-Namespace auch tatsächlich in die Ausgabe kommt.</div><div class="pre"><div data-attribute-id="0fa6afe8-28d4-4832-ac45-0c43ed2e90f7d7e62" data-attribute-xml_space="preserve" class="pre-content pmarker tags" data-element="pre" data-tektur-editor-id="09c8d2f6-efc6-4d73-94d8-615d376f1765" contenteditable="true">&#x3C;xsl:element name="meinelement" namespace="mein-namespace"&#x3E;</div></div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="ff135156-7c5f-461a-aa39-03acbbfc2164d6e63" class="p pmarker tags" data-element="p" data-tektur-editor-id="df569dcd-5bb2-4b71-8379-0c8b2c85d1e5" contenteditable="true">Hier wird ein Element mit eigener Namespace Angabe in die Ausgabe geschrieben. Einfacher geschrieben:</div><div class="pre"><div data-attribute-id="82abfd77-ae4c-4f21-8b5c-03e26b2efc98d7e66" data-attribute-xml_space="preserve" class="pre-content pmarker tags" data-element="pre" data-tektur-editor-id="8fba28ef-6170-4138-8164-c1c60eb687af" contenteditable="true">&#x3C;mein-element xmlns="mein-namespace"&#x3E;</div></div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="5803933b-c6bf-431b-9f72-f8649ce4f19fd6e71" class="p pmarker tags" data-element="p" data-tektur-editor-id="ab4c62be-25d3-48b4-979e-0910ade2f2d7" contenteditable="true">Es gibt auch ein Attribut am xsl:copy Element,
das den Vorgang des Namespace-Kopierens steuern kann:</div><div class="pre"><div data-attribute-id="34d911c0-7ce6-4863-85fc-938d5c627676d7e70" data-attribute-xml_space="preserve" class="pre-content pmarker tags" data-element="pre" data-tektur-editor-id="b0036a39-b347-48c4-bbac-5c325130f5c9" contenteditable="true">&#x3C;xsl:template match="p"&#x3E;
  &#x3C;xsl:copy copy-namespaces="no"&#x3E;
     &#x3C;xsl:apply-templates/&#x3E;
   &#x3C;/xsl:copy&#x3E;
&#x3C;/xsl:template&#x3E;</div></div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="1f87506c-b5f5-4f11-9ff3-4932938dea95d6e67" class="p pmarker tags" data-element="p" data-tektur-editor-id="f9667a3e-5a57-43e7-b10b-a8829db4e13e" contenteditable="true">Hier wird der Namespace am <span class="bracket-tags-marker" id="8bf25ee0-6985-487b-b6eb-87686f700151">[[<span class="bracket-tags">code:p</span>]]</span> Element nicht in die Ausgabe geschrieben. Ggf. funktioniert diese
Funktion aber mit unerwarteten Ergebnissen, deshalb sollte man sich ohne genauen Test nicht darauf verlassen.</div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="526b542d-9aaa-4181-bb81-9990f3f9940bd6e69" class="p pmarker tags" data-element="p" data-tektur-editor-id="2ecc619c-9641-4f33-9019-03649a155e1d" contenteditable="true">Ebenso kann eine Default-Kopierregel verwendet werden, die es verbietet einen Namespace
weiterzuvererben:</div><div class="pre"><div data-attribute-id="1f5864cb-261c-403f-b95e-e084215fae59d7e76" data-attribute-xml_space="preserve" class="pre-content pmarker tags" data-element="pre" data-tektur-editor-id="1f3810fc-7d21-4ded-9ca5-0ed510aaed0e" contenteditable="true">&#x3C;xsl:template match="@* | node()"&#x3E;
   &#x3C;xsl:copy inherit-namespaces="no"&#x3E;
     &#x3C;xsl:apply-templates select="@* | node()"/&#x3E;
   &#x3C;/xsl:copy&#x3E;
&#x3C;/xsl:template&#x3E;</div></div><div class="placeholder text pmarker tags" data-element="p" data-tektur-editor-id="04f631fb-4e98-4761-8d6e-5b65cf413aa0" contenteditable="true"></div></div><div data-element="section" class="section optional show_menu tags" data-tektur-editor-id="8e1b0751-9bd0-41a4-ac0e-6c5f6ff122f5"><div class="gui-optional-elements-button" contenteditable="false"><div class="menu-icon" style="display:none">+</div></div><div data-attribute-id="ad139a27-9649-4c97-8f05-a62edd570cb7d6e74" class="title pmarker tags" data-element="title" data-tektur-editor-id="cc1d9848-c669-45e5-a8c8-c90ea17b545a" contenteditable="true">Namespaces in XQuery</div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="6a862358-2454-4cb0-a7c5-854c9d4cf899d6e75" class="p pmarker tags" data-element="p" data-tektur-editor-id="ddf71912-a237-49e1-b49e-be6d96b493b4" contenteditable="true">Während XSLT dazu dienen sollte, XML Daten in andere (XML-) Formate zu transformieren, dient XQuery 
z.B. dazu auf einer <span data-attribute-id="444bc708-61da-4b72-a757-3e25f37f5729d7e200" class="b tags" data-element="b" data-tektur-editor-id="111d960b-b0c3-45c7-87ad-c8b9712da029">NoSQL</span> Datenbank Daten aus unterschiedlichen Quellen
zu selektieren, zu harmonisieren und an verarbeitende Prozesse weiterzugeben.</div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="56fd4141-0088-4fdb-bf10-930e2d5d028ed6e77" class="p pmarker tags" data-element="p" data-tektur-editor-id="af0245e0-ab5f-4045-adee-5becd5b30f5c" contenteditable="true">Deshalb ist es für mich nicht so erstaunlich, dass das Namespace Konzept in XQuery irgendwie besser
funktioniert.</div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="baa93854-b02c-41f2-a553-bb6701a8925ed6e79" class="p pmarker tags" data-element="p" data-tektur-editor-id="c91b399b-d211-464a-a7bc-a68a66b3ea31" contenteditable="true">Damit man überhaupt Daten auf einem mit Namespaces versehenen XML Dokument selektieren
kann, müssen alle Namspaces am Anfang des XQuery Ausdrucks angegeben werden, das sieht so aus:</div><div class="pre"><div data-attribute-id="18168b3a-4285-43ff-8015-4b051b9a5db9d7e91" data-attribute-xml_space="preserve" class="pre-content pmarker tags" data-element="pre" data-tektur-editor-id="fcb07973-078e-497f-84eb-b3e2aee25673" contenteditable="true">xquery version "1.0-ml";

import module namespace tektur = "http://www.teturcms.de/xquery/common" 
                                  at "common.xqy";
import module namespace mem = "http://xqdev.com/in-mem-update" 
                                  at '/MarkLogic/appservices/utils/in-mem-update.xqy';
declare namespace local = "https://lambdawerk.com/code/alex-sandbox/1.0";
declare namespace weiredns = "https://weired-ns-in-input-data.com/weired/ns";
declare namespace xs = "http://www.w3.org/2001/XMLSchema"; </div></div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="d6bb0949-b9fa-4770-ba36-3acf2056e934d6e83" class="p pmarker tags" data-element="p" data-tektur-editor-id="76c97230-23db-4a6f-a4fa-cbcf90fd9524" contenteditable="true">Hier werden zuerst Funktionen aus anderen Modulen eingebunden, nämlich die in einer Datei <span class="bracket-tags-marker" id="a9df7105-57d6-4439-be6f-d408e5e058d4">[[<span class="bracket-tags">code:common.xqy</span>]]</span> der eigenen Entwicklung, sowie die Bibliothek <span class="bracket-tags-marker" id="2648dda4-14a4-4bcd-a49c-f39da6738acf">[[<span class="bracket-tags">code:mem</span>]]</span> aus der<span data-attribute-id="fc59fe90-8635-452b-bc60-30a7025d884ad7e226" class="b" data-element="b"> MarkLogic</span>
Umgebung. Danach wird ein Namespace<span class="bracket-tags-marker" id="734d65b8-9eb3-45fa-bb27-aaa4d72b520b">[[<span class="bracket-tags">code:local</span>]]</span> deklariert, den man verwenden wird, wenn im weiteren Verlauf
eigene XQuery Funktionen verwendet werden sollen, sowie der Namespace <span class="bracket-tags-marker" id="ed0b9977-25b0-4548-812d-9ea492de1935">[[<span class="bracket-tags">code:weiredns</span>]]</span>, der in den Eingabedaten
vorhanden ist. Der Namespace<span class="bracket-tags-marker" id="f3c9812b-cdcd-481a-930d-401ff96a6726">[[<span class="bracket-tags">code:xs</span>]]</span> ist analog zum XSLT Beispiel gesetzt.</div></div></div></div>