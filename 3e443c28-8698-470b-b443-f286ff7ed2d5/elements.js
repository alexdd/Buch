[{"id":"743f34bc-c83e-49d3-9a2e-2c38d1c384c9","type":"para","text":"Namespaces","title":" Namespaces "},{"id":"6f3e2556-a8a9-4c91-bf51-cc4b05ba29c9","type":"para","text":"Wenn man XML Instanzen aus unterschiedlichen Quellen mit XSLT verarbeiten will, wird man sich wohl oder übel mit dem Thema Namespaces auseinander setzen müssen, um Konflikte in den Elementselektoren zu vermeiden.","title":" Namespaces "},{"id":"408f70f7-e541-4c17-bc75-16db61b71e87d6e6","type":"para","text":"Gerade bei hintereinandergeschalteten Transformationen kann es auch passieren, dass unerwartet ein Namespace in die Ausgabe generiert wird, den der folgende Prozesschritt nicht versteht, weil er dort nicht deklariert wurde.","title":" Namespaces "},{"id":"7b6e758e-d962-425a-86cf-30fc852bda81d6e8","type":"para","text":"Es gibt meherere Möglichkeiten einen Namespace im Stylesheet zu deklarieren. Gehen wir davon aus, dass in einem Transformationsschritt genau eine Quelle und max. eine Konfigurationsdatei verarbeitet wird, dann kann das Stylsheet-Element bspw. so aussehen:","title":" Namespaces "},{"id":"d082118c-5597-4427-9537-ca5b9e675d9fd7e10","type":"code","text":"<xsl:stylesheet version=\"2.0\" xmlns:xsl=\"http:\/\/www.w3.org\/1999\/XSL\/Transform\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\" xmlns:tektur=\"https:\/\/namespace-eigener-xslt-funktionen\" xmlns=\"http:\/\/namespace-in-der-xml-eingabe.com\/\" xpath-default-namespace=\"https:\/\/namespace-der-konfigdatei.com\/\" exclude-result-prefixes=\"#all\">","title":" Namespaces "},{"id":"3bc26fb9-3d57-4990-9cb6-bdeea4a490d5d6e14","type":"para","text":"Der Namespace ist klar","title":" Namespaces "},{"id":"9f37a0f6-0e32-4d52-a2df-26c8b92c584bd6e20","type":"para","text":"Der Namespace ist notwendig, wenn man typisiert arbeiten will. Er erlaubt das Einbinden von Datentypen nach der XML Schema Spezifikation und somit die bessere Validierung des Stylesheets zur Compile-Zeit.","title":" Namespaces "},{"id":"effc0d73-d115-4f50-99c0-bd16960d52f6d6e26","type":"para","text":"Die Deklaration eines eigenen geprefixten Namespaces erlaubt das Einbinden von eigenen XSLT Funktionen, wie z.B. auch das Einbinden der FunctX Bibliothek","title":" Namespaces "},{"id":"985f02e1-ff86-49cd-9f9c-d285261fb6bed6e29","type":"para","text":"Der Nicht-geprefixte Namespace ist der Default-Namespace und kann einen Namespace aus der Eingabe behandeln","title":" Namespaces "},{"id":"6f7d075e-efb2-4407-adb3-6b0d46163a1ed6e32","type":"para","text":"Das Attribut xpath-default-namespace gibt einen weiteren Namespace an, der in XPath Funktionen verwendet werden kann. In diesem Feld würde ich den Namespace einer Konfigurations- oder separaten Datendatei angeben.","title":" Namespaces "},{"id":"facda359-d33a-4d29-86cd-1c8ed0c0c37bd6e37","type":"para","text":"Mehr als einen Namespace in der Eingabe sollte man aus meiner Sicht bei der XML Verarbeitung mit XSLT vermeiden wenn es geht. Ggf. empfiehlt es sich, die Eingabe vor der Verarbeitung zu normalisieren und Elemente ggf. umzubenennen. Ansonsten kann man auch eigene Namespace-Prefixes deklarieren, wie z.B.:","title":" Namespaces "},{"id":"481f466e-409a-47b2-9edd-362b1dec5939d7e36","type":"code","text":"xmlns:ext=\"https:\/\/www.tekturcms.de\/external-tools\"","title":" Namespaces "},{"id":"11bfa628-dd5a-46ee-9dfa-99ea9733ed73d6e41","type":"para","text":"und diese in XPath Selektionen und Match-Regeln verwenden.","title":" Namespaces "},{"id":"b714b258-69e2-40ef-9d70-582d27bbfc6cd6e45","type":"para","text":"Namespaces in der Eingabe werden also meistens über die Kopfdeklaration in der Stylesheetdatei gehandelt, welcher Namespace schliesslich in die Ausgabe geschrieben wird, hängt vom aktuell verarbeiteten Kontextknoten ab:","title":" Namespaces "},{"id":"93df2752-2e39-44f2-8306-bc4014ec566ad6e49","type":"para","text":"Elemente, die man erzeugt, erhalten automatisch den Default-Namespace, wenn man nicht explizit einen Namespace angibt.","title":" Namespaces "},{"id":"dd1681a1-b730-4864-9fc6-3b85c7d428c2d6e52","type":"para","text":"Elemente, die man kopiert, transportieren den Namespace, den sie in der Eingabe hatten, wenn man dies nicht explizit verhindert.","title":" Namespaces "},{"id":"b7e9f54a-5c0b-48de-abf2-80f917c915acd6e54","type":"para","text":"Um diese beiden Default Einstellungen zu steuern (bzw. zu überschreiben) gibt es mehrere Möglichkeiten:","title":" Namespaces "},{"id":"49a55830-d6e2-42df-a981-3e49ee97bc0dd7e58","type":"code","text":"<xsl:element name=\"{local-name()}\" namespace=\"{namespace-uri()}\">","title":" Namespaces "},{"id":"e38c1750-4914-402d-a6c8-1189f6f96106d6e59","type":"para","text":"Hier wird ein Element mit dem un-geprefixten Namespace des Kontextknotens deklariert. Wenn der Kontextknoten keinen anderen Namespace hat, so wird hierdurch sichergestellt, dass der Default-Namespace auch tatsächlich in die Ausgabe kommt.","title":" Namespaces "},{"id":"3da17c0a-a144-4623-b9c8-67822f5b5021d7e62","type":"code","text":"<xsl:element name=\"meinelement\" namespace=\"mein-namespace\">","title":" Namespaces "},{"id":"ff135156-7c5f-461a-aa39-03acbbfc2164d6e63","type":"para","text":"Hier wird ein Element mit eigener Namespace Angabe in die Ausgabe geschrieben. Einfacher geschrieben:","title":" Namespaces "},{"id":"54fbda7f-adb4-454d-b5e5-d72a64aaa833d7e66","type":"code","text":"<mein-element xmlns=\"mein-namespace\">","title":" Namespaces "},{"id":"5803933b-c6bf-431b-9f72-f8649ce4f19fd6e71","type":"para","text":"Es gibt auch ein Attribut am xsl:copy Element, das den Vorgang des Namespace-Kopierens steuern kann:","title":" Namespaces "},{"id":"4ef6f8c1-9c8a-47d6-8c52-3584a82aa6a9d7e70","type":"code","text":"<xsl:template match=\"p\"> <xsl:copy copy-namespaces=\"no\"> <xsl:apply-templates\/> <\/xsl:copy> <\/xsl:template>","title":" Namespaces "},{"id":"1f87506c-b5f5-4f11-9ff3-4932938dea95d6e67","type":"para","text":"Hier wird der Namespace am Element nicht in die Ausgabe geschrieben. Ggf. funktioniert diese Funktion aber mit unerwarteten Ergebnissen, deshalb sollte man sich ohne genauen Test nicht darauf verlassen.","title":" Namespaces "},{"id":"526b542d-9aaa-4181-bb81-9990f3f9940bd6e69","type":"para","text":"Ebenso kann eine Default-Kopierregel verwendet werden, die es verbietet einen Namespace weiterzuvererben:","title":" Namespaces "},{"id":"803b955e-731a-4719-b482-aa41b71eb2d2d7e76","type":"code","text":"<xsl:template match=\"@* | node()\"> <xsl:copy inherit-namespaces=\"no\"> <xsl:apply-templates select=\"@* | node()\"\/> <\/xsl:copy> <\/xsl:template>","title":" Namespaces "},{"id":"ad139a27-9649-4c97-8f05-a62edd570cb7d6e74","type":"para","text":"Namespaces in XQuery","title":" Namespaces "},{"id":"6a862358-2454-4cb0-a7c5-854c9d4cf899d6e75","type":"para","text":"Während XSLT dazu dienen sollte, XML Daten in andere (XML-) Formate zu transformieren, dient XQuery z.B. dazu auf einer NoSQL Datenbank Daten aus unterschiedlichen Quellen zu selektieren, zu harmonisieren und an verarbeitende Prozesse weiterzugeben.","title":" Namespaces "},{"id":"56fd4141-0088-4fdb-bf10-930e2d5d028ed6e77","type":"para","text":"Deshalb ist es für mich nicht so erstaunlich, dass das Namespace Konzept in XQuery irgendwie besser funktioniert.","title":" Namespaces "},{"id":"baa93854-b02c-41f2-a553-bb6701a8925ed6e79","type":"para","text":"Damit man überhaupt Daten auf einem mit Namespaces versehenen XML Dokument selektieren kann, müssen alle Namspaces am Anfang des XQuery Ausdrucks angegeben werden, das sieht so aus:","title":" Namespaces "},{"id":"b79013c3-8cf6-4359-9027-9e53140fc665d7e91","type":"code","text":"xquery version \"1.0-ml\"; import module namespace tektur = \"http:\/\/www.teturcms.de\/xquery\/common\" at \"common.xqy\"; import module namespace mem = \"http:\/\/xqdev.com\/in-mem-update\" at '\/MarkLogic\/appservices\/utils\/in-mem-update.xqy'; declare namespace local = \"https:\/\/lambdawerk.com\/code\/alex-sandbox\/1.0\"; declare namespace weiredns = \"https:\/\/weired-ns-in-input-data.com\/weired\/ns\"; declare namespace xs = \"http:\/\/www.w3.org\/2001\/XMLSchema\";","title":" Namespaces "},{"id":"d6bb0949-b9fa-4770-ba36-3acf2056e934d6e83","type":"para","text":"Hier werden zuerst Funktionen aus anderen Modulen eingebunden, nämlich die in einer Datei der eigenen Entwicklung, sowie die Bibliothek aus der MarkLogic Umgebung. Danach wird ein Namespace deklariert, den man verwenden wird, wenn im weiteren Verlauf eigene XQuery Funktionen verwendet werden sollen, sowie der Namespace , der in den Eingabedaten vorhanden ist. Der Namespace ist analog zum XSLT Beispiel gesetzt.","title":" Namespaces "}]