<?xml version="1.0" encoding="UTF-8"?><elements><element id="743f34bc-c83e-49d3-9a2e-2c38d1c384c9" type="para">Namespaces</element><element id="6f3e2556-a8a9-4c91-bf51-cc4b05ba29c9" type="para">Wenn man XML Instanzen aus unterschiedlichen Quellen mit XSLT verarbeiten will, wird man sich wohl oder übel mit dem Thema Namespacesauseinander setzen müssen, um Konflikte in den Elementselektoren zu vermeiden.</element><element id="408f70f7-e541-4c17-bc75-16db61b71e87d6e6" type="para">Gerade bei hintereinandergeschalteten Transformationen kann es auch passieren, dass unerwartet ein Namespace in die Ausgabe generiert wird, den der folgende Prozesschritt nicht versteht, weil er dort nicht deklariert wurde.</element><element id="7b6e758e-d962-425a-86cf-30fc852bda81d6e8" type="para">Es gibt meherere Möglichkeiten einen Namespace im Stylesheet zu deklarieren. Gehen wir davon aus, dass in einem Transformationsschritt genau eine Quelle und max. eine Konfigurationsdatei verarbeitet wird, dann kann das Stylsheet-Element bspw. so aussehen:</element><element id="9ca5e650-0f0e-4d13-afa3-775497ef6b4dd7e10" type="code">&lt;xsl:stylesheet version=\"2.0\"xmlns:xsl=\"http:\/\/www.w3.org\/1999\/XSL\/Transform\"xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\"xmlns:tektur=\"https:\/\/namespace-eigener-xslt-funktionen\"xmlns=\"http:\/\/namespace-in-der-xml-eingabe.com\/\"xpath-default-namespace=\"https:\/\/namespace-der-konfigdatei.com\/\"exclude-result-prefixes=\"#all\"&gt;</element><element id="3bc26fb9-3d57-4990-9cb6-bdeea4a490d5d6e14" type="para">DerNamespace ist klar</element><element id="9f37a0f6-0e32-4d52-a2df-26c8b92c584bd6e20" type="para">DerNamespace ist notwendig, wenn man typisiert arbeiten will. Er erlaubt das Einbinden von Datentypen nach derXML Schema Spezifikationund somit die bessere Validierung des Stylesheets zur Compile-Zeit.</element><element id="effc0d73-d115-4f50-99c0-bd16960d52f6d6e26" type="para">Die Deklaration eines eigenen geprefixten Namespaces erlaubt das Einbinden von eigenen XSLT Funktionen, wie z.B. auch das Einbinden derFunctX Bibliothek</element><element id="985f02e1-ff86-49cd-9f9c-d285261fb6bed6e29" type="para">Der Nicht-geprefixte Namespace ist derDefault-Namespaceund kann einen Namespace aus der Eingabe behandeln</element><element id="6f7d075e-efb2-4407-adb3-6b0d46163a1ed6e32" type="para">Das Attributxpath-default-namespacegibt einen weiteren Namespace an, der in XPath Funktionen verwendet werden kann. In diesem Feld würde ich den Namespace einer Konfigurations- oder separaten Datendatei angeben.</element><element id="facda359-d33a-4d29-86cd-1c8ed0c0c37bd6e37" type="para">Mehr als einen Namespace in der Eingabe sollte man aus meiner Sicht bei der XML Verarbeitung mit XSLT vermeiden wenn es geht. Ggf. empfiehlt es sich, die Eingabe vor der Verarbeitung zu normalisieren und Elemente ggf. umzubenennen. Ansonsten kann man auch eigene Namespace-Prefixes deklarieren, wie z.B.:</element><element id="e281d64e-8a65-481d-bb6a-b09e44eb0173d7e36" type="code">xmlns:ext=\"https:\/\/www.tekturcms.de\/external-tools\"</element><element id="11bfa628-dd5a-46ee-9dfa-99ea9733ed73d6e41" type="para">und diese in XPath Selektionen und Match-Regeln verwenden.</element><element id="b714b258-69e2-40ef-9d70-582d27bbfc6cd6e45" type="para">Namespaces in der Eingabe werden also meistens über die Kopfdeklaration in der Stylesheetdatei gehandelt, welcher Namespace schliesslich in die Ausgabe geschrieben wird, hängt vom aktuell verarbeiteten Kontextknoten ab:</element><element id="93df2752-2e39-44f2-8306-bc4014ec566ad6e49" type="para">Elemente, die man erzeugt, erhalten automatisch den Default-Namespace, wenn man nicht explizit einen Namespace angibt.</element><element id="dd1681a1-b730-4864-9fc6-3b85c7d428c2d6e52" type="para">Elemente, die man kopiert, transportieren den Namespace, den sie in der Eingabe hatten, wenn man dies nicht explizit verhindert.</element><element id="b7e9f54a-5c0b-48de-abf2-80f917c915acd6e54" type="para">Um diese beiden Default Einstellungen zu steuern (bzw. zu überschreiben) gibt es mehrere Möglichkeiten:</element><element id="fb376aa9-5867-454f-a5c7-8e462c69e4b6d7e58" type="code">&lt;xsl:element name=\"{local-name()}\"namespace=\"{namespace-uri()}\"&gt;</element><element id="e38c1750-4914-402d-a6c8-1189f6f96106d6e59" type="para">Hier wird ein Element mit dem un-geprefixten Namespace des Kontextknotens deklariert. Wenn der Kontextknoten keinen anderen Namespace hat, so wird hierdurch sichergestellt, dass der Default-Namespace auch tatsächlich in die Ausgabe kommt.</element><element id="0fa6afe8-28d4-4832-ac45-0c43ed2e90f7d7e62" type="code">&lt;xsl:element name=\"meinelement\"namespace=\"mein-namespace\"&gt;</element><element id="ff135156-7c5f-461a-aa39-03acbbfc2164d6e63" type="para">Hier wird ein Element mit eigener Namespace Angabe in die Ausgabe geschrieben. Einfacher geschrieben:</element><element id="82abfd77-ae4c-4f21-8b5c-03e26b2efc98d7e66" type="code">&lt;mein-element xmlns=\"mein-namespace\"&gt;</element><element id="5803933b-c6bf-431b-9f72-f8649ce4f19fd6e71" type="para">Es gibt auch ein Attribut am xsl:copy Element, das den Vorgang des Namespace-Kopierens steuern kann:</element><element id="34d911c0-7ce6-4863-85fc-938d5c627676d7e70" type="code">&lt;xsl:template match=\"p\"&gt; &lt;xsl:copy copy-namespaces=\"no\"&gt; &lt;xsl:apply-templates\/&gt; &lt;\/xsl:copy&gt; &lt;\/xsl:template&gt;</element><element id="1f87506c-b5f5-4f11-9ff3-4932938dea95d6e67" type="para">Hier wird der Namespace amElement nicht in die Ausgabe geschrieben. Ggf. funktioniert diese Funktion aber mit unerwarteten Ergebnissen, deshalb sollte man sich ohne genauen Test nicht darauf verlassen.</element><element id="526b542d-9aaa-4181-bb81-9990f3f9940bd6e69" type="para">Ebenso kann eine Default-Kopierregel verwendet werden, die es verbietet einen Namespace weiterzuvererben:</element><element id="1f5864cb-261c-403f-b95e-e084215fae59d7e76" type="code">&lt;xsl:template match=\"@* | node()\"&gt; &lt;xsl:copy inherit-namespaces=\"no\"&gt; &lt;xsl:apply-templates select=\"@* | node()\"\/&gt; &lt;\/xsl:copy&gt; &lt;\/xsl:template&gt;</element><element id="ad139a27-9649-4c97-8f05-a62edd570cb7d6e74" type="para">Namespaces in XQuery</element><element id="6a862358-2454-4cb0-a7c5-854c9d4cf899d6e75" type="para">Während XSLT dazu dienen sollte, XML Daten in andere (XML-) Formate zu transformieren, dient XQuery z.B. dazu auf einerNoSQLDatenbank Daten aus unterschiedlichen Quellen zu selektieren, zu harmonisieren und an verarbeitende Prozesse weiterzugeben.</element><element id="56fd4141-0088-4fdb-bf10-930e2d5d028ed6e77" type="para">Deshalb ist es für mich nicht so erstaunlich, dass das Namespace Konzept in XQuery irgendwie besser funktioniert.</element><element id="baa93854-b02c-41f2-a553-bb6701a8925ed6e79" type="para">Damit man überhaupt Daten auf einem mit Namespaces versehenen XML Dokument selektieren kann, müssen alle Namspaces am Anfang des XQuery Ausdrucks angegeben werden, das sieht so aus:</element><element id="18168b3a-4285-43ff-8015-4b051b9a5db9d7e91" type="code">xquery version\"1.0-ml\"; import module namespace tektur =\"http:\/\/www.teturcms.de\/xquery\/common\"at\"common.xqy\"; import module namespace mem =\"http:\/\/xqdev.com\/in-mem-update\"at '\/MarkLogic\/appservices\/utils\/in-mem-update.xqy'; declare namespace local =\"https:\/\/lambdawerk.com\/code\/alex-sandbox\/1.0\"; declare namespace weiredns =\"https:\/\/weired-ns-in-input-data.com\/weired\/ns\"; declare namespace xs =\"http:\/\/www.w3.org\/2001\/XMLSchema\";</element><element id="d6bb0949-b9fa-4770-ba36-3acf2056e934d6e83" type="para">Hier werden zuerst Funktionen aus anderen Modulen eingebunden, nämlich die in einer Dateider eigenen Entwicklung, sowie die Bibliothekaus derMarkLogicUmgebung. Danach wird ein Namespacedeklariert, den man verwenden wird, wenn im weiteren Verlauf eigene XQuery Funktionen verwendet werden sollen, sowie der Namespace, der in den Eingabedaten vorhanden ist. Der Namespaceist analog zum XSLT Beispiel gesetzt.</element></elements>