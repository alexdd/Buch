<?xml version="1.0" encoding="UTF-8"?><topic id="309017d9-9fd7-4a34-b13a-4bf8ecea4556"><title id="743f34bc-c83e-49d3-9a2e-2c38d1c384c9">Namespaces</title><body id="2e9a9f57-c540-4349-b553-b3ff06af8175"><p id="6f3e2556-a8a9-4c91-bf51-cc4b05ba29c9">Wenn man XML Instanzen aus unterschiedlichen Quellen mit XSLT verarbeiten will, wird man sich wohl
oder übel mit dem Thema Namespaces[[xe1:XML Konstrukte;xe2: Namespaces]] (NS) auseinander setzen müssen, um Konflikte in den 
Elementselektoren zu vermeiden.</p><p id="408f70f7-e541-4c17-bc75-16db61b71e87d6e6">Gerade bei hintereinandergeschalteten Transformationen kann es auch passieren, 
dass unerwartet ein Namespace in die Ausgabe generiert wird,
den der folgende Prozesschritt nicht versteht, weil er dort nicht deklariert wurde.</p><p id="7b6e758e-d962-425a-86cf-30fc852bda81d6e8">Es gibt meherere Möglichkeiten einen Namespace im Stylesheet zu deklarieren. Gehen wir davon aus,
dass in einem Transformationsschritt genau eine Quelle und max. eine Konfigurationsdatei verarbeitet 
wird, dann kann das Stylsheet-Element bspw. so aussehen:</p><pre id="dc3d0287-429f-45ce-9605-e3b385290adad6e10" xml:space="preserve">&lt;xsl:stylesheet version="2.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" 
  xmlns:tektur="https://namespace-eigener-xslt-funktionen"
  xmlns="http://namespace-in-der-xml-eingabe.com/"
  xpath-default-namespace="https://namespace-der-konfigdatei.com/"
  exclude-result-prefixes="#all"&gt;</pre><ul id="f50cf486-fec3-4aca-a510-4347a0fffe51d6e12"><li id="a71c0a9a-d856-483b-a102-bace566e0c04d6e13"><p id="3bc26fb9-3d57-4990-9cb6-bdeea4a490d5d6e14">Der <b id="9a07e583-5f81-4c4e-aa52-bb2beff4b80bd6e16" href="undefined">xsl</b> Namespace ist klar</p></li><li id="b2fa04fc-e0d0-4a22-868d-6de15f9536f0d6e19"><p id="9f37a0f6-0e32-4d52-a2df-26c8b92c584bd6e20">Der <b id="967eaa3e-516f-4649-a41d-9d21b12df84ed6e22">xs</b> Namespace ist notwendig, wenn man typisiert arbeiten will. Er erlaubt das Einbinden von Datentypen
nach der XML Schema Spezifikation[[fn:https://de.wikipedia.org/wiki/XML_Schema]] und somit die 
bessere Validierung des Stylesheets zur Compile-Zeit.</p></li><li id="40b70b85-31dd-4109-882f-aa19e8e2b1b8d6e25"><p id="effc0d73-d115-4f50-99c0-bd16960d52f6d6e26">Die Deklaration eines eigenen geprefixten Namespaces erlaubt das Einbinden von eigenen XSLT Funktionen, 
wie z.B. auch das Einbinden der FunctX Bibliothek[[fn:http://www.xsltfunctions.com/]]</p></li><li id="0a804e4e-1e9c-4033-b79e-78fddeb0f809d6e28"><p id="985f02e1-ff86-49cd-9f9c-d285261fb6bed6e29">Der Nicht-geprefixte Namespace ist der Default-Namespace und kann einen NS aus der Eingabe handeln</p></li><li id="77756675-79a9-49ee-a322-2fe357eb505ad6e31"><p id="6f7d075e-efb2-4407-adb3-6b0d46163a1ed6e32">Das Attribut <b id="4eb02d99-4049-43c5-a105-76f286898d2cd6e34">xpath-default-namespace</b> gibt einen weiteren NS an, der in XPATH Funktionen verwendet werden kann.
In diesem Feld würde ich den NS einer Konfigurations- oder separaten Datendatei angeben.</p></li></ul><p id="facda359-d33a-4d29-86cd-1c8ed0c0c37bd6e37">Mehr als einen NS in der Eingabe sollte man aus meiner Sicht bei der XML Verarbeitung nit XSLT vermeiden wenn es geht.
GGf. empfiehlt es sich, die Eingabe vor der Verabeitung zu normalisieren und Elemente ggf. umzubennen. Ansonsten kann man auch eigene Namespace-Prefixes deklarieren, wie z.B.:</p><pre id="95d3c592-6b3e-40fa-b7a0-635522c3b4bed6e39" xml:space="preserve">xmlns:ext="https://www.tekturcms.de/external-tools"</pre><p id="11bfa628-dd5a-46ee-9dfa-99ea9733ed73d6e41">und diese in XPATH Selektionen und Match-Regeln verwenden.</p><hazardstatement id="d4c6a587-757b-4b00-883c-9e5273834a12d6e39" type="danger" status="changed"><messagepanel id="df2fc230-264f-4234-941d-a624b2436eadd6e44"><typeofhazard id="6a0d517a-4a6c-48b2-b637-699ec79f42a7d6e41">Befinden sich in den Eingabedaten Namespaces, die man in den XSLT Stylesheets nicht handelt - der Namespace kann auch nur
an einem ganz bestimmten Element hängen - so kann es bei der Transformation - ohne Fehlermeldung - zu unerwarteten Ergebnissen kommen.</typeofhazard><howtoavoid id="4d47e81a-7a6a-4f2e-9621-45a6535edbb2d6e43">Deshalb sollte man die Daten im Vorfeld bzgl. Namespaces sehr genau analysieren.</howtoavoid></messagepanel></hazardstatement><p id="b714b258-69e2-40ef-9d70-582d27bbfc6cd6e45">Namespaces in der Eingabe werden also meistens über die Kopfdeklaration in der Stylesheetdatei gehandelt, welcher Namespace
schliesslich in die Ausgabe geschrieben wird, hängt vom aktuell verarbeiteten Kontextknoten ab:</p><ul id="4fd51183-cb5c-454e-88a2-af0392a44343d6e47"><li id="83a93052-ddd0-4ca8-a440-e11cae99f4e2d6e48"><p id="93df2752-2e39-44f2-8306-bc4014ec566ad6e49">Elemente, die man erzeugt, erhalten automatisch den Default-Namespace, wenn man nicht explizit einen NS angibt.</p></li><li id="35a0b8ce-4224-4958-8bb7-9e65ce516d68d6e51"><p id="dd1681a1-b730-4864-9fc6-3b85c7d428c2d6e52">Elemente, die man kopiert, transportieren den Namespace, den sie in der Eingabe hatten, wenn man dies nicht explizit verhindert.</p></li></ul><p id="b7e9f54a-5c0b-48de-abf2-80f917c915acd6e54">Um diese beiden Default Einstellungen zu steuern (bzw. zu überschreiben) gibt es mehrere Möglichkeiten:</p><pre id="0da1f2df-f9b5-48f5-ab03-d98008a0ef36d6e61" xml:space="preserve">&lt;xsl:element name="{local-name()}" namespace="{namespace-uri()}"&gt;</pre><p id="e38c1750-4914-402d-a6c8-1189f6f96106d6e59">Hier wird ein Element mit dem un-geprefixten Namespace des Kontextknotens deklariert.
Wenn der Kontextknoten keinen anderen Namespace hat, so wird hierdurch sichergestellt,
dass der Default Namespace auch tatsächlich in die Ausgabe kommt.</p><pre id="378134a1-51a7-4d40-9a4e-eed69be3a5d7d6e65" xml:space="preserve">&lt;xsl:element name="meinelement" namespace="mein-namespace"&gt;</pre><p id="ff135156-7c5f-461a-aa39-03acbbfc2164d6e63">Hier wird ein Element mit eigener Namespace Angabe in die Ausgabe geschrieben. Einfacher geschrieben:</p><pre id="a96794cd-2e06-4c15-9c38-8f77c261ea65d6e69" xml:space="preserve">&lt;mein-element xmlns="mein-namespace"&gt;</pre><p id="5803933b-c6bf-431b-9f72-f8649ce4f19fd6e71">Es gibt auch ein Attribut am xsl:copy Element,
das den Vorgang des Namespace-Kopierens steuern kann:</p><pre id="29fd4716-2506-43e7-81e1-2983b40870c9d6e73" xml:space="preserve">&lt;xsl:template match="p"&gt;
  &lt;xsl:copy copy-namespaces="no"&gt;
     &lt;xsl:apply-templates/&gt;
   &lt;/xsl:copy&gt;
&lt;/xsl:template&gt;</pre><p id="1f87506c-b5f5-4f11-9ff3-4932938dea95d6e67">Hier wird der Namespace am p Element nicht in die Ausgabe geschrieben. Ggf. funktiniert diese
Funktion aber mit unerwarteten Ergebnissen, deshalb sollte man sich ohne genauen Test nicht darauf verlassen.</p><p id="526b542d-9aaa-4181-bb81-9990f3f9940bd6e69">Ebenso kann eine Default-Kopierregel verwendet werden, die es verbietet einen Namespace
weiterzuvererben:</p><pre id="f753f0be-f027-4a88-936a-4935a21310b1d6e79" xml:space="preserve">&lt;xsl:template match="@* | node()"&gt;
   &lt;xsl:copy inherit-namespaces="no"&gt;
     &lt;xsl:apply-templates select="@* | node()"/&gt;
   &lt;/xsl:copy&gt;
&lt;/xsl:template&gt;</pre><section id="54258d5a-0bd5-40ab-be10-b0342011d78ad6e82"><title id="ad139a27-9649-4c97-8f05-a62edd570cb7d6e74">Namespaces in XQuery</title><p id="6a862358-2454-4cb0-a7c5-854c9d4cf899d6e75">Während XSLT dazu dienen sollte, XML Daten in andere (XML-) Formate zu transformieren, dient XQuery 
z.B. dazu auf einer NoSQL Datenbank Daten aus unterschiedlichen Quellen
zu selektieren, zu harmonisieren und an verarbeitende Prozesse weiterzugeben.</p><p id="56fd4141-0088-4fdb-bf10-930e2d5d028ed6e77">Deshalb ist es für mich nicht so erstaunlich, dass das Namespace Konzept in XQuery irgendwie besser
funktioniert.</p><p id="baa93854-b02c-41f2-a553-bb6701a8925ed6e79">Damit man überhaupt Daten auf einem mit Namespaces versehenen XML Dokument selektieren
kann, müssen alle Namspaces am Anfang des XQuery Ausdrucks angegeben werden, das sieht so aus:</p><pre id="ddf5ac52-e2b6-4d28-84d7-a8407bb532f5d6e91" xml:space="preserve">xquery version "1.0-ml";

import module namespace tektur = "http://www.teturcms.de/xquery/common" 
                                  at "common.xqy";
import module namespace mem = "http://xqdev.com/in-mem-update" 
                                  at '/MarkLogic/appservices/utils/in-mem-update.xqy';
declare namespace local = "https://lambdawerk.com/code/alex-sandbox/1.0";
declare namespace weiredns = "https://weired-ns-in-input-data.com/weired/ns";
declare namespace xs = "http://www.w3.org/2001/XMLSchema"; </pre><p id="d6bb0949-b9fa-4770-ba36-3acf2056e934d6e83">Hier werden zuerst Funktionen aus anderen Modulen eingebunden, nämlich die in einer Datei common.xqy
im selben Verzeichnis aus der eigenen Entwicklung, sowie die Bibliothek mem aus der MArklogic
Umgebung. Danach wird ein NS local deklariert, den man verwenden wird, wenn im weiteren Verlauf
eigene XQuery Funktionen verwendet werden sollen, sowie der NS weiredns, der in den Eingabedaten
vorhanden ist. Der NS xs ist analog zum XSLT Beispiel gesetzt.</p></section></body></topic>