<?xml version="1.0" encoding="utf-8"?>
<topic id="a619c6d9-57c8-4fde-a3c0-cf6002905cc1">
   <title id="28a8c9ba-33b0-41ff-8681-da976df43b85">Vortransformationen</title>
   <body id="1b59d85e-4d01-4227-8ecf-cbdc2b9e5cb8">
      <p id="8a421545-f7a1-49b2-8250-75b86ca592f8">Bei einer komplexen Transformation ist es ratsam und sogar manchmal unabdingbar die Konvertierung in einzelne Stufen aufzuteilen. Das hat folgende Vorteile:</p>
      <fig id="192fd57f-31c6-4c5b-aa30-d85c91ca01fdd7e6" expanse="spread" frame="all"
           scale="50"
           status="changed">
         <image href="images/Flicker-281_22.svg"/>
      </fig>
      <ul id="737c537d-59ca-4b31-993d-ff25f033dc0cd6e6">
         <li id="41798c1d-c1ce-460e-a35c-9dbb097c544dd6e7">
            <p id="1f775282-48f6-4e94-819e-d92684be1b88d6e8">Der Prozess ist transparenter, da die einzelnen Stufen leichter überschaubar sind.</p>
         </li>
         <li id="2e6bafcf-c36d-4b12-8cfb-5ec64ac2cbced6e10">
            <p id="f1e5f594-048a-4ce7-8a07-cd0c65f06729d6e11">Die Zwischenergebnisse können für Debug-Zwecke ausgewertet werde oder dienen als Eingabe für andere Prozesse.</p> |  |                                                    Rejected by , .       </li>
         <li id="e93c815a-a050-4d75-a366-bd14372a3445d6e13">
            <p id="bf659729-4486-4a3b-b983-cec9d5748383d6e14">Nicht-relevante oder invalide Teilbäume können aus der Eingabeinstanz gefiltert werden, um so die weitere Verarbeitung zu beschleunigen.</p>
         </li>
         <li id="584020a1-f0e0-4be0-8eba-62e85ba5abd4d6e16">
            <p id="d115f521-f45c-4ae4-85e8-6ee9264558aed6e17">Hilfskonstrukte können erzeugt werden. Diese erleichtern die weitere Verarbeitung.</p>
         </li>
      </ul>
      <p id="e76a9b14-f720-48ff-afad-95bbd80c53a7d6e19">Es gibt zwei Möglichkeiten, wie eine Vortransformation[[xe1:Verarbeitungsmethoden;xe2:Vortransformation]] eingebunden werden kann:</p>
      <ul id="7093a130-54f7-4542-a76e-43833d6eed73d6e21">
         <li id="5c0c2b3e-b947-47c1-aa0f-35e5bd621d03d6e22">
            <p id="2bcf1845-b267-46ac-b853-627fd0a0f3bfd6e23">In einem separaten File bzw. einer XML Instanz, die vom XSLT Prozessor vor der eigentlichen Transformation aufgerufen wird und einen Zwischenstand produziert. Dieser kann dann als Eingabe für den Haupttransformationsschritt dienen.</p>
         </li>
         <li id="c0c25021-a503-40b9-8b11-6bea28ec4908d6e25">
            <p id="8f673f1d-8c7a-4616-93f2-d808745421ffd6e26">Innerhalb des eigentlichen XSLT Stylesheets. Hier wird das Ergebnis der Vortransformation in einer Variablen erzeugt.</p>
         </li>
      </ul>
      <p id="e42f964a-137b-4b75-bfad-28dc54470a68d6e28">Den zweiten Punkt möchte ich anhand eines Beispiel XSLT Skripts vorführen. Betrachten wir folgende Input Daten:</p>
      <pre id="a8a81b61-908e-43d3-8d7c-e96db526f053d7e33" xml:space="preserve">&lt;education-system&gt;
  &lt;administrative-regions&gt;
    [...]
    &lt;dministrative-region id="31" name="Bavaria"&gt;
      &lt;shools&gt;
        &lt;school id="45"&gt;
          &lt;teachers&gt;
            &lt;teacher id="576"/&gt;
            &lt;teacher id="345"/&gt;
            &lt;teacher id="12"/&gt;
          &lt;/teachers&gt;
        &lt;/school&gt;
        &lt;school id="36"&gt;
          &lt;teachers&gt;
            &lt;teacher id="576"/&gt;
            &lt;teacher id="8"/&gt;
          &lt;/teachers&gt;
        &lt;/school&gt;
        [...]
      &lt;/shools&gt;
    &lt;/dministrative-region&gt;
    [...]
  &lt;/administrative-regions&gt;
&lt;/education-system&gt;</pre>
      <p id="8985af84-2126-4159-b493-540b65c41b58d6e32">Die erste Datei beinhaltet eine Zuordnung von Lehrern zu Schulen in verschiedenen Regierungsbezirken. Um die Daten zu den beiden referenzierten Objekten einzusehen, müssen zwei weitere Dateien konsultiert werden. Die Datei, welche die Lehrer auflistet:</p>
      <pre id="fbfafda4-efad-4a07-a828-9a5a03c1f5d0d7e37" xml:space="preserve">&lt;teachers&gt;
  [...]
  &lt;teacher id="576"&gt;
    &lt;first-name&gt;Alfons&lt;/first-name&gt;
    &lt;last-name&gt;Blimetsrieder&lt;/last-name&gt;
    &lt;subjects&gt;
      &lt;subject&gt;Biology&lt;/subject&gt;
      &lt;subject&gt;Math&lt;/subject&gt;
      &lt;subject&gt;Sport&lt;/subject&gt;
    &lt;/subjects&gt;
    &lt;suspended&gt;2017-12-31&lt;/suspended&gt;
    [...]
  &lt;/teacher&gt;
  [...]
&lt;/teachers&gt;</pre>
      <p id="c35caf7a-807f-48b2-8973-1e575a619ae8d6e36">Und die Datei, welche die Schulen auflistet:</p>
      <pre id="d9791c06-a50d-4857-bd5d-c7bdaaff7c2fd7e41" xml:space="preserve">&lt;schools&gt;
  [...]
  &lt;school id="45"&gt;
    &lt;name&gt;Gymnasium Bad Aibling&lt;/name&gt;
    &lt;type&gt;Oberschule&lt;/type&gt;
    [...]
  &lt;/school&gt;
  [...]
&lt;/schools&gt;</pre>
      <p id="c8ee6679-b15c-45f7-9fca-aa269b19e54dd6e40">Um diese Daten verarbeiten zu können ist es sinnvoll, die drei Dateien in einem ersten "Resolver" Schritt zusammenzuführen und ggf. irrelevante Strukturen zu entfernen. Lehrer aus obigem Beispiel können beispielsweise suspendiert worden sein. Das folgende Skript erledigt dies mittels einer zusätzlichen Transformation in eine Variable:</p>
      <pre id="b5cddcbf-be8c-4755-a0b8-87946e0a23edd7e46" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="2.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  exclude-result-prefixes="#all"&gt;
  
  &lt;xsl:output indent="yes" method="xml"/&gt;
  
  &lt;xsl:strip-space elements="*"/&gt;
  
  &lt;xsl:param name="file-1" required="yes"/&gt;
  &lt;xsl:param name="file-2" required="yes"/&gt;
  &lt;xsl:param name="file-3" required="yes"/&gt;
  
  &lt;xsl:variable name="files" select="(doc($file-1), doc($file-2), doc($file-3))"/&gt;
  &lt;xsl:variable name="bavaria-region-ids" select="(31, 58)"/&gt;
  
  &lt;xsl:key name="teachers" match="teacher" use="@id"/&gt;
  &lt;xsl:key name="schools" match="school" use="@id"/&gt;
  
  &lt;xsl:template name="main"&gt;
    &lt;xsl:variable name="resolve-result"&gt;
      &lt;xsl:apply-templates select="$files/administrative-regions" mode="resolve"/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:apply-templates select="$resolve-result/administrative-regions"/&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="administrative-region[not(@id = $bavaria-region-ids)]" 
                mode="resolve"/&gt;

  &lt;xsl:template match="school" mode="resolve"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:copy-of select="key('schools',@id, $files/schools[1]/root())/node()"/&gt;
      &lt;xsl:apply-templates select="node()|@*" mode="resolve"/&gt;      
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="teacher" mode="resolve"&gt;
    &lt;xsl:copy-of select="key('teachers',@id, $files/teachers[1]/root())/node()"/&gt;
  &lt;/xsl:template&gt;
    
  &lt;xsl:template match="teacher[suspended/xs:date(.) le current-date()]"/&gt;
  
  &lt;xsl:template match="node()|@*" mode="#all"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates mode="#current"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;
  
&lt;/xsl:stylesheet&gt;</pre>
      <p id="45fef16c-d685-4a23-9038-37e8b4ce1715d6e45">Im ersten Resolve-Schritt werden die Referenzen zu den Lehrer- und Schul-Objekten aufgelöst, d.h. die Attribute des Schul-Objekts werden in die Struktur aus der ersten Datei kopiert. </p>
      <p id="e7b46b28-d440-4f91-b415-c4116e924876d6e47">Die Liste der Lehrer an diesen Schul-Objekten bleibt erhalten und wird mit dem Inhalt aus der zweiten Datei bestückt. </p>
      <p id="aa88c1b0-cb8a-4647-8498-61e6d266fe18d6e47">Zusätzlich werden alle Regierungsbezirke entfernt, die nicht zu Bayern gehören - was die weitere Verarbeitung wesentlich beschleunigen wird. Lehrer die suspendiert worden sind fliegen ebenfalls raus ...</p>
      <section id="65a89c94-20f9-459b-8684-301f0428270dd7e54">
         <title id="ff04425d-99ce-418e-a3b8-2a190252dce1d7e53">In-Situ Vortransformation</title>
         <p id="3eae591f-9f14-414d-ade7-e337b14a8378d7e55">Als ich mir kürzlich meinen Code vor über zehn Jahren zu Gemüte führte, fiel mir ein augenscheinlich sehr seltsames Stück XSLT auf, sinngemäss:</p>
         <pre id="5a07b6e9-9a34-43cb-99b1-3b4ccc220f52d7e59" xml:space="preserve">Datei: common/semantic-tables.xsl

&lt;xsl:template name="maintenance-table"&gt;
    &lt;cals-table-structure&gt;
        [...]
            &lt;&lt;xsl:apply-templates select="maint-int"/&gt;
        [...]
    &lt;/cals-table-structure&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="maintenance-table"&gt;
    &lt;xsl:variable name="maintenance-table"&gt;
        &lt;xsl:call-template name="maintenance-table"/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:apply-templates select="$maintenance-table"/&gt;
&lt;/xsl:template&gt;</pre>
         <p id="e7c3d5a5-07a9-435d-b24d-2502151c7287d7e59">Was hat mich denn da geritten? Nach einer kurzen Zeit des in mich Gehens, bin ich dann 
schon darauf gekommen. Der Clou ist hier eine Vortransformation innerhalb einer
Match-Regel.</p>
         <p id="d7b34699-b12b-4df9-bf3b-80a85a2f00a7d7e61">Die Transformation innerhalb der Variablen rendert die semantischen Elemente der 
Wartungstablle, wie z.B. das Wartungsintervall [[code:maint-int]], in eine CALS-Tabelle.</p>
         <p id="ca9ff208-bcbc-4e30-af38-b500521e08d8d7e63">Diese wird dann im nächsten Transformationsschritt entweder nach XSL-FO oder nach HTML
transformiert, je nachdem welche Haupt-Datei [[code:main.xsl]] das Modul [[code:semantic-tables.xsl]]
importiert.</p>
         <pre id="7c6dc389-f9be-45a1-8f7f-a4f9bcc4b984d7e67" xml:space="preserve">Datei html/main.xsl

&lt;xsl:import href="common/semantic-tables.xsl"/&gt;

&lt;xsl:template match="cals-table-structure"&gt;
    &lt;html-tabllen-struktur&gt;
        [...]
    &lt;/html-tabllen-struktur&gt;
&lt;/xsl:template&gt;

Datei pdf/main.xsl

&lt;xsl:import href="common/semantic-tables.xsl"/&gt;

&lt;xsl:template match="cals-table-structure"&gt;
    &lt;pdf-tabllen-struktur&gt;
        [...]
    &lt;/pdf-tabllen-struktur&gt;
&lt;/xsl:template&gt;</pre>
         <p id="7d49c706-918e-4d5d-9470-0e731c7d837ad7e67">Dieser Ansatz ist sehr flexibel, denn im herausfaktorisierten Tabellenalgorithmus können leicht Sonderfälle,
wie Duplikat-Eliminierung oder spezielle Merge-Operation, abgefangen werden. Zudem können sowohl das Named-Template
bzgl. der Wartungstabelle als auch die Match-Regel im importierenden Stylesheet überschrieben werden, was der Kreativität
keine Grenzen setzt.</p>
      </section>
      <section id="af2f9acd-69e6-483f-ab23-2d035fdf2992d7e71">
         <title id="79c1ceed-415e-450e-9bae-76b5ddf3fe24d7e70">Mehrstufige Transformationen</title>
         <p id="523b5ee3-3e1f-4fcf-92a8-77f377063006d7e72">Bei manchen Kovertierungen reichen ein oder zwei hintereinander geschaltete Transformationsschritte nicht aus. </p>
         <p id="230048f2-3feb-4b0f-9ce6-fd6b8c3856e6d7e74">Vielleicht hat man es mit einer Struktur zu tun, die gar nicht zum Zielformat passt... Sei es, weil auf ein sehr restriktives Inhaltsmodel transformiert wird, sei es weil <xref href="" id="791161f0-8ed1-4217-9151-4a38fecc1fad" type="">das Inhaltsmodell</xref>  erst schrittweise erschlossen wird, da der Überblick über die Daten noch fehlt. </p>
         <p id="8b4ccbe4-af94-44e1-a8b2-a62ab7fea4ffd7e79">In jedem Fall muss für manche Elemente in einem späteren Schritt entschieden werden, wohin sie umsortiert werden sollten, weil sie jetzt gerade stören.</p>
         <p id="e9804e09-c03c-400f-b8f8-a18557e67c7cd7e76">
            <b id="5db4c681-e1c8-4ace-8fd4-e5c7aab2045ed7e77">Beispiele:</b>
         </p>
         <ol id="c48fec98-d66a-4663-9bfd-5c2a5d2aab30d7e79">
            <li id="7836cdb9-ad1c-42ae-9bb4-84963fdf8efbd7e80">
               <p id="266e9636-dcbc-4294-996c-b0060bb39fced7e81">Transformationen auf ein restriktiveres Inhaltsmodell[[xe1:Inhaltsmodell;xe2:Restriktives Inhaltsmodell]]</p>
               <ul id="a5375efc-5165-4942-9afb-1a5b3f34c61bd7e83">
                  <li id="978fba8d-8f81-4072-b37d-2646098b7dc0d7e84">
                     <p id="a12eaa52-e13f-4702-98fc-bd7339d31588d7e85">Das XHTML eines Webeditors, bei dem der User willkürlich die unterschiedlichsten Strukturen eingeben kann, wird auf die restrikte DTD eines XML Redaktionssystems gemappt.</p>
                  </li>
               </ul>
            </li>
            <li id="6d7a9a2c-a891-43e2-ac1d-2f153dd2f122d7e87">
               <p id="57ae7190-0bd4-454c-a836-0322812c1ea7d7e88">Ein restriktives, strukturiertes Inhaltsmodell[[xe1:Inhaltsmodell;xe2:Strukturiertes Inhaltsmodell]] soll in ein freieres, strukturiertes Inhaltsmodell konvertiert werden:</p>
               <ul id="c61e25e5-58f7-4a0e-9bac-c3949a285c69d7e90">
                  <li id="4ebe5b46-29d8-43cb-b9bf-0c50936668d3d7e91">
                     <p id="76a9d54c-a541-4697-afd1-741d7c7c1cd9d7e92">Diese Form der Transformation findet man oft bei den Ausgabestrecken eines XML Redaktionssystems. Hier kommt man gut mit 2-3 Transformationsschritten aus. Diese werden dazu verwendet, um die Konvertierung zu erleichtern, und nicht aus "Platzgründen" wie in Punkt 1.)</p>
                  </li>
               </ul>
            </li>
            <li id="cf3d171b-2085-4984-b758-d2ea0b3402a5d7e94">
               <p id="c0d5824c-0878-4712-8526-178f9d67b4c6d7e95">Transformationen von relativ unstrukturierten Daten. Hier muss man die Strukturen erst bilden. Das kann durch Einsammeln gleichartiger Elemente passieren, die dann hierarchisch in einer Baumstruktur geordnet werden.</p>
               <ul id="176ec892-2b61-4788-b544-957a54f404f5d7e97">
                  <li id="ac13efb9-b787-4b1a-9560-6aa9e73af1d9d7e98">
                     <p id="f6acebd4-a8de-4da0-bc81-92294ff383f5d7e99">Baumstrukturen kann man z.B. auch aus Dateipfaden generieren, die dann mittels anderer Datenquellen noch angereichert werden, bspw. CSV-Dateien.</p>
                  </li>
               </ul>
            </li>
         </ol>
         <p id="8e83f4cf-4b41-4713-b780-1ffd111c68fad7e106">Mehrstufige Transformationen werden in <xref href="9a77a304-db82-437f-95d3-02656d93692f"
                  id="cdc36f6a-a2c2-4c16-bf5c-8ad4cc028c59"
                  type="topic">Migrationen</xref> eingesetzt. </p>
      </section>
   </body>
</topic>