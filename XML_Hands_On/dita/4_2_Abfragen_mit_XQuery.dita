<?xml version="1.0" encoding="utf-8"?>
<topic id="ae325776-f861-42c4-9a68-95d2d1c756a5">
   <title id="0e661463-0259-4d9f-a784-93f4f169bc52">Abfragen mit XQuery</title>
   <body id="09f76c76-f17f-41fd-a303-1d0812cb6e21">
      <p id="c2687f09-7480-4b8a-aa85-97d3e6821592">Xquery[[xe1:Programmiersprachen;xe2:XQuery]] führt im Publishing-Bereich ein Schattendasein. In meiner Zeit als XSL Programmierer für zwei Publishing  Firmen hatte ich damit nie zu tun. Erst als ich näher an den eigentlichen Daten war und mit <xref href="3337f433-44bf-430d-a809-73fd1de5ba6c"
               id="4450798c-33b5-4033-91b2-a54d3040abad"
               type="none">XML Datenbanken</xref> zu tun hatte, kam ich mit XQuery in Berührung.</p>
      <p id="68844713-b2c6-475e-8649-74c9094a4533d6e6">Während relationale Datenbanken mit SQL abgefragt werden, verwendet man bei XML Datenbanken, wie [[link]]eXist[[fn:http://exist-db.org/exist/apps/homepage/index.html*Hompage der eXist XML Datenbank]] oder [[link]]Marklogic[[fn:https://de.marklogic.com/*Hompage der NoSQL/XML Datenbank MarkLogic]], XQuery als Abfragesprache.</p>
      <p id="beb7e5e2-4c9d-4fc8-b536-7f06da326062d6e8">Aber auch einzelne XML Dokumente können z.B. in Oxygen XML Editor[[xe1:Tools;xe2:oXygen XML Editor]] mit dem [[link]]XQuery Builder Tool[[fn:https://www.oxygenxml.com/xml_editor/xquery_builder.html*Tool zur einfachen Eingabe von XQuery Test-Skripten im oXygen XML Editor]] oder auch per Saxon Kommandozeile abgefragt werden:</p>
      <pre id="8cadf96e-b28d-4fac-98e3-291e4d05b9e0d7e13" xml:space="preserve">java -cp usr/lib/saxon/saxon.jar net.sf.saxon.Query 
     -s:"schulen.xml" 
     -qs:"/schulen/schule[id='6']" 
     -o:"/Users/Alex/Desktop/schule_6.xml"</pre>
      <p id="82bd2bc8-d52c-4012-85f5-f167da7f8dc4d6e12">Mit der Option [[code:-qs]] kann hier der Querystring angebenen werden. </p>
      <p id="a1ae2cee-3b1d-4919-8531-d42c03a501f2d6e17">Wie man an dem einfachen Beispiel schon sieht, ist XQuery mit XPath verwandt. XQuery umfasst den Sprachumfang von XPath bietet aber zusätzlich die [[link]]FLOWR[[https://en.wikipedia.org/wiki/FLWOR*FLOWR steht für FOR LET WHERE ORDERBY RETURN]] Syntax um mächtigere Abfragen stellen zu können. Mittels weiterer [[link]]Extensions[[fn:http://cs.au.dk/~amoeller/XML/querying/flwrexp.html*XQuery Extensions für mächtigere Funktionen]] können aber auch ganze Programme erstellt werden, die weit über die Funktionalität einer "Abfragesprache" hinausgehen.</p>
      <section id="af78f61d-9f63-470a-b55c-a8b766737525d7e19">
         <title id="c7e8acb5-6c21-4de1-a88d-8bbd376bbbb4d6e20">XQuery Builder</title>
         <p id="10cad5f2-85f8-44a2-820b-25080e044176d6e22">[[link]]Oxygen XML Editor[[fn:https://www.oxygenxml.com/xml_editor*Homepage zum oXygen XML Editor]] bietet eine schöne Möglichkeit XQuery-Abfragen 
auf einem geladenen XML Dokument auszuführen. Dazu kann man 
seine Query in das betreffende Eingabefenster schreiben.</p>
         <fig id="13e13673-84eb-40db-b9fb-220e25aca173d7e24">
            <title id="4952e62b-ea78-4a7b-a1e0-134cc5a24144d7e25">oXgen XQuery Builder</title>
            <desc id="b7a98153-2944-4ca0-abe7-61ac4ad1706bd7e27">Mit dem XQuery Builder von oXygen lassen sich unkompliziert Queries testen</desc>
            <image href="images/xquery-builder-1_14.png"/>
         </fig>
         <p id="f9cd5153-7930-46ee-9bfd-33e14ec55f03d6e28">Mit folgendem Ergebnis:</p>
         <pre id="63b384ff-dc7d-471a-980f-4f85bd50f235d7e32" xml:space="preserve">&lt;dates&gt;
  &lt;today&gt;2019-01-16+01:00&lt;/today&gt;
  &lt;formatted&gt;Wednesday, 16th January 2019&lt;/formatted&gt;
&lt;/dates&gt;</pre>
      </section>
      <section id="1d4958f4-4c3e-418d-a907-201c2fcb3bebd7e34">
         <title id="59f98501-17c8-47d7-a314-8f89c6b7299ed6e33">FLOWR Expression</title>
         <p id="d9c7b63e-5eb8-4c1a-8efb-88af290b55bfd6e34">FLOWR[[xe1:FLOWR Expression]] steht für [[code:for, let, where, order by, return]]. Das sind die Query-Anweisungen, die in 
dem Ausdruck erlaubt sind - in genau dieser Reihenfolge.</p>
         <pre id="576401de-fa09-4b81-805a-08fea2f106ead7e39" xml:space="preserve">let $bibliothek := .
for $x in $bibliothek//buecher,
    $y in $bibliothek//autoren/autor
where starts-with($autor, 'Grass')
    and $x/@autorId = $y/@id
return $x/titel</pre>
         <p id="c8a0cb85-703f-405f-b645-b24ac1e81133d6e38">In dieser Query werden die Titel aller Bücher von Grass zurückgeliefert.
Bemerkenswert ist hier die Syntax.</p>
         <note id="bd6cf03a-1ec9-43d7-8db6-fd5cff1b78a7d7e43">
            <p id="9107c2a6-03d3-41db-b842-771ef054948fd6e41">Normalerweise würde man zwischen den
einzelnen Anweisungen einen Blockabschluss, wie ein Semikolon erwarten.
Da wir aber hier funtional prorgammieren, ist die Sache etwas anders...</p>
         </note>
      </section>
      <section id="269e9d10-dbc1-48a2-bba1-ac38866954f2d7e46">
         <title id="7dbf0fb3-8421-43c4-b792-0eba61c4bf27d6e44">XML per XQuery</title>
         <p id="9ab1e252-cb55-4821-9893-74ec6ef84344d6e45">Es ist aber auch möglich XML zu erzeugen, wobei natürlich für eine Transformation XSLT 
vorzuziehen ist. Dazu werden Tags direkt in die Expression geschrieben, wie z.B. hier:</p>
         <pre id="c091a37f-7ea3-4d85-a9b7-eb484edec3ead7e51" xml:space="preserve">declare variable $nachname as xs:string external;
&lt;buecher autor="{$nachname}"&gt;
{
  let $bibliothek := .
  for $x in $bibliothek/buecher//buch,
      $y in $bibliothek/autoren//autor
  where starts-with($y, $nachname)
      and $x/@autorId = $y/@id
  order by $x/ausgabe
  return
  &lt;buch ausgabe="{$x/ausgabe}"&gt;
    {$x/titel}
  &lt;/buch&gt;
}
&lt;/buecher&gt;</pre>
         <p id="998102ca-7388-47ce-bb9d-0c6676f3788dd6e49">Speichert man dieses Schnippsel in einer Datei [[code:buecher.xquery]] ab,
so kann man mit der folgenden Kommandozeile auf einer [[code:buecher.xml]] Datei als Eingabe suchen:</p>
         <pre id="4e8429d0-0187-496a-8a57-058e088f920fd7e55" xml:space="preserve">java -cp usr/lib/saxon/saxon.jar net.sf.saxon.Query -t -s:buecher.xml 
                                                       -q:buecher.xquery 
                                                       -o:ergebnis.xml 
                                                       nachname=grass</pre>
      </section>
      <section id="3deea6c9-15ae-4d9b-b649-53559644a26fd7e57">
         <title id="72199b87-ef45-4bac-93aa-a03892a63e12d6e54">Document Projection</title>
         <p id="4b856b14-5e37-4b3f-97aa-35d140f8c43bd6e55">[[link]]Document Projection[[fn:http://www.saxonica.com/documentation/#!sourcedocs/projection*Verstecktes Saxon Feature: Dokument Projektion bei einer XQuery Abfrage]][[xe1:Tipps und Tricks;xe2:Document Projection]]  ist ein verstecktes Saxon XQuery Feature. Es funktioniert nur für eine einzige Abfrage.
Das kann schon recht hilfreich sein, wenn man ein mehrere 100MB großes Dokument durchsuchen
will.</p>
         <p id="ac58c0ea-28fd-4c0f-9ecc-722bb1233a6ad6e57">Ohne Projection würde das Beispiel von oben so verarbeitet:</p>
         <pre id="c80c730d-69c5-4b9a-a14e-9ba2dd98c7dbd7e64" xml:space="preserve">java -cp usr/lib/saxon/saxon.jar net.sf.saxon.Query -t 
     -s:buecher.xml 
     -q:buecher.xquery 
     -o:ergebnis.xml 
     -projection:off 
     nachname=grass
Saxon-EE 9.7.0.20J from Saxonica
Java version 1.8.0_60
Using license serial number V005095
Analyzing query from Desktop/buecher.xquery
Generating byte code...
Analysis time: 201.10095 milliseconds
Processing file:/Users/Alex/buecher.xml
Using parser com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser
Building tree for file:/Users/Alex/buecher.xml 
using class net.sf.saxon.tree.tiny.TinyBuilder
Tree built in 3.482278ms
Tree size: 46 nodes, 58 characters, 6 attributes
Execution time: 27.137589ms
Memory used: 67031664</pre>
         <p id="f182025a-4c60-479e-a19f-5927645b8a2ed6e61">Mit der Option [[code:-projection:on]] verändert sich die Ausführungszeit signifikant:</p>
         <pre id="ca25f211-a446-4a0c-a67a-b042ec15b721d7e68" xml:space="preserve">[...]

Document projection for file:/Users/Alex/buecher.xml
-- Input nodes 50; output nodes 27; reduction = 46%
Tree built in 3.80615ms
Tree size: 26 nodes, 58 characters, 3 attributes
Execution time: 15.83463ms
Memory used: 64339064</pre>
      </section>
   </body>
</topic>