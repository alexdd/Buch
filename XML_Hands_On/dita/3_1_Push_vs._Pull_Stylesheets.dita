<?xml version="1.0" encoding="utf-8"?>
<topic id="17f5bbad-c12b-4da2-a847-29aba6fa0b48">
   <title id="c16fd330-a145-443c-bf0a-2ca245527453">Push vs. Pull Stylesheets</title>
   <body id="ffeddc65-c468-48a2-bfd0-b3864c5f06cf">
      <p id="e2adb8e3-a080-41a2-a76f-c4a29dacd4d2">XSLT ist eine ereignisgesteuerte,[[xe1:Konzepte;xe2:Push vs. Pull]] regelbasierte Umgebung zur Konvertierung von XML Daten. Gerade der Vorteil des regelbasierten Ansatzes ist vielen Entwicklern nicht bewusst, und es entsteht Quellcode der aussieht, wie mit XPath angereicherter <b id="5a73706b-7dda-4078-9cdd-cb03caf38e9dd7e14">PHP</b> Code.</p>
      <p id="75d35ff2-13b7-4c17-9aef-8c028ca9a0a7d6e6">Wieso nimmt man dann überhaupt XSLT, wenn man keine Template-Match Regeln verwendet, oder nur spärlich verwendet?</p>
      <p id="adf97e75-c632-445e-aa9f-914096737fdcd6e8">Um diesen Umstand aufzuklären ist ein bisschen Theorie notwendig:</p>
      <fig id="0d502088-17cc-4df6-910c-2f7039fdf1c0d6e10">
         <title id="2d3b5230-2654-4a24-9091-f58b930a614ed7e14">Pull Stylesheet</title>
         <desc id="cece82c7-a960-4649-a489-e8669d4be460d7e16">Beim "Pull" werden Elemente in der Quellinstanz selektiert und an einer passenden Stelle in der Zielinstanz eingefügt. Diese Vorgehensweise ist vergleichbar mit derer von Template-Engines, wie <b id="0a86d34e-281d-4bb3-a363-34738d6db0a4d7e29">JSP</b> oder <b id="b291c3a3-16dc-483d-a959-745e574325bcd7e32">ASP</b>. Das kann in mehreren Stufen erfolgen, bis schrittweise die Quellinstanz in die finale Zielinstanz überführt wurde.</desc>
         <image href="images/pull_9.svg"/>
      </fig>
      <fig id="2c947622-9c37-4214-aa99-4e2fbcb0e4b0d7e25">
         <title id="f27ef8ac-07fe-4bae-a9c1-3d636d16b40ed7e26">Push Stylesheet</title>
         <desc id="b08f6a04-4bb1-425a-8ecf-aa06ddd5a6d3d7e28">Beim "Push" werden die Quelldaten schrittweise in die Zieldaten konvertiert. Diese Vorgehensweise kann explorativ erfolgen und beim Transformieren in einen Zwischenschritt entstehen Erkenntnisse, die bei der Weiterverarbeitung nützlich sind. Merke:XSLT steht für eXtensible Stylesheet Transformation.</desc>
         <image href="images/pusch-x_14.svg"/>
      </fig>
      <p id="43976824-218f-4b76-9c34-24b9e47ccbfcd6e22">Das bisher Gesagte verdeutlicht zwar den "Pull" Ansatz, was genau aber ge"pusht" wird, ist vermutlich noch unklar. Betrachten wir XML in der Baumdarstellung.</p>
      <fig id="e4c503ef-8c78-4549-bba4-39ea85229ebdd7e33">
         <title id="b8ce3755-2197-4095-9a58-574754dff4d6d7e34">Transformation des Quellbaus in den Zielbaum</title>
         <desc id="2ff7debf-f175-41fd-97bf-f2fc459b090fd7e36">Der XSLT Prozessor unternimmt einen Tiefensuchlauf[[xe1:Tiefensuchlauf]] und überprüft bei jedem Knoten den er betritt, ob in seiner Regelbasis eine Regel existiert, die auf diesen Knoten "matched". Dabei gibt es drei grundsätzliche Möglichkeiten, wie die Knoten des Quellbaums in den Zielbaum kopiert - oder eben nicht kopiert - werden können.</desc>
         <image href="images/pushi-x_15.svg"/>
      </fig>
      <p id="299d3e98-3089-4974-a46a-bf457340a701d6e52">Pull-Stylesheets werden gewöhlich mit [[code:xsl:for-each]] Loops programmiert. Dieser Ansatz ist meiner Ansicht nach gebräuchlich, wenn keine großen <b id="ceb946a0-86da-4f10-8883-8c06674fe26dd7e91">DTD</b> Änderungen zu erwarten sind, der XML Baum flach strukturiert ist und die Anforderungen an die  Konvertierung relativ einfach sind, bspw. beim Auswerten / Konvertieren von Konfigurationsdateien. In allen anderen Fällen sind Push-Stylesheets vorzuziehen, d.h. möglichst wenig [[code:xsl:for-each]] loops und möglichst viele Template-Match Regeln.</p>
   </body>
</topic>