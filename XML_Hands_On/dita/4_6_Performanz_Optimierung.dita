<?xml version="1.0" encoding="utf-8"?>
<topic id="12e4c2b3-d41d-40ca-978d-37a86f74c206">
   <title id="62686301-205e-425d-8a64-f523369bbd51">Performanz-Optimierung</title>
   <body id="8f6aa410-ce13-41e3-a8e8-105950625a14">
      <p id="3b37b0b2-4eb5-41b4-ae7b-66e6f6c72f56">[[xe1:Performanzsteigerung]]Bei der Verarbeitung größerer Datenmengen, gibt es mehrere Optionen. Entweder
man verlässt sich auf die Performanzoptimierung, die im XSLT-  / XQuery-
Prozessor implementiert ist, bzw. benutzt Methoden, wie <xref href="1f8595d0-4ed9-4070-8cff-c5c59f690093"
               id="db06e2e4-c869-4431-b272-f23b997f231c"
               type="topic">XSLT Streaming </xref> -
oder man setzt eine Ebene darunter an und schaut zu, was Java so treibt.</p>
      <p id="6887c21e-8581-41a7-9eaa-ebb0a01fad26d7e6">Es ist natürlich auch möglich seine Algorithmen umzustricken, den Code zu
optimieren und das ganze (noch) kryptischer zu machen. Aber ganz nach dem
Motto <i id="08b4d305-5e4d-4085-9f1a-603e6cca7712d7e8">"Never Change a running system"</i> wird vielerorts zunächst einmal an
der Basis gefeilt.</p>
      <section id="e523c6aa-3d73-4e6c-9f9f-bbb456f6e814d7e14">
         <title id="f932af1a-eee9-4c94-a383-a96345819366d7e9">Heap Memory und Garbage Collector</title>
         <p id="422418ed-62e2-4612-a85a-758dc9369c55d7e11">[[xe1:Performanzsteigerung;xe2:Heap Memory und Garbage Collector]]Wenn ich mich recht an mein Informatikstudium erinnere, dann sammelt ein
Garbage Collector automatisch Speicherblöcke ein, die das Java Programm (Saxon) nicht
mehr braucht und übergibt diese an die Heap Memory Verwaltung. Ein Heap
ist meistens ein automatisch balanzierender Baum, der die freigewordenen 
Speicherblöcke  der Größe nach sortiert verwaltet.</p>
         <p id="873c54e8-4d7c-4f07-8cca-b66dc5a8992bd7e13">Da auch der Garbage Collector zur selben Zeit läuft, wie unser Java Programm,
können sich die beiden ins Gehege kommen. Hat man für das Java Programm
zuviel Heap-Space reserviert, dann lagert der Garbage Collector seine 
temporären Erzeugnisse auf einen langsamen Swap-Bereich aus. Hat man 
dagegen zuwenig reserviert, dann ist nicht genügend Platz für das Hauptprogramm vorhanden.</p>
         <p id="0bb3c6c1-17c5-4083-8a6f-0627740e1d85d7e15">Gebräuchliche Fehlermeldungen sind z.B.:</p>
         <ul id="3ca376c5-79ae-42ad-a943-2c47027ac3add7e17">
            <li id="f4a32921-3242-4707-8c2c-64902c8d02acd7e18">
               <p id="e210ccdf-b393-4630-99d2-30c48998f593d7e19">[[code:java.lang.OutOfMemoryError: Java heap space]]</p>
            </li>
            <li id="d6d14aa7-ca05-404f-a19b-34a686a898dcd7e21">
               <p id="0a84c593-f254-4450-aa7e-e9ead9f3bc78d7e22">[[code:java.lang.OutOfMemoryError: GC Overhead limit exceeded]]</p>
            </li>
         </ul>
         <p id="a80c7197-3395-4ab6-bc19-3566a0dd5729d7e24">Mehr dazu steht auf der [[link]]Oracle Webseite zum Thema[[fn:https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/memleaks002.html*Doku-Seite auf Oracle zum Thema Memory Fehlermeldungen]]</p>
         <p id="fcfd128b-6e7a-46c1-83cf-2c354598e3b6d7e26">Diese viel diskutierten Heap Einstellungen der Java Virtual Machine (JVM), wirken sich 
besonders bei Applikationen aus, bei denen der Speicherverbrauch zu einer bestimmten
Zeit nicht vorhersehbar ist, z.b. bei einem Java-Game mit Action- und auch mal Rollenspielelementen.</p>
         <p id="b876ae7d-2109-4299-8772-6a566d0e4602d7e28">Hier wäre ein Tuning bzgl. der JVM Heap Optionen angebracht, zumal man das Spiel auch für
Spieler optimieren will, die nicht auf die leistungsfähigste Hardware zugreifen können.</p>
         <p id="46652987-72a1-408b-bbdd-efbc59be3214d7e30">Gängige Optionen, die man beim Java-Aufruf mitgibt, sind bspw.</p>
         <ul id="d0191934-b02a-4e4a-88fa-1f9e7f52d26fd7e32">
            <li id="31945f38-2726-44a3-b0f5-27e577e029e2d7e33">
               <p id="eac3cd71-0fd9-4007-ab1d-c79c20be7eb9d7e34">[[code:Xms&lt;size&gt; set initial Java heap size]]</p>
            </li>
            <li id="b55e6130-c2b5-486a-8902-495ab9454598d7e36">
               <p id="69c77a0b-d2cc-4600-a146-5972fe42a2e2d7e37">[[code:Xmx&lt;size&gt; set maximum Java heap size]]</p>
            </li>
            <li id="852589f9-17bc-497f-b831-94f1d68024c2d7e39">
               <p id="c34626fd-41b3-4758-8cf7-1f047e7e2c37d7e40">[[code:Xss&lt;size&gt; set java thread stack size]]</p>
            </li>
         </ul>
         <p id="e66dfd59-7b89-48aa-ab1e-15c73909df20d7e42">Mehr dazu steht auf der [[link]]Oracle Webseite zum Thema[[fn:https://www.oracle.com/technetwork/java/gc-tuning-5-138395.html*Doku-Seite auf Oracle zum Thema Heap-Memory Einstellungen und Garbage Collector]]</p>
         <p id="1a1b39e5-2f80-444a-ab2f-60128937cc65d7e45">Für die batch-orientierten Prozesse bei der XML Verarbeitung sind diese Optionen meist nicht ausschlaggebend, 
da der Heap bei der Transformation eines grösseren Dokuments linear belastet wird. Hier ist es sogar so, dass man
das obere Limit für den Heap-Speicher mit der unteren Schranke gleichsetzen sollte, um der JVM die Auswahl des geeigneten Speicherbereichs
zur Laufzeit zu ersparen.</p>
         <p id="1fa3d39b-f71a-4363-8064-e243ebe541d3d7e47">Ich benutze für meine performanzlastigen Transformationen eine 10 GB Heap Schranke:</p>
         <p id="94cae31a-45b7-499e-a7e4-064a04df0416d7e49">[[code:-Xms10g -Xmx10g]]</p>
         <p id="97f3a6f0-3585-42c3-b032-71322e9bd8cbd7e51">Damit lassen sich auch sehr große XML Dateien mit einer Pipeline, wie [[link]]MorganaXProc[[fn:https://www.xml-project.com/morganaxproc/*Homepage zum MorganaXProc Projekt]][[xe1:Tools;xe2:MorganaXProc]],
die die Ergebnisdokumente der einzelnen Transformationsschritte im Speicher behalten, effizient verarbeiten.</p>
      </section>
   </body>
</topic>