<?xml version="1.0" encoding="utf-8"?>
<topic id="86c96e00-9a1f-4187-beba-e5d9bd3a938b">
   <title id="d97b76dd-7b2b-48e3-9b9e-53a4197d41f8">Vererbung </title>
   <body id="21ad1c11-47f6-4a53-ac2e-6094cbbd1be6">
      <p id="9f3c9490-6544-4061-9f73-b31a0655f3fc">Mit XSLT[[xe1:Konzepte;xe2:Vererbung]] kann man Konstrukte aus anderen Programmierparadigmen nachbilden, bspw. Vererbung. Dabei wird in einer Spezialisierung eine schon bereits getätigte Implementierung übernommen und erweitert oder eingeschränkt.</p>
      <p id="55d7fd52-cfb0-4630-a202-8a4997fdc6d5d6e6">Der Vorteil dabei ist, dass man nicht alles nochmal neu schreiben muss. Das verkleinert die Redundanz, führt zu einer besseren Wartbarkeit und einer geringeren Fehleranfälligkeit.</p>
      <section id="c5ae2d7d-ef71-487d-80a0-a6fd33f6abd7d7e8">
         <title id="3e8c9912-e49a-4cf3-8836-4c6d59415fcdd6e9">Beispiel: Parameterisierung</title>
         <p id="87a46d3c-3a53-49d8-81af-0b186522ab04d6e11">Gewöhnlich implementiert man ein Stylesheet für ein bestimmtes Ausgabeformat und eine Produktvariante. Schrittweise werden dann weitere Varianten und Formate hinzugefügt.</p>
         <p id="2c5936d8-c14a-48c6-8783-22cb447e158ad6e13">Am komfortabelsten hat man es natürlich, wenn zu Beginn der Implementierung eine vollständige Spezifikation vorliegt... Das ist aber natürlich eher selten der Fall.</p>
         <p id="e49285e4-0d9b-4cb5-88fa-3c0cce5f8ca7d6e13">Aus diesem Grund ist es wichtig, sich eine gute Strategie zu überlegen, damit die Architektur nicht in Spagetthi-Code auswartet.</p>
         <p id="fd634ecc-535d-4768-bc6f-eb4e29d0f513d6e17">Eine gute Option wäre, die XSLT Import Präzedenz auszunutzen, vgl. Kapitel <xref href="db988919-f71e-437e-b699-b6fdd2a32cb9"
                  id="04fea004-6513-4004-8650-eea2c9097b80"
                  type="topic">Eindeutigkeit der Regelbasis </xref>.</p>
         <p id="c22ab5e0-6336-4c9b-8dff-af1a3bfd84a9d6e22">Will man zu einem späteren Zeitpunkt weitere Parameter einzuführen, dann müsste ein Switch, wie der folgende, an mehreren Stellen im Code aktualisiert werden.</p>
         <pre id="4da9342c-7f66-41a0-984e-d09211bafd6cd7e24" xml:space="preserve">&lt;xsl:choose&gt;
    &lt;xsl:when test="$myParameter='this_option'"&gt;
        &lt;!-- do this --&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="$myParameter='that_option'"&gt;
        &lt;!-- do that --&gt;
    &lt;/xsl:when&gt;
        [...]
&lt;/xsl:choose&gt;</pre>
         <p id="62f5f7b0-1fe2-41c7-a495-77e19a1fd871d6e24">Besser ist es, wenn man ein Core-Stylesheet[[xe1:Parameterisierung;xe2:Core-Stylesheet]] pflegt, das für ein Format und eine Produktvariante[[xe1:Format- und Produktvarianten]] gut ausgetestet ist. Dieses Core-Stylesheet wird dann einfach für eine neue Variante importiert und relevante Teile werden für die neue "Spezialisierung"[[xe1:Konzepte;xe2:Generalisierung und Spezialisierung]] überschrieben. Beispielsweise könnte eine Regel zum Setzen des Headers auf jeder Seite so implementiert sein:</p>
         <pre id="dca7a8e6-92c5-47cf-9433-651020e8e724d7e28" xml:space="preserve">&lt;xsl:template name="render-header"&gt;
    &lt;!-- print logo on the left side spanning two rows--&gt;
    &lt;!-- print some metadata right side first row --&gt;
    &lt;!-- print a running header right side second row --&gt;
&lt;/xsl:template&gt;</pre>
         <p id="a25fd496-3d0f-40d0-899b-8eeb8efa4a05d6e28">Wird in einem neuen Format, bspw. A5, diese Logik ausgetauscht und nur eine Zeile gedruckt, z.B. weil man nicht so viel Platz hat, so würde in einem "abgeleiteten" Stylesheet einfach die Regel noch einmal implementiert.[[xe1:Parameterisierung;xe2:Sub-Stylesheet]]</p>
         <pre id="377d2887-e007-4949-ada9-353612a2ff5bd7e32" xml:space="preserve">&lt;xsl:choose&gt;
&lt;xsl:template name="render-header"&gt;
    &lt;!-- print a running header on left side --&gt;
    &lt;!-- print logo on right side --&gt;
&lt;/xsl:template&gt;</pre>
         <p id="93a58f22-f501-44d1-bcdd-2d15ff8634b1d6e32">Dieses Template hat nun Vorrang und wird zur Auswertung herangezogen, mit der Konsequenz, dass der Header nur einzeilig gedruckt wird. Das schöne an diesen "Named-Templates"[[xe1:Konzepte;xe2:Named Template]] ist auch, dass man sie innerhalb von Variablen verwenden kann:</p>
         <pre id="86602190-9e90-489f-8cf5-80381fa61f31d7e37" xml:space="preserve">&lt;xsl:variable name="margin-width"&gt;
    &lt;xsl:call-template name="get-margin-width"/&gt;
&lt;/xsl:variable&gt;</pre>
         <p id="dcdc2784-bb46-400d-975b-16cf6746a77cd6e37">Das Template [[code:get-margin-width]] kann in einem "Sub"-Stylesheet überschrieben werden, ohne dass die Variablen-Zugriffe im Core-Stylesheet angepasst werden müssen. Eine Zuweisung, wie:</p>
         <pre id="1d37f936-f3d8-4593-a550-8f9808689c5ad7e41" xml:space="preserve">width="{$margin-width}"</pre>
         <p id="699bae96-6c18-45c8-a517-4d20e0232f1cd6e43">müsste nirgendwo im Code nochmal angefasst werden, was natürlich sehr komfortabel ist.</p>
      </section>
      <section id="c70fd85e-6eb1-4c56-b91a-e695b38cb31ad7e45">
         <title id="bfacbcb6-a848-412a-a5dc-258570bcbba2d7e46">Beispiel: Spezialisierte Fallunterscheidung</title>
         <p id="9f1233bb-741d-4e1b-a500-a0cca9bafdf9d7e48">[[xe1:Konzepte;xe2:Spezialisierte Fallunterscheidung]]Kommt ein Ausgabeformat zu einem späteren Zeitpunkt hinzu, so kann man die Vererbung nutzen um clever zwischen den Ausgabeformaten zu unterscheiden. Ein bestehendes Template [[code:"cover"]]:</p>
         <pre id="c7d4d1a5-4818-4f3b-acb4-c7086849edf7d7e50" xml:space="preserve">&lt;xsl:template match="cover"&gt;
  &lt;fo:page-sequence master-reference="coverFront" force-page-count="auto"&gt;
    &lt;fo:flow flow-name="xsl-region-body"&gt;
    [...]
  &lt;fo:page-sequence master-reference="coverBack" force-page-count="auto"&gt;
    &lt;fo:flow flow-name="xsl-region-body"&gt;
    [...]</pre>
         <p id="8413a693-05e8-4a47-8608-fc71704580bdd7e52">kann aufgesplittet werden in ein Template für eine Vor- und Rückseite:</p>
         <pre id="0b29f416-2a17-45bd-93bc-819a9e6644aed7e54" xml:space="preserve">
&lt;xsl:template match="cover"&gt;
  &lt;fo:page-sequence master-reference="coverFront" force-page-count="auto"&gt;
    &lt;fo:flow flow-name="xsl-region-body"&gt;
      [...]
&lt;/xsl:template&gt;
    
&lt;xsl:template name="cover-back-switch"&gt;
  &lt;xsl:call-template name="cover-back"/&gt;
&lt;/xsl:template&gt;
    
&lt;xsl:template name="cover-back"&gt;
  &lt;fo:page-sequence master-reference="coverBack" force-page-count="auto"&gt;
    &lt;fo:flow flow-name="xsl-region-body"&gt;
      [...]</pre>
         <p id="c5d2db77-1f5d-49d2-b853-2bbc9101b0fed7e56">Das Template [[code:"cover-back-switch"]] kann dann in einem Ausgabeformat überschrieben werden, um bspw. die Cover-Rückseite abhängig von einer Bedingung zu schalten. </p>
         <p id="9ff884b5-2748-4232-a42c-e321b3423da1d7e58">[[xe1:Design Pattern]]Einen Algorithmus in einer Superklasse grob zu strukturieren und Details in Unterklassen zu verfeinern, ist ein gängiges Design Pattern in der Objektorientierten Programmierung. Diese Methodik kann auch sehr schön mittels Named-Templates in XSLT realisiert werden. Nicht umsonst heisst das OO Pattern dazu [[link]]Template Method[[fn:https://en.wikipedia.org/wiki/Template_method_pattern*Wikipediaseite zum Template Method Pattern]]</p>
      </section>
   </body>
</topic>