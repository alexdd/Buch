<?xml version="1.0" encoding="utf-8"?>
<topic id="dbe0e394-aeee-4b28-ace0-72dcd590c0f2">
   <title id="cb79aa28-6141-41b3-9bb7-5dc5f10cd81d">XSLT Streaming </title>
   <body id="b7962d84-8953-4193-989c-1feb118b0e8f">
      <p id="1b8326b9-86af-407d-b972-5b8d98339dec">Bei grossen, flach strukturierten Datenmengen gibt es zwei Möglichkeiten:</p>
      <ol id="55b454b3-3415-4755-9caa-141113ac3f5cd6e6">
         <li id="ca269a85-cba5-48ac-b9ca-dba867f63fddd6e7">
            <p id="b68b789a-b3c9-407f-ba6d-fa3f3e248cdcd6e8">Für einfache Sammel- und Auswertungsaufgaben schreibt man sich am besten einen kleinen Parser, z.B. mit der Python[[xe1:Programmiersprachen;xe2:Python]][[link]]sgmllib[[fn:https://docs.python.org/2/library/sgmllib.html*Einfacher SGML Parser der Python Standard Bibliothek]].</p>
         </li>
         <li id="e7423b7a-3ac5-4ad1-a3e8-202255a4b978d6e10">
            <p id="57c4f664-96a8-4fcc-9f0b-3e9ee7dfb3ecd6e11">Für komplexere Aufgaben, in denen man nicht an jeder Stelle über den ganzen XML Baum navigiert und sich die Werte zusammensuchen suchen muss, kann man die Streaming Funktion des Saxon XSLT Prozessors verwenden.</p>
         </li>
      </ol>
      <p id="a470215e-648e-4bb9-87f9-894c63b0dd90d6e13">XSLT Streaming[[xe1:Verarbeitungsmethoden;xe2:XSLT Streaming]] ist in der [[link]]XSLT Version 3.0[[fn:https://www.saxonica.com/html/documentation/sourcedocs/streaming/xslt-streaming.html*XSLT3.0 Streaming API]] neu hinzugekommen und in der
kommerziellen [[link]]Saxon-EE Lösung von Michael Kay[[fn:https://www.saxonica.com/html/documentation/sourcedocs/streaming/]][[xe1:XML Gurus;xe2:Michael Kay]] implementiert. Bei dieser Methode wird kein Eingabebaum im Speicher aufgebaut, was zu einer drastischen Performanzsteigerung[[xe1:Performanzsteigerung]] führt.</p>
      <p id="3646e5ae-e79b-4fe4-87dc-bf3d33d48095d6e15">Es gibt ein paar Regeln, die man bei der Verarbeitung großer Datenmengen über die Streaming Funktionen beachten sollte:</p>
      <ul id="35560a63-bdf8-4ada-81c2-106bbfc808e4d6e17">
         <li id="956a2a9f-c86e-4f35-9c4b-d117a5f2382bd6e18">
            <p id="dddf3268-6ea2-4478-87d5-24c73f2f8927d6e19">Bei einer XPATH Auswertung sollte nur ein einfacher Ausdruck mit höchstens einer konsumierenden Selektion gegeben sein. Konsumieren heißt, dass vom Kontextknoten aus eine Knotenmenge abwärts selektiert wird. Dagegen bleibt die Information bzgl. der Ancestor-Achse erhalten.</p>
         </li>
         <li id="b21608a7-360e-4ed0-b0e9-a58e017d15afd6e21">
            <p id="3780bf62-e000-46b1-83be-09dd2089bef4d6e22">Bei einer Selektion sollte man aber darauf achten nur atomare Werte auszuwählen.</p>
         </li>
         <li id="fa83009f-d8b6-4844-97d2-5e001db79581d6e24">
            <p id="7b4a93a4-86cd-479b-aa10-deca7ae3d6b6d6e25">Knotenmengen, die über die Streaming Option eingelesen wurden, können nicht einer Funktion übergeben werden. Sie sind auch nicht einer Variablen zuweisbar.</p>
         </li>
         <li id="fca47c0e-acf0-462f-acff-4368002149cdd6e27">
            <p id="2e7c6e48-0ea5-4af8-bd05-5bfa0f731253d6e28">"Crawler”-Ausdrücke, wie [[code://section]] sind nicht nicht zu verwenden, ebenso ein rekursiver Abstieg mit Selektion, wie bspw. mit einem [[code:apply-templates]] Call.</p>
         </li>
      </ul>
      <p id="e3db71ee-23f5-45b5-ab11-d1fcca66e816d6e30">Zu Beginn der Streaming-Aktion kann man sich auf konventionelle Art und Weise Teilbäume, die nicht so performanzlastig aufgebaut werden, in einer Variablen abspeichern und im Verlauf der Streaming-Verarbeitung z.B. für einen Vergleich auswerten.</p>
   </body>
</topic>