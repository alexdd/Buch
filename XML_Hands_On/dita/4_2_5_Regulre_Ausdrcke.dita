<?xml version="1.0" encoding="utf-8"?>
<topic id="1baa0c4a-6cde-4033-9e48-ee47dc16c287">
   <title id="a3acd735-e2ec-4c5f-940d-72d647e5bd74">Reguläre Ausdrücke</title> |  |                                                    Rejected by , .       <body id="eb236ec0-6647-4a58-a73c-7f1e6362f89f">
      <p id="8b2f5bb2-8497-4ea8-b65b-cf8b9c972fc3d6e4">Manchmal reicht für das Durchsuchen des XML Baums XPATH nicht mehr aus und man will auf den Textknoten reguläre Ausdrücke aufrufen. Ich kenne drei XPATH Funktionen, in denen man XPATH angeben kann:</p>
      <ul id="e8bddab8-581d-4e54-b848-fb90feef94e3d6e6">
         <li id="a2198db8-9493-42f7-98ce-f1ef5ca43156d6e7">
            <p id="6596ac58-1f12-4b1d-8a45-f9b99d8221c8d6e8">[[code:fn:matches(subject, pattern, flags)]]</p>
         </li>
         <li id="d7440cb3-d577-4c16-9ff9-0fe6f87f154cd6e10">
            <p id="e2221857-efab-45d2-afff-2d6b1d29c840d6e11">[[code:fn:replace(subject, pattern, replacement, flags)]]</p>
         </li>
         <li id="365cff3a-eccc-45cc-bbd0-81fa1134f382d6e13">
            <p id="fe46275a-fd1b-4527-aa25-fde0098a6893d6e14">[[code:fn:tokenize(subject, pattern, flags)]]</p>
         </li>
      </ul>
      <p id="867b5230-3fe3-4dd4-8794-938ba7427581d6e16">Bei der Eingabe des regulären Ausdrucks muss man natürlich Zeichen, wie [[code:&gt;,&lt;,&amp;]] maskieren, was den Ausdruck im Gegensatz zur herkömmlichen Nicht-XML Programmierung noch ein bisschen komplizierter macht.</p>
      <p id="89d58d94-7076-4bee-9603-f5f241963967d6e18">Der Audruck, der bspw. auf alle XML Tags matched ist folgender: [[code:&amp;lt;[^&amp;gt;^!]+&amp;gt;]]. Hier sind, die für XML reservierten, Zeichen bereits maskiert.</p>
      <section id="4a06142b-5263-4b97-89d4-33c1746def92d7e21">
         <title id="055ae7ca-d2b1-41e4-be84-675e3e8827bdd6e21">XSLT Analyze String</title>
         <p id="cea9c4dd-6e14-445a-a899-07215642bb26d6e23">Es gibt aber auch ein eigenes XSLT Konstrukt, unabhängig von XPATH, um reguläre Ausdrücke anwenden zu können. Der Quelltext dazu sieht so aus:</p>
         <pre id="92925323-94a4-4fab-bf90-121c2ed39ba6d7e26" xml:space="preserve">&lt;xsl:template match="text()[parent::xml-code]"&gt;
  &lt;xsl:analyze-string select="." regex="&amp;lt;[^&amp;gt;^!]+&amp;gt;"&gt;
    &lt;xsl:matching-substring&gt;
      &lt;b&gt;&lt;xsl:value-of select="."/&gt;&lt;/b&gt;     
    &lt;/xsl:matching-substring&gt;
    &lt;xsl:non-matching-substring&gt;
      &lt;xsl:value-of select="."/&gt;
    &lt;/xsl:non-matching-substring&gt;
&lt;/xsl:template&gt;</pre>
         <p id="a5477733-e663-4047-8c66-c9fe0f1d54a6d6e27">Hier wird jeder Textknoten eines Elements untersucht und falls ein XML-Tag enthalten ist, so wird dieses über die [[code:xsl:matching-substring]] Anweisung in ein [[code:&lt;b&gt;]] Tag gewrapped. Im nächsten Transformationsschritt wird dieses wiederum in Fettschrift dargestellt.</p>
         <p id="39dcf242-4503-4812-8866-2f6bfe223737d6e29">Das ist ein einfacher Syntax-Highlighter für XML Quelltexte. Auf diese Weise ist der Syntax-Highlighter für dieses PDF realisiert.</p> |  |                                                    Rejected by , .           |   |                                                    Rejected by , .           |   |                                                    Rejected by , .       <note id="d9c749df-4630-42b2-ad08-4512c2e10e8fd7e33">
            <p id="2efd01df-e5c6-4202-aaad-cae6fab6f28fd6e32">Man kann auch die [[code:xsl:analyze-string]] Elemente in den [[code:xsl:matching-substring]] und [[code:xsl:non-matching-substring]] Elementen verschachteln, was natürlich noch wesentlich kompliziertere Problemstellungen erlaubt.</p> |  |                                                    Rejected by , .           |   |                                                    Rejected by , .           |   |                                                    Rejected by , .       </note>
      </section>
   </body>
</topic>