<?xml version="1.0" encoding="utf-8"?>
<topic id="a204cfce-f0e0-4a46-b5ca-5d58a0700931">
   <title id="4c7fac2a-6706-46ae-b8d5-696ae0704ea8">Leerzeichenbehandlung</title>
   <body id="b989a436-0555-40e4-9fed-271ec6b53588">
      <p id="c3d52386-8f18-4268-8f25-d5560396b317">[[xe1:Konzepte;xe2:Leerzeichenbehandlung]]Die Leerzeichenbehandlung am Satzanfang ist im Bereich Publishing ein kontrovers diskutiertes Thema. Einerseits sollte der Redakteur dafür sorgen, dass keine überflüssigen Leerzeichen in die Bedatung gelangen, andererseits werden diese aber durch Editoren und Transformationsstrecken hinzugemogelt.</p>
      <p id="23c1a7ee-c7ca-4ba0-a840-4d4faa5805d3d7e6">Diese unerwünschten Leerzeichen will man bei der Publikation wieder loswerden. Hierzu stellt XSLT verschiedene Mittel bereit:</p>
      <ol id="0b687421-ba79-4836-8614-5724cfd13bb8d7e8">
         <li id="8b5a9620-d233-476d-81fe-1e012d6896a9d7e9">
            <p id="d15aa606-ad25-4b56-9b34-f6b0372d3d52d7e10">Mit [[code:xsl:strip-space]] und [[code:xsl:preserve-space]][[xe1:XSLT Konstrukte;xe2:xsl:strip-space und xsl:preserve-space]] kann in der Stylesheet-Deklaration festgelegt werden, in welchen Elementen Leerzeichen-artige Zeichen, das sind z.B. Spaces und Zeilenumbrüche, ggf. auf ein Leerzeichen normalisiert werden sollen. Andersrum kann man auch angeben, wo das explizit nicht geschehen soll.</p>
         </li>
         <li id="32347def-64f9-48b9-b013-979705cadeadd7e12">
            <p id="d56915eb-67fa-4caf-bdcd-0a98aa2b01ead7e13">Die Funktion [[code:fn:normalize-space]] ermöglicht diese Funktionalität in XPath Abfragen und mit [[code:fn:translate]] können Leerzeichen auf andere Zeichen, wie z.B. auch auf den Leerstring, abgebildet werden.</p>
         </li>
         <li id="2290d79f-435f-4d2f-ac4e-7315bd9d43f1d7e15">
            <p id="2f30c975-03de-46e4-b344-70f4267b3cfcd7e16">Will man nur die Leerzeichen am Anfang oder am Ende eines PCDATA Elements loswerden, empfiehlt sich ggf. auch ein Blick in die FunctX Bibliothek von [[nb:Priscillia Wamsley]][[xe1:XML Gurus;xe2:Priscillia Wamsley]] zum [[link]]Thema Trimming[[fn:http://www.xsltfunctions.com/xsl/functx_trim.html*FunctX Bibliothek von Priscilla Walmsley zum Thema Trimming]].</p>
         </li>
      </ol>
      <p id="a96d44b0-e8f5-46e8-bffa-939a91044d47d7e18">Schnell stellt man fest, dass diese Hausmittel nicht ausreichen, wenn man die Leerzeichen am Anfang einer verschachtelten Inline-Struktur loswerden will, wie z.B. dieser hier:</p>
      <pre id="f9710cb8-9c56-47c6-b50f-06196312c97bd7e20" xml:space="preserve">&lt;title&gt;•&lt;i&gt;••&lt;!-- comment --&gt;&lt;cap&gt;•A&lt;/cap&gt;lfons Bliemetsrieders &lt;/i&gt;Tagebuch&lt;/title&gt;</pre>
      <p id="279a46bd-d2b5-45b9-aab8-c8c8cd0a361bd7e22">Die Leerzeichen, markiert als schwarze Punkte •, haben sich eingeschlichen. Man kann hier nicht obige Funktionen pauschal anwenden, denn z.B. das Leerzeichen hinter [[code:Bliementsrieder]] ist durch ein Editierproblem entstanden. Hier wurde versehentlich das Leereichen kursiv mitformatiert. Würde man auf dem [[code:&lt;i&gt;]] Tag normalisieren, dann würde dieses Leerzeichen verschluckt werden.</p>
      <section id="74b6559f-99bc-4d48-ba34-78c11b7f6e4ed7e24">
         <title id="fd83d454-7b58-4713-8979-829ec2cb98ced7e25">Lösungsweg</title>
         <p id="040db567-9473-4340-af6b-82b2facbbc5bd7e27">Mein Ergeiz für dieses Problem wurde durch die sehr gute Lösung meines Kollegen geweckt, der einen anderen Programmierstil pflegt als ich. Deshalb musste ich beweisen, dass man auch "old-school" regelbasiert mit XSLT zu einer vernünftigen Lösung kommt. Glücklicherweise gibt es mittlerweile sehr ausgeklügelte XSLT Konstrukte[[xe1:XSLT Konstrukte]]. </p>
         <p id="7fef9e04-4632-4904-88f0-c811b604b990d7e29">Wenn man sich das obige Beispiel anschaut, dann lässt sich die Aufgabe in zwei Teile zerlegen:</p>
         <ol id="7528f137-6a3d-49cb-ba6b-ab57f0bf617cd7e31">
            <li id="60dcefd0-45d1-4c4c-aff4-2a0db23c140bd7e32">
               <p id="31bb5404-30b7-4afc-85c3-b247ccb1763fd7e33">Entferne alle Textknoten unterhalb von [[code:&lt;title&gt;]] bis zum ersten Textknoten, der auch Buchstaben und sichtbare Zeichen enthält.</p>
            </li>
            <li id="43791a28-09a8-48f0-ace8-68d513ac9bb8d7e35">
               <p id="420fed12-a380-44db-b6c5-38b415a02c21d7e36">Danach kannst Du am ersten Textknoten unterhalb von [[code:&lt;title&gt;]] die führenden Leereichen abschneiden.</p>
            </li>
         </ol>
         <p id="e3fa0f66-264c-41d2-afca-55afb22cf0e5d7e38">Hört sich simpel an, ist es aber leider nicht. </p>
         <p id="89721e97-e632-4dfd-bcf1-11ff1543f284d7e40">Zunächst recherchierte ich, ob denn auch wirklich an einem PCDATA Element nur ein Textknoten dranhängt. Diese Information war nötig, weil mein erster Algorithmus noch nicht ganz so ausgefeilt war, wie in den zwei Punkten oben beschrieben.</p>
         <p id="3895a2a3-e5cc-4e48-ac60-bf413410c010d7e42">Man kann in einer Transformation mehrere Textknoten hintereinander erzeugen, wie:</p>
         <pre id="bc7ba3c0-2e9d-4f37-9e2c-a3616e87730dd7e44" xml:space="preserve">&lt;xsl:value-of select="'erster Textknoten'"/&gt;&lt;xsl:value-of select="'zweiter Textknoten'"/&gt;</pre>
         <p id="0beeb595-3daa-4d76-8602-a679097b66afd7e46">Diese werden aber bei einem <i id="38a0b1df-f555-4df4-ad37-19271a51aeefd7e48">"Save-Load Cycle"</i> zu einem Textknoten normalisiert. So steht das zumindest in der [[link]]DOM Core Spezifikation[[fn:https://www.w3.org/TR/DOM-Level-3-Core/core.html#Document3-normalizeDocument*Spezifikation zum DOM 3 Core auf den Seiten des W3 Konsortiums]]. Inwieweit das dann in den XML Prozessoren umgesetzt ist, musste noch geprüft werden. Dazu habe ich den Saxon Quellcode herangezogen:</p>
         <fig id="b34fc221-0506-4955-9962-9c24a2122a98d7e51">
            <title id="5865c16f-544a-4fd9-95c7-4b24ca59bdd4d7e52">endElement() Funktion im Saxon XSLT Prozessor</title>
            <desc id="dd5ef2a2-401a-4dc4-8ff2-7b9e5f8cae11d7e54">Quellcode Schnippsel aus dem Saxon XSLT Prozessor, das zeigt, dass der EndElement-Listener im Parser einen Normalisierungsschritt auf den beteiligten DOM Knoten aufruft.</desc>
            <image href="images/normalisiere_26.png"/>
         </fig>
         <p id="f5708aec-1260-4f16-8803-f29d3c2ef996d7e57">Die Normalisierungsfunktion lässt Mike Kay[[xe1:XML Gurus;xe2:Michael Kay]] dann mit einem aussagekräftigen Kommentar frei...</p>
         <fig id="e3945e1b-4c39-4a49-af63-d695b945dd13d7e60">
            <title id="730fce64-5d4d-4342-a9eb-73a6542a57d9d7e61">normalize() Funktion im Saxon XSLT Prozessor</title>
            <desc id="ab09a3b4-6007-4ca0-affd-5066b98b4a2fd7e63">Methodenrumpf der Normalisierungsfunktion im Saxon XSLT Prozessor</desc>
            <image href="images/normalisiert_27.png"/>
         </fig>
         <p id="04360877-43be-4464-9e9f-f3642dd90830d7e64">Damit war ich zufrieden - ob das jetzt stimmt oder nicht, ist glücklicherweise für die endgültige Lösung irrelevant.</p>
         <p id="a3630005-7094-4ff5-b474-8eb9a7605a08d7e66">Mein erster Versuch alle Textknoten auszuschneiden, die nur Leerzeichen enthalten, sah so aus:</p>
         <pre id="e19bedf2-8f18-49d7-93bb-d57f83018f6ad7e70" xml:space="preserve">
&lt;!-- Entferne alle Leerzeichen-Only Knoten, die kein Vorgänger Inline-Element haben --&gt;
&lt;xsl:template match="text()[ancestor::title 
                            and not((.|..)/preceding-sibling::node()[1][self::*]) and
                                not(translate(.,' ','')]"/&gt;</pre>
         <ul id="00019b2b-41c3-4317-b31e-b39f59eec4dbd7e70">
            <li id="ad5b8315-0f4b-4208-9df0-abb847484ed2d7e71">
               <p id="2e6e6d45-c95c-4dfb-bf79-b51fd0c95be5d7e72">Die erste Bedingung prüft, ob sich der Textknoten irgendwo unterhalb von [[code:&lt;title&gt;]] befindet.</p>
            </li>
            <li id="0bf4d4ec-aa53-42c6-b569-e90b59f28eaad7e74">
               <p id="7763a442-b49e-44ae-a31b-1c50f86feffdd7e75">Die zweite Bedingung prüft, ob als unmittelbarer Vorgänger ein Inline-Element existiert. Gesetzt den Fall, dass aneinander angrenzende Textknoten zu einem Textknoten zusammengefasst sind - wie oben recherchiert - würde das im Negativfall bedeuten, dass wir uns am Satzanfang befinden.</p>
            </li>
            <li id="d54525ca-53b9-4c9d-8525-b947bba44589d7e77">
               <p id="447df0d0-4961-470d-83e7-90701ddd2589d7e78">Die dritte Bedingung prüft, ob es sich um einen Knoten handelt, der nur aus Leerzeichen besteht. Hier müssten streng genommen auch noch Zeilenumbrüche aufgelistet sein.</p>
            </li>
         </ul>
         <p id="fd3c8142-f1dd-4518-8f35-548dba6b2285d7e80">Leider konnte dadurch der folgende - Nicht-Real-Welt - Testfall nicht gelöst werden:</p>
         <pre id="b60ded7f-9c7a-48ec-92ad-af115f424f2dd7e84" xml:space="preserve">&lt;title&gt;•&lt;b&gt;•Fettes&lt;/b&gt;&lt;b&gt;&lt;i&gt;&lt;b&gt;&lt;i&gt; &lt;/i&gt;&lt;/b&gt;&lt;/i&gt;Editierproblem&lt;/b&gt;&lt;/title&gt;</pre>
         <p id="a6603924-6d82-4685-8398-61cd3baa2ff6d7e84">Das Leerzeichen im [[code:&lt;i&gt;]] Tag wurde verschluckt. Das kam wegen der zweiten Bedingung, die nur maximal eine Verschachtelungsebene beachtet. Man könnte zwar den Ausdruck noch aufbohren, z.B. so:</p>
         <pre id="100a8ed2-b9e2-408c-9df2-77e1e7a10755d7e88" xml:space="preserve">not((.|..|../..|../../..)/preceding-sibling::node()[1][self::*])</pre>
         <p id="20c75200-39fe-4a7d-a6bb-cddf079e35dfd7e88">Das sieht aber schon wirklich sehr unschön aus.</p>
         <p id="a84f5829-997e-49c0-9d89-e38d86f9a96ed7e90">Da ich mir aber zuvor schon den zweiten Schritt überlegt hatte, der so aussieht:</p>
         <pre id="971d9670-ab2e-43bb-9695-6e5249e9e80ad7e95" xml:space="preserve">
&lt;!-- Entferne am ersten Textknoten unterhalb von title führende Leerzeichen --&gt;
&lt;xsl:template match="text()[current() is ancestor::title[1]/(descendant::text())[1]]" 
              priority="10"  mode="pass-2"&gt;
    &lt;xsl:value-of select="replace(.,'^\s+','')"/&gt;
&lt;/xsl:template&gt;</pre>
         <p id="12354142-428d-46cb-92e7-310966c386e8d7e95">...fiel mir schliesslich die Korrektur für den ersten Schritt leicht:</p>
         <pre id="d565d6db-c866-4145-b3ff-4382c5b06c5dd7e99" xml:space="preserve">&lt;xsl:template match="text()[current() &amp;lt;&amp;lt; ancestor::title[1]/
                           (descendant::text()[normalize-space(.)])[1]]" mode="pass-1"/&gt;</pre>
         <fig id="4e92d005-3aaf-4fc0-9927-ac884db72b61d7e101" expanse="spread" frame="all"
              scale="50"
              status="changed">
            <image href="images/Sandpiper_29.svg"/>
         </fig>
         <ul id="76222a8f-10e7-4f9b-85b8-1582c17456c3d7e99">
            <li id="0494db81-2ee2-4385-8674-a48cfc1d27b7d7e100">
               <p id="e24f4f62-cfe8-43bf-aa18-b37addbd9c99d7e101">Ein Test [[code:text()[normalize-space(.)]] genügt, um festzustellen, ob der Textknoten nicht nur Leerzeichen enthält.</p>
            </li>
            <li id="e102adee-666b-4b41-a71a-6c75db81c248d7e103">
               <p id="297cc901-b3be-4df2-b297-83da8d48c931d7e104">Andersrum prüft man mit [[code:text()[not(translate(.,' ',''))]] ob der Textknoten nur aus Leerzeichen besteht.</p>
            </li>
            <li id="d95c268c-820a-4566-841f-d250422b3f78d7e106">
               <p id="f2e1e417-3d49-4f6f-b843-81d53fe442cad7e107">Das Flachklopfen einer Sequenzmenge mittels [[code:()]], wie in [[code:(descendant::text())]] ist notwendig, damit man auch wirklich nur das erste Element des Descendant-Lookups bekommt.</p>
            </li>
            <li id="a8be9758-751f-4b59-957c-e3b884c02c9dd7e109">
               <p id="3bad6def-b43d-4895-b143-ffb2081b26ddd7e110">Die [[code:fn:current()]] Funktion wird viel zu selten benutzt... damit erspart man sich eine Variablendeklaration im Rumpf der Regel.</p>
            </li>
            <li id="61d78f7b-9f4e-4a73-b5b4-321969595ee8d7e112">
               <p id="ac815ed6-38c3-482a-9cef-3e9a37872380d7e113">Den coolen [[code:&lt;&lt;]] Operator, der prüft, ob ein Knoten vor einem anderen kommt, muss man in einem Match-Statement escapen.</p>
            </li>
         </ul>
         <p id="6c5d42c7-8e0d-4173-aca9-00f2ad3ad290d7e115">Abschliessend ist noch der ganze Quelltext der Lösung abgebildet. Dieser zeigt auch nochmal das Pattern bzgl. der <xref href="ceed4546-a60b-4d5f-a625-6e79c180cc13"
                  id="f06f416b-b646-4053-8568-63b7bcfaaa9b"
                  type="topic">Vortransformationen</xref>:</p>
         <pre id="15ccc1ce-1053-4daf-a868-934f62aa6158d7e124" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    exclude-result-prefixes="xs"
    version="2.0"&gt;
    
    &lt;xsl:template match="text()[current() &amp;lt;&amp;lt; ancestor::title[1]/
                               (descendant::text()[normalize-space(.)])[1]]" 
                  mode="pass-1"/&gt;
    
    &lt;xsl:template match="text()[current() is ancestor::title[1]/(descendant::text())[1]]" 
                  priority="10"  mode="pass-2"&gt;
        &lt;xsl:value-of select="replace(.,'^\s+','')"/&gt;
    &lt;/xsl:template&gt;
    
    &lt;xsl:template match="/"&gt;
        &lt;xsl:variable name="pass-1"&gt;
            &lt;xsl:apply-templates mode="pass-1"/&gt;
        &lt;/xsl:variable&gt;
        &lt;xsl:apply-templates select="$pass-1" mode="pass-2"/&gt;
    &lt;/xsl:template&gt;
    
    &lt;xsl:template match="node()|@*" mode="#all"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="node()|@*" mode="#current"/&gt;          
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;
    
&lt;/xsl:stylesheet&gt;</pre>
      </section>
      <section id="9bb023ed-3c5e-4a2a-9178-60e7b4461421d7e126">
         <title id="0ca62da6-0627-4ad5-b7cf-c003e405d635d7e123">Performanz</title>
         <p id="d9cc36c1-2261-4de8-b116-46b6eae607fed7e125">Aus Verlegenheit hatte ich die komplexere Match-Bedingung des ersten Schritts gegen einen einfachen Pfadselektor ausgewechselt, also das....</p>
         <pre id="80438f33-03bb-4f34-9db7-dad0978c39b2d7e131" xml:space="preserve">match="text()[current() is ancestor::title[1]/(descendant::text())[1]]"</pre>
         <p id="17e6056f-b093-43fd-a607-c79e17591609d7e129">... gegen das ...</p>
         <pre id="a2a81b0c-8e84-44ed-91e8-a4e0e4bf4733d7e135" xml:space="preserve">match="title/(descendant::text())[1]"</pre>
         <p id="0aaae8eb-51a5-4141-b63e-a9d60bfd906ed7e133">... ersetzt. </p>
         <hazardstatement id="da13d4a2-8e51-4345-a0fd-f6bf46334a5bd7e137" type="danger" status="changed">
            <messagepanel id="0a57c4f3-b6c0-46cf-aca0-4bbe1df07de7d7e140">
               <typeofhazard id="e78436e8-8fdb-4eb7-8eb8-8860db1bdd83d7e139">Damit lief die Transformation aber in ein exponentiellen Performanzproblem!</typeofhazard>
               <howtoavoid id="02da643b-74e6-484c-abaf-97f22d640208d7e140">In einer Match-Bedingung sollte niemals die Descendant-Achse im Pfadselektor auftauchen!</howtoavoid>
            </messagepanel>
         </hazardstatement>
         <p id="428f79fc-10cb-4cf2-8103-62f75a8eba7ed7e135">Ansonsten performt die Lösung aber auch bei mehreren Tausend Titeln in Sekundenbruchteilen.</p>
      </section>
   </body>
</topic>