<?xml version="1.0" encoding="utf-8"?>
<document>
   <title>Entwicklerhandbuch</title>
   <meta>
      <owner>alex</owner>
      <date-of-creation>Tue Dec 25 2018 12:56:30 </date-of-creation>
      <date-of-last-change>Sat Mar 02 2019 12:50:15 </date-of-last-change>
      <language>de-DE</language>
      <status>112</status>
      <description>Short Description</description>
      <logo-image>././client/data/dec6632b-2b03-481e-924c-b05befd3f95b/logo.png</logo-image>
      <cover-image>././client/data/dec6632b-2b03-481e-924c-b05befd3f95b/cover.png</cover-image>
      <main-title>XML Hands On</main-title>
      <subtitle>XSLT - XQuery - MarkLogic</subtitle>
      <cover-text>(c) Alex Düsel 2019
Creative Commons Namensnennung-Keine Bearbeitungen 4.0 International Public License
www.github.com/alexdd/Buch</cover-text>
      <structure>
         <format>book</format>
         <chapter-on-right-page/>
         <cover-backpage/>
      </structure>
      <design>
         <layout>margin</layout>
         <paper-format>A4</paper-format>
         <page-margin>leftgap</page-margin>
         <spaces>small</spaces>
         <header>shortheader</header>
         <footer>longfooter</footer>
         <look-and-feel>fashion</look-and-feel>
         <table-layout>simple</table-layout>
      </design>
   </meta>
   <supplemental-directives>
      <chapter hyphenation="yes" chapterpage="no" id="d2e93" ismodule="no">
      
         <title>
            <title id="67b2fea2-88ac-4cbc-9763-0e31cf89b469">Intro</title>
         </title>
         
            <page-wide-element>
            <figure pdfwidth="margin">
               <img src="./client/data/c15a8d5c-03bc-4ee9-a04a-a123e0ce5d88/dita-logo.jpg"/>
            </figure>
         </page-wide-element>
            <column-wide-element>
            <p>Dieses Buch wurde mit Tektur CCMS erstellt. Tektur ist ein einfach zu bedienender kollaborativer Editor um <b>DITA</b>
               <footnote>
                  <desc>https://de.wikipedia.org/wiki/Darwin_Information_Typing_Architecture</desc>
                  <add>DITA ist ein Standard im Bereich Publishing und löst ältere Dokumenttypen, wie z.B. Docbook ab. Beispielsweise ist DITA ein gutes Modell für Softwarehandbücher und zugehörige Online-Dokumentation.</add>
               </footnote> Inhalte erstellen, als PDF ausgeben und pflegen zu können. Die Eingabe erfolgt dabei per <b>WYSIWYG</b>
               <footnote>
                  <desc>https://de.wikipedia.org/wiki/WYSIWYG</desc>
                  <add>What You See Is What You Get - Mit dieser Eingabemethode hat der Autor schon ein Bild davon, wie sein Text gedruckt werden kann.</add>
               </footnote> mit geführter Benutzerinteraktion. Die Inhalte werden als einzelne Topics verwaltet, die in verschiedenen Maps referenziert werden können; Stichwort: <b>Topic Based Authoring</b>
               <footnote>
                  <desc>https://en.wikipedia.org/wiki/Topic-based_authoring</desc>
                  <add>Beim Topic Based Authoring wird der Content feingranular in Informationseinheiten aufgegliedert, die sich dann über Referenzen in verschiedene Publikationen einbinden lassen.</add>
               </footnote>.</p>
         </column-wide-element>
            <column-wide-element>
            <p>Sonstige Features: Rechte- und Rollensystem, Versionskontrolle, konfigurerierbarer Workflow mit Review &amp; Approval Fuktionen. Auf dem Entwicklerblog<footnote>
                  <desc>http://www.tekturcms.de</desc>
                  <add>Das ist die private Homepage des Autors mit einer kompletten Liste seiner Hobby-Projekte seit 2000.</add>
               </footnote> kann man sich über den Fortschritt informieren.</p>
         </column-wide-element>
            <column-wide-element>
            <note>
               <consequence>
                  <p>Dieses Buch ist <b>WORK IN PROGRESS</b> und dient in erster Linie als Test für Tektur CCMS. Der Feinschliff kommt noch! Momentan schreibe ich alles was mir irgendwie interessant erscheint - je nach zeitlicher Möglichkeit mehr oder weniger umfangreich - auf und binde die Topics in eine Map ein, um ein PDF erzeugen zu können.</p>
                  <p>Wie schliesslich Struktur und Inhalt genau aussehen sollen, werde ich mir zu einem späteren Zeitpunkt noch genau überlegen :-]</p>
               </consequence>
            </note>
         </column-wide-element>
         
      
      </chapter>
   </supplemental-directives>
   <toc/>
   <chapter hyphenation="yes" chapterpage="no" id="d2e143" ismodule="no">
      
         <title>
            <title id="a01d7a84-023f-4c62-ab06-1e8e8b069bed">Anwendungsgebiete</title>
         </title>
         
            <column-wide-element>
         <p>
               <b>XML,</b>
               <b>XSLT</b>, <b>XPATH</b>, <b>XSL-FO</b> und <b>XQuery</b> sind Techniken um baumstrukturierte Daten - im Vergleich zu relationalen Daten - aus verschiedenen Quellen ineinader zu überführen, abzuspeichern, zu versenden, darzustellen und auszuwerten. Einfach gesprochen geht es um die Weiterverarbeitung solcher Daten - das XML kann dabei sowohl die Nutzdaten als auch die Steuerdaten tragen.</p>
      </column-wide-element>
            <column-wide-element>
         <p>Vom Aussehen her sind XML Daten im Prinzip Textdaten. Sie können sehr einfach mit einem Texteditor erstellt werden. Im Gegensatz zu Multimedia-Daten sind keine komplexen Tools, wie z.B. ein Grafikeditor, erforderlich.</p>
      </column-wide-element>
            <column-wide-element>
         <p>Auch relationale Daten können in Form von Tabellen, als Excel Tabelle oder bspw. als kommaseparierte Textdatei, aus einem System ausgespult und weiterverarbeitet werden. XML erlaubt es jedoch die Daten semantisch auszuzeichnen. Das geschieht durch das Klammern semantisch zusammengehöriger Elemente mittels Klammer-Tags und weiterer Kategorisierung dieser Informationseinheiten mittels weiterer Properties (Attribute) an diesen Tags. Durch das Verschachteln dieser geklammerten Komponenten entsteht ein Baum, der die Hierarchische Ordnung der Daten widerspiegeln sollte.</p>
      </column-wide-element>
            <column-wide-element>
         <p>Diese Baumstrukturen sind maschinell lesbar und die Daten können, bevor sie von einem Versender zu einem Empfänger gehen, mittels eines automatischen Prozesses validiert werden. Dabei können sowohl der Inhalt als auch die Syntax anhand von definierten Regeln (Schemas) genau überprüft werden.</p>
      </column-wide-element>
            <column-wide-element>
         <p>Der XML Standard ist mittlerweile 20 Jahre alt. Zuvor gab es SGML, das zum Beispiel auch nicht abgeschlossene Tags erlaubt.</p>
      </column-wide-element>
            <column-wide-element>
         <p>Der Übergang von SGML zu XML hat die Sache ein bisschen vereinfacht, eine weitere Vereinfachung brachte JSON als Standard. JSON wird gerne im Webbereich eingesetzt um baumstrukturierte Daten zu verarbeiten. JSON ist jedoch nicht so gut maschinenlesbar und es gibt noch nicht so viele Werkzeuge wie z.B. Code Editoren dafür.</p>
      </column-wide-element>
            <column-wide-element>
         <p>Folgend eine kurze Erläuterung zu den eingangs erwähnten Schlüsselwörtern, um die es sich im weiteren Text drehen wird:</p>
      </column-wide-element>
            <column-wide-element>
         <ul>
               <li>
                  <p>
                     <b>XML</b> ist das Datenformat. Auf XML arbeiten die anderen Technologien. XML ist immer Input für diese Tools.</p>
               </li>
               <li>
                  <p>
                     <b>XSLT</b> transformiert eine XML Instanz in eine andere. Plain Text ist eine Aneinanderreihung von Text Knoten</p>
               </li>
               <li>
                  <p>
                     <b>XPATH</b> erlaubt es, bestimmte Knoten in einem XML Dokument über bedingte Pfadausdrücke zu selektieren.</p>
               </li>
               <li>
                  <p>
                     <b>XSL-FO</b> ist eine weitere XML basierte Auszeichnungssprache, die ein XSL-FO Prozessor einlesen kann, um daraus z.B. ein PDF zu generieren. </p>
               </li>
               <li>
                  <p>
                     <b>XQuery</b> ist eine Abfragesprache ählich zu SQL, jedoch werden damit nicht relationale Daten abgefragt sondern baumstrukturierte.</p>
               </li>
            </ul>
      </column-wide-element>
         
      
      <chapter hyphenation="yes" chapterpage="no" id="d2e242" ismodule="no">
         
            <title>
               <title id="1ea26780-291c-470f-9559-616cfb744574">Führende Technologie XSLT</title>
            </title>
            
               <column-wide-element>
            <p>Ausserhalb der XML Verarbeitung hat XSLT keinen Stellenwert. Im <b>TIOBE Index</b>
               <footnote>
                  <desc>https://de.wikipedia.org/wiki/TIOBE-Index</desc>
                  <add>Im TIOBE Index werden jährlich die populärsten Programmiersprachen aufgelistet</add>
               </footnote>
               <xe>
                  <first criterion="TIOBE Index">TIOBE Index</first>
               </xe> von 2003 rangierte XSLT einmal auf Platz 60 an letzter Stelle der Liste<footnote>
                  <desc>https://bit.ly/2ARgKCJ</desc>
               </footnote>.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Im Bereich XML würde aber ohne XSLT nicht viel gehen. Es gibt einige exotische Anwendungsgebiete in denen XML effizient 
mit <b>LISP</b> 
               <xe>
                  <first criterion="Programmiersprachen">Programmiersprachen</first>
                  <second criterion="LISP">LISP</second>
               </xe>Dialekten verarbeitet wird, bspw. die Verarbeitung von, nach XML konvertierten, <b>EDI X12</b>
               <footnote>
                  <desc>https://en.wikipedia.org/wiki/ASC_X12</desc>
                  <add>X12 ist ein amerikanischer Standard wie Nachrichten im Textformat zwischen Informationssystemen verschiedener Unternehmungen ausgetauscht werden. Beispielsweise werden in der Gesundheitsbranche Informationen über Arztbesuche von den Versicherungen an die Staaten geschickt.</add>
               </footnote>
               <xe>
                  <first criterion="Standards">Standards</first>
                  <second criterion="X12">X12</second>
               </xe> Nachrichten.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Auch im Bereich Publishing in der Luftfahrt hat sich SGML als Vorreiter von XML im <b>S1000D</b> Standard<footnote>
                  <desc>https://en.wikipedia.org/wiki/S1000D</desc>
                  <add>Das sehr komplexe Informationsmodell im militärischen Bereich wird z.B. über diesen Standard verwaltet. Teilweise sind die Daten noch im SGML Format vorhanden, da die verarbeitenden System aus den 80er Jahren stammen.</add>
               </footnote>
               <xe>
                  <first criterion="Standards">Standards</first>
                  <second criterion="S1000D">S1000D</second>
               </xe> wacker gehalten. Hier wird teilweise noch mit proprietäre Programmiersprachen, wie Metamorphosis<xe>
                  <first criterion="Programmiersprachen">Programmiersprachen</first>
                  <second criterion="Metamorphosis">Metamorphosis</second>
               </xe> gearbeitet.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Alternativen zu XSLT finden sich im entsprechendem Wikipedia-Artikel<footnote>
                  <desc>https://de.wikipedia.org/wiki/XSL_Transformation</desc>
                  <add>Das ist die Wikipedia Seite zu XSL = XSLT, XPATH und XSL-FO</add>
               </footnote>.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Wir konzentrieren uns hier also erst einmal auf XSLT und insbesondere XSL Stylesheets.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Beispielsweise werden die Autohandbücher führender Hersteller mittels XSL gesetzt, deren Eingabedaten aufbereitet und zur Weiterverarbeitung transformiert.</p>
         </column-wide-element>
               <column-wide-element>
            <ul>
                  <li>
                     <p>XSLT hat gerade noch den Status "Programmiersprache", weil man damit eine Turing Maschine<footnote>
                        <desc>http://www.unidex.com/turing/utm.htm</desc>
                        <add>Die Turingmaschine sollte jedem Informatiker aus den ersten Univorlesungen bekannt sein.</add>
                     </footnote> programmieren kann.</p>
                  </li>
                  <li>
                     <p>Mit HTML oder einer Templater Sprache (z.B. JSP)<xe>
                        <first criterion="Programmiersprachen">Programmiersprachen</first>
                        <second criterion="JSP">JSP</second>
                     </xe> würde das nicht funktionieren.</p>
                  </li>
                  <li>
                     <p>XSLT benötigt normalerweise immer eine XML Eingabe. Zumindest ein XML Knoten muss verarbeitet werden. Es gibt aber auch den Spezialfall, dass bspw. mit dem XSLT Prozessor Saxon keine Eingabe notwendig ist, bzw. diese vom XSLT Stylesheet selbst erzeugt wird.</p>
                  </li>
                  <li>
                     <p>XSLT ist keine imperative Sprache, d.h es werden keine Anweisungen der Reihe nach abgearbeitet, sondern eine deklarative Sprache, d.h für jedes Ereignis (besser gesagt: für jeden durchlaufenen DOM Knoten) wird eine gefundene - und vom Programmierer deklarierte - Regel angewendet.</p>
                  </li>
                  <li>
                     <p>Ausserdem gibt es funktionale Anteile, um bspw. die deklarierten Regeln rekursiv anwenden zu können.</p>
                  </li>
                  <li>
                     <p>XSLT wird oft mit XSL gleichgesetzt. Aber XSL<footnote>
                        <desc>W3C Seiten zu The Extensible Stylesheet Language Family (XSL)</desc>
                     </footnote> ist mehr:</p>
                     <ul>
                        <li>
                           <p>Zum einen kommt noch XPATH hinzu: XPATH erlaubt komplizierte Berechnungen und Selektionen auf den DOM Knoten eines XML Dokuments.</p>
                        </li>
                        <li>
                           <p>Zum anderen ist auch XSL-FO<footnote>
                              <desc>https://www.w3.org/TR/xsl/</desc>
                           </footnote> Bestandteil der XSL Spezifikation. XSL-FO Tags sind Anweisungen für einen XSL-FO Prozessor, der aus einem XSL-FO Dokument ein PDF Dokument generiert. Es sind auch andere Ausgabe-Formate, wie bspw. RTF möglich.</p>
                        </li>
                     </ul>
                  </li>
               </ul>
         </column-wide-element>
            
         
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="d2e343" ismodule="no">
         
            <title>
               <title id="f19c130f-edfe-408f-a9e2-31b53d92bb4c">Einige aktuelle und vergangene Szenarien</title>
            </title>
            
               <column-wide-element>
            <p>Einige Beispiele - aktuell und aus vergangenen Tagen:</p>
         </column-wide-element>
               <block-title>
                  <title id="ab76273e-04a8-430a-9f91-9a1b68d9c981d6e7">XML Webseiten</title>
               </block-title>
               <column-wide-element>
            <p>Einen XSLT Prozessor hat jeder Browser eingebaut. Es gab mal eine Zeit, in der es sehr populär war, Webseiten vom Server als XML auszuliefern<xe>
                  <first criterion="Anwendungsgebiete">Anwendungsgebiete</first>
                  <second criterion="XML Webseiten">XML Webseiten</second>
               </xe>. XML erlaubt die semantische Auszeichung des Inhalts, und die strikte Trennung des Inhalts von Layout und Design. Wesentlich besser als dies mit HTML und CSS jemals möglich wäre. Ich denke, u.a. wegen des exzessiven Einsatzes von Javascript (auch inline), hat sich diese Idee nie vollständig durchgesetzt. Schliesslich wurde XHTML spezifiziert und jetzt gibt es HTML5.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Betrachten wir das folgende einfache XML Beispiel:</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim><color name="green">&lt;?xml </color><color name="green">version</color>="1.0" <color name="green">encoding</color>="UTF-8"?<color name="green">&gt;</color>
<color name="green">&lt;document&gt;</color>
<color name="green">&lt;title&gt;</color>Das ultimative Zwei-Kapitel Dokument<color name="green">&lt;/title&gt;</color>
  <color name="green">&lt;chapter&gt;</color>
    <color name="green">&lt;title&gt;</color>Kapitel 1<color name="green">&lt;/title&gt;</color>
    <color name="green">&lt;intro&gt;</color>In Kapitel 1 wird kurz gesagt was Sache ist.<color name="green">&lt;/intro&gt;</color>
    <color name="green">&lt;content&gt;</color>Um es kurz zu machen, wie der Hase läuft steht in Kapitel 2.<color name="green">&lt;/content&gt;</color>
  <color name="green">&lt;/chapter&gt;</color>
  <color name="green">&lt;chapter&gt;</color>
    <color name="green">&lt;title&gt;</color>Kapitel 2<color name="green">&lt;/title&gt;</color>
    <color name="green">&lt;intro&gt;</color>Hier wird erklärt, wie der Hase läuft.<color name="green">&lt;/intro&gt;</color>
    <color name="green">&lt;content&gt;</color>Im Prinzip ist es ganz einfach.<color name="green">&lt;/content&gt;</color>
  <color name="green">&lt;/chapter&gt;</color>
<color name="green">&lt;/document&gt;</color></verbatim>
         </page-wide-element>
               <column-wide-element>
            <p>Ohne XSLT Stylesheet Zuweisung wird der Browser eine Datei mit diesem Inhalt als eingerücktes XML anzeigen - oder die Tags einfach ignorieren und den Textinhalt in einer Zeile darstellen. Fügt man eine Processing Instruction<footnote>
                  <desc>https://de.wikipedia.org/wiki/Verarbeitungsanweisung</desc>
                  <add>Die Processing Instruction wertet der Parser als Kommando aus und nicht als Teil des XML Contents</add>
               </footnote>
               <xe>
                  <first criterion="XML Konstrukte">XML Konstrukte</first>
                  <second criterion="Processing Instruction">Processing Instruction</second>
               </xe> am Anfang ein, wird ein XSLT Stylesheet vom Browser herangezogen und vor der Darstellung im Browser wird die so deklarierte XML Transformation ausgeführt:</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim><color name="green">&lt;?xml </color><color name="green">version</color>="1.0" <color name="green">encoding</color>="UTF-8"?<color name="green">&gt;</color>
<color name="green">&lt;?xml-stylesheet </color><color name="green">type</color>="text/xsl" <color name="green">href</color>="formatiermich.xsl" <color name="green"></color>=<color name="green">&gt;</color>
<color name="green">&lt;document&gt;</color>
  <color name="green">&lt;title&gt;</color>Das ultimative Zwei-Kapitel Dokument<color name="green">&lt;/title&gt;</color>
  <color name="green">&lt;chapter&gt;</color>
[...]</verbatim>
         </page-wide-element>
               <column-wide-element>
            <p>Jetzt kann man das XML einfach im Browser öffnen und alles wird schön formatiert - je nachdem welche Regeln in <code>
                  <nb>formatiermich.xsl</nb>
               </code> gesetzt sind - angezeigt:</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim><color name="green">&lt;?xml </color><color name="green">version</color>="1.0" <color name="green">encoding</color>="iso-8859-1"?<color name="green">&gt;</color>
<color name="green"><bg>&lt;xsl:stylesheet</bg> </color><color name="green">version</color>="1.0" <color name="green">xmlns:xsl</color>="http://www.w3.org/1999/XSL/Transform"<color name="green">&gt;</color>

  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="/"<color name="green">&gt;</color>
    <color name="green">&lt;html&gt;</color>
      <color name="green"><bg>&lt;xsl:apply-templates/&gt;</bg></color>
    <color name="green">&lt;/html&gt;</color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>

  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="document"<color name="green">&gt;</color>
  <color name="green">&lt;body&gt;</color>
      <color name="green"><bg>&lt;xsl:apply-templates/&gt;</bg></color>
    <color name="green">&lt;/body&gt;</color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>

  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="document/title"<color name="green">&gt;</color>     
    <color name="green">&lt;h1&gt;</color>
      <color name="green"><bg>&lt;xsl:apply-templates/&gt;</bg></color>
    <color name="green">&lt;/h1&gt;</color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>

  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="chapter"<color name="green">&gt;</color>
    <color name="green">&lt;div </color><color name="green">class</color>="chapter"<color name="green">&gt;</color>
      <color name="green"><bg>&lt;xsl:apply-templates/&gt;</bg></color>
    <color name="green">&lt;/div&gt;</color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>

  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="chapter/title"<color name="green">&gt;</color>
    <color name="green">&lt;h2&gt;</color>
      <color name="green"><bg>&lt;xsl:apply-templates/&gt;</bg></color>
    <color name="green">&lt;/h2&gt;</color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>

  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="chapter/intro"<color name="green">&gt;</color>
    <color name="green">&lt;div </color><color name="green">class</color>="intro"<color name="green">&gt;</color>
      <color name="green">&lt;i&gt;</color><color name="green"><bg>&lt;xsl:apply-templates/&gt;</bg></color><color name="green">&lt;/i&gt;</color>      
    <color name="green">&lt;/div&gt;</color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>

  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="chapter/content"<color name="green">&gt;</color>
    <color name="green">&lt;p&gt;</color><color name="green"><bg>&lt;xsl:apply-templates/&gt;</bg></color><color name="green">&lt;/p&gt;</color>    
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>
<color name="green"><bg>&lt;/xsl:stylesheet&gt;</bg></color>
</verbatim>
         </page-wide-element>
               <column-wide-element>
            <p>Die Processing Instruction hat keinen Einfluss auf den XML Inhalt und wird in einer anderen Eingabeverarbeitung nicht herangezogen.</p>
         </column-wide-element>
               <block-title>
                  <title id="d1a0e576-5434-4f78-a143-0aba397514ddd6e33">Serverseitige Konvertierung</title>
               </block-title>
               <column-wide-element>
            <p>Auch eine serverseitige Konvertierung<xe>
                  <first criterion="Anwendungsgebiete">Anwendungsgebiete</first>
                  <second criterion="Serverseitige Konvertierung">Serverseitige Konvertierung</second>
               </xe> ist gebräuchlich. Ein Beispiel aus vergangenen Tagen - WAP-Seiten<footnote>
                  <desc>https://de.wikipedia.org/wiki/Wireless_Application_Protocol</desc>
                  <add>Mittels dieser Technologie wurden Webinhalte auf Handys gespielt. Das war vor den Smartphones</add>
               </footnote> für unterschiedliche Handy-Modelle.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Damals hatten die Handys sehr unterschiedliche Displaygrößen. Handybrowser konnten noch nicht ausreichend Javascript und die Skalierung der WAP-Seite für das jeweilige Handy passierte nicht im Handy, sondern vor der Auslieferung auf der Serverseite. Dazu wurde eine XML Quelle mittels verschiedener XSLT Stylesheets in unterschiedliche WML WAP Repräsentationen transformiert.</p>
         </column-wide-element>
               <column-wide-element>
            <p>So würde das Zwei-Kapitel Beispiel von oben im WML Format aussehen (recht einfach gehalten):</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim><color name="green">&lt;?xml </color><color name="green">version</color>="1.0" <color name="green">encoding</color>="UTF-8"?<color name="green">&gt;</color>
&lt;!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.1//EN" "http://www.wap.org/DTD/wml_1.1.xml"&gt;
<color name="green">&lt;wml&gt;</color>
  <color name="green">&lt;head&gt;</color>
    <color name="green">&lt;meta </color><color name="green">name</color>="title" <color name="green">content</color>="Das <color name="green"></color>= <color name="green"></color>= <color name="green"></color>=<color name="green">&gt;</color>   
  <color name="green">&lt;/head&gt;</color> 
  <color name="green">&lt;card </color><color name="green">id</color>="chapter1" <color name="green">title</color>="Kapitel <color name="green"></color>=<color name="green">&gt;</color>
    <color name="green">&lt;p&gt;</color><color name="green">&lt;i&gt;</color>In Kapitel 1 wird kurz gesagt was Sache ist.<color name="green">&lt;/i&gt;</color><color name="green">&lt;/p&gt;</color>        
    <color name="green">&lt;p&gt;</color>Um es kurz zu machen, wie der Hase läuft steht in Kapitel 2.<color name="green">&lt;/p&gt;</color>  
  <color name="green">&lt;/card&gt;</color>
  <color name="green">&lt;card </color><color name="green">id</color>="chapter2" <color name="green">title</color>="Kapitel <color name="green"></color>=<color name="green">&gt;</color>
    <color name="green">&lt;p&gt;</color><color name="green">&lt;i&gt;</color>Hier wird erklärt, wie der Hase läuft.<color name="green">&lt;/i&gt;</color><color name="green">&lt;/p&gt;</color>
    <color name="green">&lt;p&gt;</color>Im Prinzip ist es ganz einfach.<color name="green">&lt;/p&gt;</color>
  <color name="green">&lt;/card&gt;</color>
<color name="green">&lt;/wml&gt;</color></verbatim>
         </page-wide-element>
               <column-wide-element>
            <p>Eine XSLT Transformation, die die XML Daten von oben in diese WML Darstellung überführt, könnte z.B. so implementiert werden:</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim><color name="green">&lt;?xml </color><color name="green">version</color>="1.0" <color name="green">encoding</color>="UTF-8"?<color name="green">&gt;</color>
<color name="green"><bg>&lt;xsl:stylesheet</bg> </color><color name="green">xmlns:xsl</color>="http://www.w3.org/1999/XSL/Transform" <color name="green">version</color>="1.0"<color name="green">&gt;</color>

  <color name="green"><bg>&lt;xsl:output</bg> </color><color name="green">doctype-public</color>="-//WAPFORUM//DTD <color name="green"></color>= <color name="green"></color>= <color name="green">doctype-system</color>="http://www.wapforum.org/DTD/wml12.dtd" <color name="green">indent</color>="yes"/<color name="green">&gt;</color>
    
  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="document"<color name="green">&gt;</color>
    <color name="green">&lt;wml&gt;</color>
      <color name="green"><bg>&lt;xsl:apply-templates/&gt;</bg></color>
    <color name="green">&lt;/wml&gt;</color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>
    
  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="document/title"<color name="green">&gt;</color>
    <color name="green">&lt;head&gt;</color>
      <color name="green">&lt;meta </color><color name="green">name</color>="title"<color name="green">&gt;</color>
        <color name="green"><bg>&lt;xsl:attribute</bg> </color><color name="green">name</color>="content"<color name="green">&gt;</color>
          <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="."/<color name="green">&gt;</color>               
        <color name="green"><bg>&lt;/xsl:attribute&gt;</bg></color>
      <color name="green">&lt;/meta&gt;</color>      
    <color name="green">&lt;/head&gt;</color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>
    
  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="chapter"<color name="green">&gt;</color>
    <color name="green">&lt;card </color><color name="green">id</color>="{concat('chapter',count(preceding-sibling::chapter)+1)}"<color name="green">&gt;</color>
      <color name="green"><bg>&lt;xsl:attribute</bg> </color><color name="green">name</color>="title"<color name="green">&gt;</color>
        <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="title"/<color name="green">&gt;</color>
      <color name="green"><bg>&lt;/xsl:attribute&gt;</bg></color>
      <color name="green"><bg>&lt;xsl:apply-templates</bg> </color><color name="green">select</color>="*[not(self::title)]"/<color name="green">&gt;</color>
    <color name="green">&lt;/card&gt;</color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>
  
  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="node()|@*"<color name="green">&gt;</color>
    <color name="green"><bg>&lt;xsl:copy&gt;</bg></color>
      <color name="green"><bg>&lt;xsl:apply-templates</bg> </color><color name="green">select</color>="node()|@*"/<color name="green">&gt;</color>
    <color name="green"><bg>&lt;/xsl:copy&gt;</bg></color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>
  
  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="processing-instruction()"/<color name="green">&gt;</color>
  
  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="intro"<color name="green">&gt;</color>
    <color name="green">&lt;p&gt;</color><color name="green">&lt;i&gt;</color><color name="green"><bg>&lt;xsl:apply-templates/&gt;</bg></color><color name="green">&lt;/i&gt;</color><color name="green">&lt;/p&gt;</color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>
  
  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="content"<color name="green">&gt;</color>
    <color name="green">&lt;p&gt;</color><color name="green"><bg>&lt;xsl:apply-templates/&gt;</bg></color><color name="green">&lt;/p&gt;</color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>
<color name="green"><bg>&lt;/xsl:stylesheet&gt;</bg></color></verbatim>
         </page-wide-element>
               <block-title>
                  <title id="fa0123f8-d2ab-48fe-a8a4-69c5ea6e5b29d6e48">Ausgabeformate</title>
               </block-title>
               <column-wide-element>
            <p>Aus einer XML Quelle können auch leicht weitere Format erzeugt werden, bspw. ePub. EPUB<footnote>
                  <desc>https://de.wikipedia.org/wiki/EPUB</desc>
                  <add>EPUB ist ein Dokumentformat für Ebook-Reader.</add>
               </footnote> ist das Standardformat für eBooks und neben Tags zur Formatierung für den Content, gibt es bspw. auch Anweisungen zum Erzeugen des Inhaltsverzeichnisses oder anderer Navigationsstrukturen.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Weitere gängige Formate sind neben dem oben gezeigten veralteten WML Format, elektronische Ausgabe-Formate wie: CHM<footnote>
                  <desc>https://de.wikipedia.org/wiki/CHM_(Dateiformat</desc>
                  <add>Die alte Windows-Hilfe. Läuft immer noch im Bereich Maschinenbau auf gekoppelten Rechnern mit alter Windows Software)</add>
               </footnote>, EclipseHelp<footnote>
                  <desc>https://www.ibm.com/developerworks/library/os-echelp/index.html</desc>
                  <add>Das Hilfe-Format der Eclipse Rich Client Plattform. Eclipse wird hauptsächlich von Programmierern als Editor benutzt</add>
               </footnote>, JavaHelp<footnote>
                  <desc>https://en.wikipedia.org/wiki/JavaHelp</desc>
                  <add>Damit wird bspw. das Java API formatiert als Webseite ausgegeben</add>
               </footnote>, ..., Print-Ausgabe Formate, wie PDF oder Adobe Framemaker<footnote>
                  <desc>https://de.wikipedia.org/wiki/FrameMaker</desc>
                  <add>Mit Framemaker kann man manuell gesetzte Publikationen erstellen. Über Templates lässt sich das Layout aber auch automatisieren</add>
               </footnote>,  oder XML Standard Austauschformate, wie DITA, S1000D, PI-MOD<footnote>
                  <desc>https://www.i4icm.de/forschungstransfer/pi-mod/</desc>
                  <add>PI-Mod ist ein Informationsmodell, das am KIT (Uni Karlsruhe) entwickelt wird/wurde</add>
               </footnote>, JATS<footnote>
                  <desc>https://de.wikipedia.org/wiki/Journal_Article_Tag_Suite</desc>
                  <add>JATS ist ein sehr verbreitetes Informationsmodell im Bereich wissenschaftlicher Artikel und Fachliteratur</add>
               </footnote>
               <xe>
                  <first criterion="Standards">Standards</first>
                  <second criterion="JAT">JAT</second>
               </xe> oder TEI<footnote>
                  <desc>https://de.wikipedia.org/wiki/Text_Encoding_Initiative</desc>
               </footnote>
               <xe>
                  <first criterion="Standards">Standards</first>
                  <second criterion="TEI">TEI</second>
               </xe>.</p>
         </column-wide-element>
               <block-title>
                  <title id="4135a624-a45f-433c-8d0b-18416fe3765fd6e55">Menschenlesbar machen</title>
               </block-title>
               <column-wide-element>
            <p>Kryptische XML Log-, Daten- oder Konfigurationsfiles<xe>
                  <first criterion="Anwendungsgebiete">Anwendungsgebiete</first>
                  <second criterion="Log- und Konfigurationsdaten">Log- und Konfigurationsdaten</second>
               </xe> können leicht mit XSLT menschenlesbar formatiert werden. &#8232;Ein Arbeitskollege im neuen Job kam kürzlich auf mich zu, ob ich um eine Möglichkeit wüsste, wie man sein kryptisches Datenfile für einen Übersetzungsdienst menschenlesbar formatieren könnte - XSLT to the Rescue:</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim><color name="green">&lt;?xml </color><color name="green">version</color>="1.0" <color name="green">encoding</color>="UTF-8"?<color name="green">&gt;</color>?<color name="green">&lt;?xml-stylesheet </color><color name="green">type</color>="text/xsl" <color name="green">href</color>="de.xsl"?<color name="green">&gt;</color>
<color name="green">&lt;jcr:root </color><color name="green">xmlns:sling</color>="http://sling.apache.org/jcr/sling/1.0" <color name="green">xmlns:jcr</color>="http://www.jcp.org/jcr/1.0" <color name="green">xmlns:mix</color>="http://www.jcp.org/jcr/mix/1.0" <color name="green">xmlns:nt</color>="http://www.jcp.org/jcr/nt/1.0" <color name="green">jcr:language</color>="de" <color name="green">jcr:mixinTypes</color>="[mix:language]" <color name="green">jcr:primaryType</color>="sling:Folder"<color name="green">&gt;</color>
<color name="green">&lt;b_manual </color><color name="green">jcr:primaryType</color>="sling:MessageEntry" <color name="green">sling:message</color>="Bedienungsanleitung"/<color name="green">&gt;</color>
  <color name="green">&lt;b_warning </color><color name="green">jcr:primaryType</color>="sling:MessageEntry" <color name="green">sling:message</color>="Warnung"/<color name="green">&gt;</color>
  <color name="green">&lt;b_danger </color><color name="green">jcr:primaryType</color>="sling:MessageEntry" <color name="green">sling:message</color>="Vorsicht"/<color name="green">&gt;</color>
  <color name="green">&lt;b_note </color><color name="green">jcr:primaryType</color>="sling:MessageEntry" <color name="green">sling:message</color>="Notiz"/<color name="green">&gt;</color>
  <color name="green">&lt;b_notice </color><color name="green">jcr:primaryType</color>="sling:MessageEntry" <color name="green">sling:message</color>="Hinweis"/<color name="green">&gt;</color>
  [...]</verbatim>
         </page-wide-element>
               <column-wide-element>
            <p>Mit einem eingehängten XSLT Stylesheet de.xsl wird so ein XML Datenfile schön formatiert als Tabelle angezeigt:</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim><color name="green">&lt;?xml </color><color name="green">version</color>="1.0" <color name="green">encoding</color>="iso-8859-1"?<color name="green">&gt;</color>
<color name="green"><bg>&lt;xsl:stylesheet</bg> </color><color name="green">version</color>="1.0" <color name="green">xmlns:xsl</color>="http://www.w3.org/1999/XSL/Transform" <color name="green">xmlns:jcr</color>="http://www.jcp.org/jcr/1.0" <color name="green">xmlns:sling</color>="http://sling.apache.org/jcr/sling/1.0"<color name="green">&gt;</color>
  
  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="jcr:root"<color name="green">&gt;</color>
    <color name="green">&lt;html&gt;</color>
      <color name="green">&lt;table </color><color name="green">border</color>="1" <color name="green">cellpadding</color>="5" <color name="green">cellspacing</color>="5"<color name="green">&gt;</color>
        <color name="green"><bg>&lt;xsl:apply-templates/&gt;</bg></color>
      <color name="green">&lt;/table&gt;</color>
    <color name="green">&lt;/html&gt;</color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>
  
  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="*"<color name="green">&gt;</color>
    <color name="green">&lt;tr&gt;</color>
      <color name="green">&lt;td&gt;</color>
        <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="concat(count(preceding::*[@sling:message]) <color name="green"></color>= <color name="green"></color>=<color name="green">&gt;</color>
      <color name="green">&lt;/td&gt;</color>
      <color name="green">&lt;td&gt;</color>
        <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="name()"/<color name="green">&gt;</color>
      <color name="green">&lt;/td&gt;</color>
      <color name="green">&lt;td </color><color name="green">contenteditable</color>="true"<color name="green">&gt;</color>
        <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="@sling:message"/<color name="green">&gt;</color>
      <color name="green">&lt;/td&gt;</color>
    <color name="green">&lt;/tr&gt;</color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>
<color name="green"><bg>&lt;/xsl:stylesheet&gt;</bg></color></verbatim>
         </page-wide-element>
               <column-wide-element>
            <p>Hängt man an dieses Beispiel noch ein bisschen Javascript Logik und macht die Felder für die Übersetzungen mittels des HTML5 contenteditable Attributs editierbar, dann bräuchte man nur noch eine Rücktransformation HTML nach XML und hätte schon einen kleinen webbasierten XML Editor gebaut. Genau nach diesem Prinzip funktionieren einige aktuelle XML Editoren.</p>
         </column-wide-element>
               <block-title>
                  <title id="5ab04d47-2964-42e4-8002-ba2b7828111bd6e68">Diagramme</title>
               </block-title>
               <column-wide-element>
            <p>Nachdem eine SVG<xe>
                  <first criterion="Standards">Standards</first>
                  <second criterion="SVG">SVG</second>
               </xe> Grafik<xe>
                  <first criterion="Anwendungsgebiete">Anwendungsgebiete</first>
                  <second criterion="Visualisierung">Visualisierung</second>
               </xe> im XML Format vorliegt kann diese auch direkt aus XML Daten mittels XSLT erzeugt werden.&#8232;Über das HTML5 &lt;svg&gt; Element kann so eine erzeugte Grafik inline in das ebenfalls durch das XSLT generierte HTML Dokument eingebunden werden.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Betrachten wir unser Beispiel von oben, erweitert um drei neue &lt;block&gt; Elemente:</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim><color name="green">&lt;?xml </color><color name="green">version</color>="1.0" <color name="green">encoding</color>="UTF-8"?<color name="green">&gt;</color>
<color name="green">&lt;?xml-stylesheet </color><color name="green">type</color>="text/xsl" <color name="green">href</color>="chart.xsl" <color name="green"></color>=<color name="green">&gt;</color>
<color name="green">&lt;document&gt;</color>
  <color name="green">&lt;title&gt;</color>Das ultimative Zwei-Kapitel Dokument<color name="green">&lt;/title&gt;</color>
  <color name="green">&lt;chapter&gt;</color>
    <color name="green">&lt;title&gt;</color>Kapitel 1<color name="green">&lt;/title&gt;</color>
    <color name="green">&lt;intro&gt;</color>In Kapitel 1 wird kurz gesagt was Sache ist.<color name="green">&lt;/intro&gt;</color>
    <color name="green">&lt;content&gt;</color>Um es kurz zu machen, wie der Hase läuft steht in Kapitel 2.<color name="green">&lt;/content&gt;</color>
  <color name="green">&lt;/chapter&gt;</color>
  <color name="green">&lt;chapter&gt;</color>
    <color name="green">&lt;title&gt;</color>Kapitel 2<color name="green">&lt;/title&gt;</color>
    <color name="green">&lt;intro&gt;</color>Hier wird erklärt, wie der Hase läuft.<color name="green">&lt;/intro&gt;</color>
    <color name="green">&lt;content&gt;</color>Im Prinzip ist es ganz einfach. Betrachten wir doch drei gelbe Blöcke:
    <color name="green">&lt;/content&gt;</color>
    <color name="green">&lt;block/&gt;</color>
    <color name="green">&lt;block/&gt;</color>
    <color name="green">&lt;block/&gt;</color>
  <color name="green">&lt;/chapter&gt;</color>
<color name="green">&lt;/document&gt;</color></verbatim>
         </page-wide-element>
               <column-wide-element>
            <p>Wenn wir das XSLT Stylesheet von oben noch um eine Regel für das neue &lt;block&gt; Element ergänzen, so wie hier:</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim><color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="block"<color name="green">&gt;</color>
   <color name="green">&lt;svg </color><color name="green">style</color>="background-color:yellow" <color name="green">width</color>="30" <color name="green">height</color>="30" <color name="green">xmlns:xlink</color>="http://www.w3.org/1999/xlink" <color name="green">xmlns</color>="http://www.w3.org/2000/svg"/<color name="green">&gt;</color>
  <color name="green">&lt;br/&gt;</color>
  <color name="green">&lt;br/&gt;</color>
<color name="green"><bg>&lt;/xsl:template&gt;</bg></color></verbatim>
         </page-wide-element>
               <column-wide-element>
            <p>Dann erhalten wir drei schön formatierte gelbe SVG Blöcke.</p>
         </column-wide-element>
               <column-wide-element>
            <p>
                  <b>Weiterführende Links:</b>
               </p>
         </column-wide-element>
               <column-wide-element>
            <ul>
                  <li>
                     <p>Client-side image generation with SVG and XSLT<footnote>
                        <desc>http://surguy.net/articles/client-side-svg.xml</desc>
                     </footnote>
                  </p>
                  </li>
                  <li>
                     <p>Knotentyp Visualisierung im Apache Jack Rabbit Projekt<footnote>
                        <desc>http://jackrabbit.apache.org/jcr/node-type-visualization.html</desc>
                     </footnote>
                  </p>
                  </li>
               </ul>
         </column-wide-element>
            
         
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="d2e498" ismodule="no">
         
            <title>
               <title id="47f2fdc5-eca0-4e9b-bfc8-f2fbd76403d8">Professionelle XML Verarbeitung</title>
            </title>
            
               <column-wide-element>
            <p>Vom Single-Source Publishing bis zur Generierung von Java Code aus Klassendiagrammen.</p>
         </column-wide-element>
               <block-title>
                  <title id="012db970-b72c-425a-a3ad-3e817e002282d6e7">Single Source Publishing</title>
               </block-title>
               <column-wide-element>
            <p>Gängige Formate in der Technischen Dokumentation sind elektronische Ausgabe-Formate wie: CHM, EclipseHelp, JavaHelp, ePub, ..., Print-Ausgabe Formate, wie PDF oder Adobe Framemaker, oder XML Standard Austauschformate, wie DITA, S1000D, PI-MOD<xe>
                  <first criterion="Standards">Standards</first>
                  <second criterion="PI-MOD">PI-MOD</second>
               </xe> oder TEI<xe>
                  <first criterion="Standards">Standards</first>
                  <second criterion="TEI">TEI</second>
               </xe>.
Vorteile:</p>
         </column-wide-element>
               <column-wide-element>
            <ul>
                  <li>
                     <p>Bei einer Änderung in der XML Quelle werden auch automatisch alle anschließenden Formate aktualisiert.</p>
                  </li>
                  <li>
                     <p>Strikte Trennung von Content ( / Semantik) und Layout/Design.</p>
                  </li>
                  <li>
                     <p>Auf der XML Quelle sind XML Features möglich, wie:
	
		Modularisierung: Erlaubt die fein-granulare Wiederverwendung<xe>
                        <first criterion="Konzepte">Konzepte</first>
                        <second criterion="Wiederverwendung">Wiederverwendung</second>
                     </xe> von Content-Bausteinen, sowie das Verlinken, Filtern, Suchen und Exportieren derselben.
		Generalisierung<xe>
                        <first criterion="Konzepte">Konzepte</first>
                        <second criterion="Generalisierung und Spezialisierung">Generalisierung und Spezialisierung</second>
                     </xe> ist ein DITA Konzept, welches die Wiederverendung von angepassten Topics in anderen DITA Systemen ermöglicht.
		Gültigkeiten<xe>
                        <first criterion="Konzepte">Konzepte</first>
                        <second criterion="Gültigkeitem">Gültigkeitem</second>
                     </xe> erlauben die bedingte Anwendung von Content-Bestandteilen auf Satz und Wort-Ebene.
		Versionierung<xe>
                        <first criterion="Konzepte">Konzepte</first>
                        <second criterion="Versionierung">Versionierung</second>
                     </xe> und Diffing<xe>
                        <first criterion="Konzepte">Konzepte</first>
                        <second criterion="Diffing">Diffing</second>
                     </xe> - Vergleich von Änderungen zwischen Versionen
		Intelligente Querverweise<xe>
                        <first criterion="Konzepte">Konzepte</first>
                        <second criterion="Intelligente Querverweise">Intelligente Querverweise</second>
                     </xe>: Ein Link zwischen einzelnen XML Topics  bleibt versionstreu.
		Automatischer Satz, inkl. Zusamenhalte- und Trennregeln für Seiten, Absätze und Blöcke (Listen, Tabellen, etc).
	
	</p>
                  </li>
                  <li>
                     <p>Veraltete Formate können ausgetauscht werden, ohne dass der Content geändert werden muss oder verlorengeht.</p>
                  </li>
                  <li>
                     <p>Die XML Quelle kann ohne Aufbereitung in anderen Systemen wiederverwendet werden.</p>
                  </li>
                  <li>
                     <p>Es gibt weit verbreitete Standards zur Struktur der XML Quelle.</p>
                  </li>
                  <li>
                     <p>Nur das XML muss in der Datenhaltung persistiert werden</p>
                  </li>
                  <li>
                     <p>Es gibt spezialisierte XML Datenbanken, die besonders gut auf Baumstrukturen arbeiten. (Dokumente sind per se baum-strukturiert und sind eigentlich für eine relationale Datenbank ungeignet)</p>
                  </li>
               </ul>
         </column-wide-element>
               <column-wide-element>
            <p>Die Redaktionssysteme der Technischen Dokumentation der führenden Hersteller in Deutschland haben XML unter der Haube und setzen auf die Single-Source Strategie.</p>
         </column-wide-element>
               <block-title>
                  <title id="c2ea4ffe-bfc9-4c96-b5d9-d793083fc510d6e39">Code Generierung</title>
               </block-title>
               <column-wide-element>
            <p>Nachdem man bei XSLT im Format der Ausgabe frei ist, kann auch direkt Plain-Text mit  XSLT Regeln generiert werden. Daher liegt es nahe sich jegliche Form von Quelltext aus einer XML Repräsentation erzeugen zu lassen.<xe>
                  <first criterion="Anwendungsgebiete">Anwendungsgebiete</first>
                  <second criterion="Code Generierung">Code Generierung</second>
               </xe>
            </p>
         </column-wide-element>
               <column-wide-element>
            <p>Beispielsweise speichern gängige CASE Tools (Computer Aided Software Engineering) UML Diagramme im XML Format ab, so z.B. <b>ArgoUML</b>
               <footnote>
                  <desc>http://argouml.tigris.org</desc>
                  <add>ArgoUML ist ein freier UML Editor</add>
               </footnote>.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Diese Klassendiagramme lassen sich mittels XSLT direkt in Java-Code transformieren, wie z.B. in einem kleinen Open Source Projekt (aus vergangenen Tagen) :
<b>Butterfly Code Generator</b>
               <footnote>
                  <desc>http://butterflycode.sourceforge.net</desc>
                  <add>Damit kann man sich Code aus UMl Klassendiagrammen generieren lassen, natürlich XSLT basiert</add>
               </footnote>
            </p>
         </column-wide-element>
               <column-wide-element>
            <p>Es gibt aber auch einen schönen Artikel dazu im Java World Journal<footnote>
                  <desc>https://www.javaworld.com/article/2073998/java-web-development/generate-javabean-classes-dynamically-with-xslt.html</desc>
                  <add>Weiterführende Lektüre zum Thema Code-Generierung mit XSLT</add>
               </footnote>.</p>
         </column-wide-element>
               <block-title>
                  <title id="bd0e17e7-dce2-45a0-b5eb-90297e678e88d6e56">Migrationen und Konvertierungen</title>
               </block-title>
               <column-wide-element>
            <p>Für jede erdenkliche Art der Migration<xe>
                  <first criterion="Anwendungsgebiete">Anwendungsgebiete</first>
                  <second criterion="Migration">Migration</second>
               </xe> eines XML Datenbestands oder eines Datenbank-Dumps / -Exports im XML Format, zwischen Produktversionen oder zwischen Dienstleister- und Dienstnutzer-Systemen bietet sich XSLT als Mittel der Wahl zur schnellen und komplexen Transformation an.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Dabei ist zu beachten, dass XSLT besonders schnell und gut auf verschachtelten Strukturen arbeitet. Entartet ein Baum zur Liste und/oder sind nur geringe Strukturanpassungen notwendig, wird man sich mit einem schnellen SAX Parser leichter tun. 
Mittels der XSLT3.0 Streaming Option können auch sehr große XML Quellen (Big Data) verarbeitet werden. Saxon bietet bspw. diese Streaming Option<footnote>
                  <desc>http://www.saxonica.com/html/documentation/sourcedocs/streaming/</desc>
                  <add>Streaming ist eine Technik zur Verarbeitung großer XML Daten - Stichwort Big Data - mit XSLT3.0</add>
               </footnote>.</p>
         </column-wide-element>
            
         
      </chapter>
   </chapter>
   <chapter hyphenation="yes" chapterpage="no" id="d2e619" ismodule="no">
      
         <title>
            <title id="6a6d03c2-e2be-4b5f-b515-ed4ec3132dd1">Wichtige Konzepte</title>
         </title>
         
            <column-wide-element>
         <p>XSLT und XQuery erlauben es Probleme auf viele verschiedene Arten zu lösen. Sicherlich wird jeder Programmierer im Laufe der Zeit seinen eigenen Stil entwickeln. Das kommt nicht zuletzt daher, dass man als XSLT Entwickler in vielen Firmen eine Expertenrolle einnimmt.</p>
      </column-wide-element>
            <column-wide-element>
         <p>Umso wichtiger ist es, sich an allgemeine Konzepte, Muster und Best Practices zu halten, um einen schwer wartbaren Wildwuchs zu vermeiden.</p>
      </column-wide-element>
            <column-wide-element>
         <p>Auf den folgenden Seiten wird versucht einige dieser Konzepte zusammenzutragen und mit eigenen Erfahrungen und Ideen zu kombinieren.</p>
      </column-wide-element>
            <column-wide-element>
         <p>Es wird weder der Anspruch auf Vollständigkeit noch auf Korrektheit dieser Informationen erhoben. Das Kapitel soll vielmehr als Denkanstoß mit hoffentlich einigen verwertbaren Ideen dienen.</p>
      </column-wide-element>
         
      
      <chapter hyphenation="yes" chapterpage="no" id="d2e645" ismodule="no">
         
            <title>
               <title id="c16fd330-a145-443c-bf0a-2ca245527453">Push vs. Pull Stylesheets </title>
            </title>
            
               <column-wide-element>
            <p>XSLT ist eine ereignisgesteuerte,<xe>
                  <first criterion="Konzepte">Konzepte</first>
                  <second criterion="Push vs. Pull">Push vs. Pull</second>
               </xe> regelbasierte Umgebung zur Konvertierung von XML Daten. Gerade der Vorteil des regelbasierten Ansatzes ist vielen Entwicklern nicht bewusst, und es entsteht Quellcode der aussieht, wie mit XPath angereicherter PHP Code.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Ich frage mich an dieser Stelle immer, wieso nimmt man dann überhaupt XSLT, wenn man keine Template-Match Regeln verwendet, oder nur spärlich verwendet?</p>
         </column-wide-element>
               <column-wide-element>
            <p>Um diesen Umstand aufzuklären ist ein bisschen Theorie notwendig:</p>
         </column-wide-element>
               <page-wide-element>
            <figure pdfwidth="page">
                  <column-wide-element>
                  <subtitle>Pull Stylesheet</subtitle>
               </column-wide-element>
                  <desc id="a9881b7f-2dd8-4c82-90e3-94ca2f4518d0d6e13">Beim "Pull" werden Elemente in der Quellinstanz selektiert und an einer passenden Stelle in der Zielinstanz eingefügt. Diese Vorgehensweise ist vergleichbar mit derer von Template-Engines, wie JSP oder ASP. Das kann in mehreren Stufen erfolgen, bis schrittweise die Quellinstanz in die finale Zielinstanz überführt wurde.</desc>
                  <img src="./client/data/5b73f348-0058-45e0-82f7-c3de72ec5d41/pull.svg"/>
               </figure>
         </page-wide-element>
               <page-wide-element>
            <figure pdfwidth="page">
                  <column-wide-element>
                  <subtitle>Push Stylesheet</subtitle>
               </column-wide-element>
                  <desc id="00525628-43b6-4f5d-8a30-803c0695a264d6e19">Beim "Push" werden die Quelldaten schrittweise in die Zieldaten konvertiert. Diese Vorgehensweise kann explorativ erfolgen und beim Transformieren in einen Zwischenschritt entstehen Erkenntnisse, die bei der Weiterverarbeitung nützlich sind. Merke: XSLT steht für eXtensible Stylesheet Transformation.</desc>
                  <img src="./client/data/5b73f348-0058-45e0-82f7-c3de72ec5d41/pusch.svg"/>
               </figure>
         </page-wide-element>
               <column-wide-element>
            <p>Das bisher Gesagte verdeutlicht zwar den "Pull" Ansatz, was genau aber ge"pusht" wird, ist vermutlich noch unklar. Betrachten wir XML in der Baumdarstellung.</p>
         </column-wide-element>
               <page-wide-element>
            <figure pdfwidth="page">
                  <column-wide-element>
                  <subtitle>Transformation des Quellbaums in den Zielbaum</subtitle>
               </column-wide-element>
                  <desc id="acae0d21-2f0b-40f6-8f64-5c3fa3f0bf59d6e27">Der XSLT Prozessor unternimmt einen Tiefensuchlauf<xe>
                     <first criterion="Tiefensuchlauf">Tiefensuchlauf</first>
                  </xe> und überprüft bei jedem Knoten den er betritt, ob in seiner Regelbasis eine Regel existiert, die auf diesen Knoten "matched". Dabei gibt es drei grundsätzliche Möglichkeiten, wie die Knoten des Quellbaums in den Zielbaum kopiert - oder eben nicht kopiert - werden können.</desc>
                  <img src="./client/data/5b73f348-0058-45e0-82f7-c3de72ec5d41/push.svg"/>
                  <legend>
                     <leg-entry id="f9455559-67ce-4901-9444-ccdd01d21c56d6e43">
                        <leg-pos>
                           <p>Remove</p>
                        </leg-pos>
                        <leg-name>
                           <p>Beim Betreten einer leeren Match-Regel wird ein Teilbaum nicht kopiert</p>
                        </leg-name>
                     </leg-entry>
                     <leg-entry id="4f2540c3-a78f-49dc-a2b3-3e3d5c7d1c16d6e50">
                        <leg-pos>
                           <p>Bypass</p>
                        </leg-pos>
                        <leg-name>
                           <p>Beim Betreten einer Match-Regel ohne Kopieranweisung wird der Knoten übersprungen</p>
                        </leg-name>
                     </leg-entry>
                     <leg-entry id="f38f09a2-6878-42f6-bcfe-621ca2fc7fa5d6e57">
                        <leg-pos>
                           <p>Push</p>
                        </leg-pos>
                        <leg-name>
                           <p>Durch gezielte Auswahl einer Knotenmenge auf der Descendant-Achse wird der XSLT Prozessor in eine bestimmte Richtung ge"pusht".</p>
                        </leg-name>
                     </leg-entry>
                  </legend>
               </figure>
         </page-wide-element>
               <column-wide-element>
            <p>Pull-Stylesheets werden gewöhlich mit <b>for-each</b> Loops programmiert. Dieser Ansatz ist meiner Ansicht nach gebräuchlich, wenn keine großen DTD Änderungen zu erwarten sind, der XML Baum flach strukturiert ist und die Anforderungen an die  Knvertierung relativ einfach sind, bspw. beim Auswerten / Konvertieren von Konfigurationsdateien. In alles anderen Fällen sind Push-Stylesheets vorzuziehen, d.h. möglichst wenige <b>for-each</b> loops und möglichst viele <b>Template-Match</b> Regeln.</p>
         </column-wide-element>
            
         
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="d2e766" ismodule="no">
         
            <title>
               <title id="b8539c31-c176-46bb-b028-e811b2decfbe">Eindeutigkeit der Regelbasis</title>
            </title>
            
               <column-wide-element>
            <p>Die Regelbasis<xe>
                  <first criterion="Konzepte">Konzepte</first>
                  <second criterion="Regelbasis">Regelbasis</second>
               </xe> der XSLT ereignisgesteuerten Laufzeitumgebung (Wir erinnern uns: Jedes Mal wenn der XSLT Prozessor einen Knoten betritt, wird ein Event ausgelöst) kann unendlich viele Regeln aufnehmen. Für die Vollständigkeit, Eindeutigkeit und Konsistenz der Regelbasis ist der Programmierer selbst verantwortlich.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Um die Eindeutigkeit der Regeln zu gewährleisten,  gibt es verschiedene Mechanismen.</p>
         </column-wide-element>
               <block-title>
                  <title id="e16576ad-fbf7-41d7-a23e-deb174c6b176d6e9">Reihenfolge der Match-Regeln</title>
               </block-title>
               <column-wide-element>
            <p>Im Normalfall sollte auf einen bestimmten Knoten in einem bestimmten Szenario genau eine Regel matchen. Falls es einen Konflikt gibt, wird zumindest bei Saxon diejenige Regel herangezogen, die im Stylesheet zuletzt deklariert wurde.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Diesen Umstand zu kennen, ist genau dann wichtig, wenn man einen bestehenden Stylesheet-Code übernehmen muss. Getreu dem Motto "Never change a running system" sollte man die Sache diesbzgl. sehr behutsam aufräumen.</p>
         </column-wide-element>
               <block-title>
                  <title id="c35ab440-7d81-4466-a34f-32545cec227ad6e14">Präzedenz der Auswertung</title>
               </block-title>
               <column-wide-element>
            <p>Match-Regeln<xe>
                  <first criterion="Konzepte">Konzepte</first>
                  <second criterion="Match-Regeln">Match-Regeln</second>
               </xe> werden gemäß ihrer Spezifität sortiert und diejenige, die auf einem Knoten in einem bestimmten Szenario am besten zutrifft wird zur Auswertung herangezogen. Grds. werden die Regeln anhand folgender Kriterien sortiert:<xe>
                  <first criterion="Konzepte">Konzepte</first>
                  <second criterion="Priorität">Priorität</second>
               </xe>
            </p>
         </column-wide-element>
               <column-wide-element>
            <procedure type="ol">
                  <step>
                     <action>
                        <p>Importierte Template Regeln haben immer eine niedrigere Priorität als die Regeln des importierenden Stylesheets.</p>
                     </action>
                  </step>
                  <step>
                     <action>
                        <p>Templates mit einem höheren Priority Attribut haben Vorrang.</p>
                     </action>
                  </step>
                  <step>
                     <action>
                        <p>Templates ohne Priorität bekommen automatisch eine Default-Priorität. Die höchste Default-Priorität ist 0.5.</p>
                     </action>
                  </step>
                  <step>
                     <action>
                        <p>Diese Default Priorität errechnet sich anhand der Bedingungen oder Wildcards, die an einen Match-Regel geknüpft sind: </p>
                        <ul>
                           <li>
                              <p>Wenn mehrere Templates matchen, dann wird das am meisten spezifische zur Auswertung herangezogen.</p>
                           </li>
                           <li>
                              <p>Das am meisten spezifische Template wird anhand der Prioritäten berechnet.</p>
                           </li>
                           <li>
                              <p>Einfache Elementnamen (z.B. "para") haben Prio 0.</p>
                           </li>
                           <li>
                              <p>Wildcards (z.B. *, @*) haben Priorität -0.25</p>
                           </li>
                           <li>
                              <p>Knoten-Tests für andere Knoten (e.g. comment(), node(), etc. ) haben Priorität -0.5</p>
                           </li>
                           <li>
                              <p>In allen anderen Fällen ist die Prio 0.5.</p>
                           </li>
                        </ul>
                        <p>Beispiele:</p>
                        <ul>
                           <li>
                              <p>para -&gt; 0</p>
                           </li>
                           <li>
                              <p>h:* -&gt; -0.25</p>
                           </li>
                           <li>
                              <p>* -&gt; -0.25</p>
                           </li>
                           <li>
                              <p>node() -&gt; -0.25</p>
                           </li>
                           <li>
                              <p>contents/para -&gt; 0.5</p>
                           </li>
                           <li>
                              <p>contents/* -&gt; 0.5</p>
                           </li>
                        </ul>
                     </action>
                  </step>
                  <step>
                     <action>
                        <p>Mit einer Kommandozeilen-Option kann bei Saxon festgelegt werden, dass die Transformation abbricht, sobald es einen Konflikt bei der Regelauswertung<xe>
                           <first criterion="Konzepte">Konzepte</first>
                           <second criterion="Regelauswertung">Regelauswertung</second>
                        </xe> gibt.</p>
                     </action>
                  </step>
               </procedure>
         </column-wide-element>
               <block-title>
                  <title id="5b4364ca-516c-4edb-a9e8-3de574a18cc2d6e19">Import Präzendenz und Default-Regel</title>
               </block-title>
               <column-wide-element>
            <p>Wie in der obigen Sektion unter Punkt 1. angegeben, haben alle<xe>
                  <first criterion="Konzepte">Konzepte</first>
                  <second criterion="Import Präzedenz">Import Präzedenz</second>
               </xe> Regeln in einem importierten Stylesheet eine geringere Priorität als im importierenden Stylesheet. Diesen Umstand kann man sich zunutze machen, um eine Default-Regel<xe>
                  <first criterion="Konzepte">Konzepte</first>
                  <second criterion="Default-Regel">Default-Regel</second>
               </xe> einzubinden, bspw:</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim><color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="*" <color name="green">mode</color>="#all"/<color name="green">&gt;</color></verbatim>
         </page-wide-element>
               <column-wide-element>
            <p>Da sie sich in einem importierten Stylesheet befindet, hat sie geringere Priorität als alle anderen Regeln und greift nur dann, wenn für einen betretenen Knoten keine andere Match-Regel definiert ist.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Das ist z.B. praktisch, um nicht "gehandelte" Element zu identifizieren - dazu wäre die obige Regel nicht leer, sondern würde bspw. einen gelb markierten Warntext direkt in das Ausgabeformat schreiben.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Eine leere Default-Regel ist dagegen gut, wenn bspw. in einer XML-2-XML Migration automatisch Knoten im XML Baum abgetrennt werden sollen, für die keine Match-Regel existiert.</p>
         </column-wide-element>
               <block-title>
                  <title id="be710deb-554e-4962-beb9-9de58d386c7fd6e24">Prioritäten</title>
               </block-title>
               <column-wide-element>
            <p>Wie oben schon verdeutlicht<xe>
                  <first criterion="Konzepte">Konzepte</first>
                  <second criterion="Priorität">Priorität</second>
               </xe> werden alle Match-Regeln mit einer Priorität ausgestattet. Der Stylesheet-Entwickler hat die Möglichkeit diese Priorität zu überschreiben. Dazu wird das Attribut @priority an der Match-Regel verwendet. Ein Use-Case für die Prioritäten wäre bspw. folgendes Szenario:</p>
         </column-wide-element>
               <column-wide-element>
            <ul>
                  <li>
                     <p>Die Eingabeinstanz soll in einer Vorprozessierung gefiltert werden.</p>
                  </li>
                  <li>
                     <p>Dabei sollen Seminar-Elemente markiert werden, die nicht besonderen Bedingungen entsprechen:</p>
                     <ul>
                        <li>
                           <p>Das Seminar-Element hat ein Feld "Ende-Datum" das abgelaufen ist.</p>
                        </li>
                        <li>
                           <p>Am Seminar-Element sind mehrere Dozenten angestellt, obwohl das Seminar-Element vom Type "Single" ist.</p>
                        </li>
                        <li>
                           <p>em Seminar-Element ist kein Dozent zugeordnet.</p>
                        </li>
                     </ul>
                  </li>
                  <li>
                     <p>Sicherlich kann es Seminar-Elemente geben, die alle drei Bedingungen erfüllen. Um das Error-Log aber nicht zu überfüllen, sollen die Filter nach ihren Prioritäten ausgeführt werden.</p>
                  </li>
               </ul>
         </column-wide-element>
               <column-wide-element>
            <p>In Templates überführt, könnte diese Anforderung so umgsetzt werden:</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim><color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="Seminar[Ende-Datum/xs:date(.) <color name="green"></color>= <color name="green"></color>= <color name="green">priority</color>="30" <color name="green">mode</color>="filter-network"<color name="green">&gt;</color> 
  <color name="green"><bg>&lt;xsl:element</bg> </color><color name="green">name</color>="Filtered-Seminar" <color name="green">namespace</color>="{namespace-uri()}"<color name="green">&gt;</color> 
    <color name="green"><bg>&lt;xsl:attribute</bg> </color><color name="green">name</color>="reason"<color name="green">&gt;</color>termed-seminar<color name="green"><bg>&lt;/xsl:attribute&gt;</bg></color> 
    <color name="green"><bg>&lt;xsl:apply-templates</bg> </color><color name="green">select</color>="node()|@*" <color name="green">mode</color>="filter-network"/<color name="green">&gt;</color> 
  <color name="green"><bg>&lt;/xsl:element&gt;</bg></color> 
<color name="green"><bg>&lt;/xsl:template&gt;</bg></color> 

<color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="Seminar[Type <color name="green"></color>= <color name="green"></color>= <color name="green"></color>= <color name="green"></color>= <color name="green"></color>= <color name="green"></color>= <color name="green">priority</color>="20" <color name="green">mode</color>="filter-network"<color name="green">&gt;</color> 
  <color name="green"><bg>&lt;xsl:element</bg> </color><color name="green">name</color>="filtered-Seminar" <color name="green">namespace</color>="{namespace-uri()}"<color name="green">&gt;</color> 
    <color name="green"><bg>&lt;xsl:attribute</bg> </color><color name="green">name</color>="reason"<color name="green">&gt;</color>dozenten-count<color name="green"><bg>&lt;/xsl:attribute&gt;</bg></color> 
    <color name="green"><bg>&lt;xsl:apply-templates</bg> </color><color name="green">select</color>="node()|@*" <color name="green">mode</color>="filter-network"/<color name="green">&gt;</color> 
  <color name="green"><bg>&lt;/xsl:element&gt;</bg></color> 
<color name="green"><bg>&lt;/xsl:template&gt;</bg></color> 

<color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="Seminar[not(dozenten/dozent)]" <color name="green">mode</color>="filter-network"<color name="green">&gt;</color> 
  <color name="green"><bg>&lt;xsl:element</bg> </color><color name="green">name</color>="filtered-Seminar" <color name="green">namespace</color>="{namespace-uri()}"<color name="green">&gt;</color> 
    <color name="green"><bg>&lt;xsl:attribute</bg> </color><color name="green">name</color>="reason"<color name="green">&gt;</color>dozenten-missing<color name="green"><bg>&lt;/xsl:attribute&gt;</bg></color> 
    <color name="green"><bg>&lt;xsl:apply-templates</bg> </color><color name="green">select</color>="node()|@*" <color name="green">mode</color>="filter-network"/<color name="green">&gt;</color> 
  <color name="green"><bg>&lt;/xsl:element&gt;</bg></color> 
<color name="green"><bg>&lt;/xsl:template&gt;</bg></color></verbatim>
         </page-wide-element>
               <block-title>
                  <title id="8950e48f-85c8-4fc8-98f7-e1f7e42ed7d5d6e29">Modus Attribute</title>
               </block-title>
               <column-wide-element>
            <p>An allen Templates<xe>
                  <first criterion="00000000"/>
                  <second criterion="00000000"/>
               </xe> hat man die Möglichkeit einen selbst deklarierten Modus anzugeben. Wenn dann der XSLT Prozessor in eine bestimmte Richtung gepusht, vgl. <doclink class="5b73f348-0058-45e0-82f7-c3de72ec5d41"
                        id="41345870-4165-4a45-9ea5-e2c80dd1bf0a"
                        type="topic">Push vs. Pull Stylesheets</doclink>, wird, werden nur diejenigen Regeln zur Auswertung herangezogen, die im selben Modus sind, wie der apply-templates Call.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Beispielsweise möchte man die Titel im Kapitel anders behandeln als die Kapitel im Inhaltsverzeichnis, denn im TOC sollen z.B. keine Fussnoten-Marker angezeigt werden. </p>
         </column-wide-element>
               <column-wide-element>
            <p>In Templates formuliert würde diese Anweisung folgendermassen aussehen:</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim><color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="title" <color name="green">mode</color>="toc"<color name="green">&gt;</color>
  <color name="green">&lt;div </color><color name="green">class</color>="toc-entry"<color name="green">&gt;</color>
    <color name="green"><bg>&lt;xsl:apply-templates</bg> </color><color name="green">select</color>="*[not(self::footnote)]"/<color name="green">&gt;</color>
  <color name="green">&lt;/div&gt;</color>
<color name="green"><bg>&lt;/xsl:template&gt;</bg></color>

<color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="title"<color name="green">&gt;</color>
  <color name="green">&lt;h1&gt;</color>
    <color name="green"><bg>&lt;xsl:apply-templates/&gt;</bg></color>
  <color name="green">&lt;/h1&gt;</color>
<color name="green"><bg>&lt;/xsl:template&gt;</bg></color></verbatim>
         </page-wide-element>
               <column-wide-element>
            <p>Die Generierung des TOC könnte dann folgendermassen ablaufen:</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim><color name="green"><bg>&lt;xsl:for-each</bg> </color><color name="green">select</color>="chapter"<color name="green">&gt;</color>
  <color name="green"><bg>&lt;xsl:apply-templates</bg> </color><color name="green">select</color>="title" <color name="green">mode</color>="toc"<color name="green">&gt;</color>
<color name="green"><bg>&lt;/xsl:for-each&gt;</bg></color></verbatim>
         </page-wide-element>
               <column-wide-element>
            <p>Bzgl. der Eindeutigkeit der Regelbasis kann man also auch noch anhand des Mode-Attributes Ausführungs-Gruppen bilden. Wie auch bei Angabe der Priorities kann man auf diese Weise Regeln setzen, die nie ausgeführt wurden, weil sie vllt. im Zuge einer Refactoring-Massnahme abgeklemmt und dann vergessen wurden.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Auch das mode-Attribut ist also mit Vorsicht zu geniessen und sparsam einzusetzen.</p>
         </column-wide-element>
            
         
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="d2e1054" ismodule="no">
         
            <title>
               <title id="743f34bc-c83e-49d3-9a2e-2c38d1c384c9">Namespaces</title>
            </title>
            
               <column-wide-element>
            <p>Wenn man XML Instanzen aus unterschiedlichen Quellen mit XSLT verarbeiten will, wird man sich wohl
oder übel mit dem Thema Namespaces<xe>
                  <first criterion="XML Konstrukte">XML Konstrukte</first>
                  <second criterion="Namespaces">Namespaces</second>
               </xe> (NS) auseinander setzen müssen, um Konflikte in den 
Elementselektoren zu vermeiden.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Gerade bei hintereinandergeschalteten Transformationen kann es auch passieren, 
dass unerwartet ein Namespace in die Ausgabe generiert wird,
den der folgende Prozesschritt nicht versteht, weil er dort nicht deklariert wurde.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Es gibt meherere Möglichkeiten einen Namespace im Stylesheet zu deklarieren. Gehen wir davon aus,
dass in einem Transformationsschritt genau eine Quelle und max. eine Konfigurationsdatei verarbeitet 
wird, dann kann das Stylsheet-Element bspw. so aussehen:</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim><color name="green"><bg>&lt;xsl:stylesheet</bg> </color><color name="green">version</color>="2.0" <color name="green">xmlns:xsl</color>="http://www.w3.org/1999/XSL/Transform" <color name="green">xmlns:xs</color>="http://www.w3.org/2001/XMLSchema" <color name="green">xmlns:tektur</color>="https://namespace-eigener-xslt-funktionen" <color name="green">xmlns</color>="http://namespace-in-der-xml-eingabe.com/" <color name="green">xpath-default-namespace</color>="https://namespace-der-konfigdatei.com/" <color name="green">exclude-result-prefixes</color>="#all"<color name="green">&gt;</color></verbatim>
         </page-wide-element>
               <column-wide-element>
            <ul>
                  <li>
                     <p>Der <b>xsl</b> Namespace ist klar</p>
                  </li>
                  <li>
                     <p>Der <b>xs</b> Namespace ist notwendig, wenn man typisiert arbeiten will. Er erlaubt das Einbinden von Datentypen
nach der XML Schema Spezifikation<footnote>
                        <desc>https://de.wikipedia.org/wiki/XML_Schema</desc>
                        <add>XML Schema ist der Nachfolger der DTD, ist XML basiert und erlaubt auch die die Content-Validierung in einem bestimmten Umfang</add>
                     </footnote> und somit die 
bessere Validierung des Stylesheets zur Compile-Zeit.</p>
                  </li>
                  <li>
                     <p>Die Deklaration eines eigenen geprefixten Namespaces erlaubt das Einbinden von eigenen XSLT Funktionen, 
wie z.B. auch das Einbinden der FunctX Bibliothek<footnote>
                        <desc>http://www.xsltfunctions.com/</desc>
                        <add>Sehr gut gegliederte Funktionsbibliothek von Priscilla Walmsley</add>
                     </footnote>
                  </p>
                  </li>
                  <li>
                     <p>Der Nicht-geprefixte Namespace ist der Default-Namespace und kann einen NS aus der Eingabe handeln</p>
                  </li>
                  <li>
                     <p>Das Attribut <b>xpath-default-namespace</b> gibt einen weiteren NS an, der in XPATH Funktionen verwendet werden kann.
In diesem Feld würde ich den NS einer Konfigurations- oder separaten Datendatei angeben.</p>
                  </li>
               </ul>
         </column-wide-element>
               <column-wide-element>
            <p>Mehr als einen NS in der Eingabe sollte man aus meiner Sicht bei der XML Verarbeitung nit XSLT vermeiden wenn es geht.
GGf. empfiehlt es sich, die Eingabe vor der Verabeitung zu normalisieren und Elemente ggf. umzubennen. Ansonsten kann man auch eigene Namespace-Prefixes deklarieren, wie z.B.:</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim>xmlns:ext="https://www.tekturcms.de/external-tools"</verbatim>
         </page-wide-element>
               <column-wide-element>
            <p>und diese in XPATH Selektionen und Match-Regeln verwenden.</p>
         </column-wide-element>
               <column-wide-element>
            <danger>
                  <cause>Befinden sich in den Eingabedaten Namespaces, die man in den XSLT Stylesheets nicht handelt - der Namespace kann auch nur
an einem ganz bestimmten Element hängen - so kann es bei der Transformation - ohne Fehlermeldung - zu unerwarteten Ergebnissen kommen.</cause>
                  <consequence>Deshalb sollte man die Daten im Vorfeld bzgl. Namespaces sehr genau analysieren.</consequence>
               </danger>
         </column-wide-element>
               <column-wide-element>
            <p>Namespaces in der Eingabe werden also meistens über die Kopfdeklaration in der Stylesheetdatei gehandelt, welcher Namespace
schliesslich in die Ausgabe geschrieben wird, hängt vom aktuell verarbeiteten Kontextknoten ab:</p>
         </column-wide-element>
               <column-wide-element>
            <ul>
                  <li>
                     <p>Elemente, die man erzeugt, erhalten automatisch den Default-Namespace, wenn man nicht explizit einen NS angibt.</p>
                  </li>
                  <li>
                     <p>Elemente, die man kopiert, transportieren den Namespace, den sie in der Eingabe hatten, wenn man dies nicht explizit verhindert.</p>
                  </li>
               </ul>
         </column-wide-element>
               <column-wide-element>
            <p>Um diese beiden Default Einstellungen zu steuern (bzw. zu überschreiben) gibt es mehrere Möglichkeiten:</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim><color name="green"><bg>&lt;xsl:element</bg> </color><color name="green">name</color>="{local-name()}" <color name="green">namespace</color>="{namespace-uri()}"<color name="green">&gt;</color></verbatim>
         </page-wide-element>
               <column-wide-element>
            <p>Hier wird ein Element mit dem un-geprefixten Namespace des Kontextknotens deklariert.
Wenn der Kontextknoten keinen anderen Namespace hat, so wird hierdurch sichergestellt,
dass der Default Namespace auch tatsächlich in die Ausgabe kommt.</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim><color name="green"><bg>&lt;xsl:element</bg> </color><color name="green">name</color>="meinelement" <color name="green">namespace</color>="mein-namespace"<color name="green">&gt;</color></verbatim>
         </page-wide-element>
               <column-wide-element>
            <p>Hier wird ein Element mit eigener Namespace Angabe in die Ausgabe geschrieben. Einfacher geschrieben:</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim><color name="green">&lt;mein-element </color><color name="green">xmlns</color>="mein-namespace"<color name="green">&gt;</color></verbatim>
         </page-wide-element>
               <column-wide-element>
            <p>Es gibt auch ein Attribut am xsl:copy Element,
das den Vorgang des Namespace-Kopierens steuern kann:</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim><color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="p"<color name="green">&gt;</color>
  <color name="green"><bg>&lt;xsl:copy</bg> </color><color name="green">copy-namespaces</color>="no"<color name="green">&gt;</color>
     <color name="green"><bg>&lt;xsl:apply-templates/&gt;</bg></color>
   <color name="green"><bg>&lt;/xsl:copy&gt;</bg></color>
<color name="green"><bg>&lt;/xsl:template&gt;</bg></color></verbatim>
         </page-wide-element>
               <column-wide-element>
            <p>Hier wird der Namespace am p Element nicht in die Ausgabe geschrieben. Ggf. funktiniert diese
Funktion aber mit unerwarteten Ergebnissen, deshalb sollte man sich ohne genauen Test nicht darauf verlassen.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Ebenso kann eine Default-Kopierregel verwendet werden, die es verbietet einen Namespace
weiterzuvererben:</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim><color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="@* <color name="green"></color>= <color name="green"></color>=<color name="green">&gt;</color>
   <color name="green"><bg>&lt;xsl:copy</bg> </color><color name="green">inherit-namespaces</color>="no"<color name="green">&gt;</color>
     <color name="green"><bg>&lt;xsl:apply-templates</bg> </color><color name="green">select</color>="@* <color name="green"></color>= <color name="green"></color>=<color name="green">&gt;</color>
   <color name="green"><bg>&lt;/xsl:copy&gt;</bg></color>
<color name="green"><bg>&lt;/xsl:template&gt;</bg></color></verbatim>
         </page-wide-element>
               <block-title>
                  <title id="ad139a27-9649-4c97-8f05-a62edd570cb7d6e74">Namespaces in XQuery</title>
               </block-title>
               <column-wide-element>
            <p>Während XSLT dazu dienen sollte, XML Daten in andere (XML-) Formate zu transformieren, dient XQuery 
z.B. dazu auf einer NoSQL Datenbank Daten aus unterschiedlichen Quellen
zu selektieren, zu harmonisieren und an verarbeitende Prozesse weiterzugeben.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Deshalb ist es für mich nicht so erstaunlich, dass das Namespace Konzept in XQuery irgendwie besser
funktioniert.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Damit man überhaupt Daten auf einem mit Namespaces versehenen XML Dokument selektieren
kann, müssen alle Namspaces am Anfang des XQuery Ausdrucks angegeben werden, das sieht so aus:</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim>xquery version "1.0-ml";

import <color name="brown">module </color><color name="brown">namespace </color>tektur = "http://www.teturcms.de/xquery/common" 
                                  at "common.xqy";
import <color name="brown">module </color><color name="brown">namespace </color>mem = "http://xqdev.com/in-mem-update" 
                                  at '/MarkLogic/appservices/utils/in-mem-update.xqy';
<color name="brown">declare </color><color name="brown">namespace </color>local = "https://lambdawerk.com/code/alex-sandbox/1.0";
<color name="brown">declare </color><color name="brown">namespace </color>weiredns = "https://weired-ns-in-input-data.com/weired/ns";
<color name="brown">declare </color><color name="brown">namespace </color>xs = "http://www.w3.org/2001/XMLSchema"; </verbatim>
         </page-wide-element>
               <column-wide-element>
            <p>Hier werden zuerst Funktionen aus anderen Modulen eingebunden, nämlich die in einer Datei common.xqy
im selben Verzeichnis aus der eigenen Entwicklung, sowie die Bibliothek mem aus der MArklogic
Umgebung. Danach wird ein NS local deklariert, den man verwenden wird, wenn im weiteren Verlauf
eigene XQuery Funktionen verwendet werden sollen, sowie der NS weiredns, der in den Eingabedaten
vorhanden ist. Der NS xs ist analog zum XSLT Beispiel gesetzt.</p>
         </column-wide-element>
            
         
      </chapter>
   </chapter>
   <chapter hyphenation="yes" chapterpage="no" id="d2e1219" ismodule="no">
      
         <title>
            <title id="e959b617-429c-4a40-9ba2-c55ac946a753">Ausgewählte Themen</title>
         </title>
         
            <column-wide-element>
         <p>Hands-on Materiel mit Beispielquelltexten.</p>
      </column-wide-element>
         
      
      <chapter hyphenation="yes" chapterpage="no" id="d2e1236" ismodule="no">
         
            <title>
               <title id="81e11338-11b3-42c9-917d-d3f9d4bffb12">XSLT Uses Cases und Lösung</title>
            </title>
            
               <column-wide-element>
            <p>In diese Kapitel werden einige ausgewählte Themen zu XSLT dargestellt. Dabei geht es weder um Vollständigkeit noch um die beste/eleganteste Lösung, sondern eher um die Vorstellung eines Anwendungsszenarios mit einem potentiellen Lösungsansatz.</p>
         </column-wide-element>
            
         
         <chapter hyphenation="yes" chapterpage="no" id="d2e1253" ismodule="no">
            
               <title>
                  <title id="28a8c9ba-33b0-41ff-8681-da976df43b85">Vortransformationen </title>
               </title>
               
                  <column-wide-element>
               <p>Bei einer komplexen Transformation ist es ratsam und sogar manchmal unabdingbar die Konvertierung in einzelne Stufen aufzuteilen. Das hat folgende Vorteile:</p>
            </column-wide-element>
                  <column-wide-element>
               <ul>
                     <li>
                        <p>Der Prozess ist transparenter, da die einzelnen Stufen leichter überschaubar sind.</p>
                     </li>
                     <li>
                        <p>Die Zwischenergebnisse können für Debug-Zwecke ausgewertet werde oder dienen als Eingabe für andere Prozesse.</p>
                     </li>
                     <li>
                        <p>Nicht-relevante oder invalide Teilbäume können aus der Eingabeinstanz gefiltert werden, um so die weitere Verarbeitung zu beschleunigen.</p>
                     </li>
                     <li>
                        <p>Hilfskonstrukte können erzeugt werden. Diese erleichtern die weitere Verarbeitung.</p>
                     </li>
                  </ul>
            </column-wide-element>
                  <column-wide-element>
               <p>Es gibt zwei Möglichkeiten, wie eine Vortransformation<xe>
                     <first criterion="Verarbeitungsmethoden">Verarbeitungsmethoden</first>
                     <second criterion="Vortransformation">Vortransformation</second>
                  </xe> eingebunden werden kann:</p>
            </column-wide-element>
                  <column-wide-element>
               <ul>
                     <li>
                        <p>In einem separaten File bzw. einer XML Instanz, die vom XSLT Prozessor vor der eigentlichen Transformation aufgerufen wird uns einen Zwischenstand produziert, der als Eingabe für den Haupttransformationsschritt dient.</p>
                     </li>
                     <li>
                        <p>Innerhalb des eigentlichen XSLT Stylesheets. Hier wird das Ergebnis der Vortransformation in einer Variablen erzeugt.</p>
                     </li>
                  </ul>
            </column-wide-element>
                  <column-wide-element>
               <p>Den zweiten Punkt möchte ich anhand einer Beispiel XSLT Skripts vorführen. Betrachten wir folgende Input Daten:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="green">&lt;education-system&gt;</color>
  <color name="green">&lt;administrative-regions&gt;</color>
    [...]
    <color name="green">&lt;dministrative-region </color><color name="green">id</color>="31" <color name="green">name</color>="Bavaria"<color name="green">&gt;</color>
      <color name="green">&lt;shools&gt;</color>
        <color name="green">&lt;school </color><color name="green">id</color>="45"<color name="green">&gt;</color>
          <color name="green">&lt;teachers&gt;</color>
            <color name="green">&lt;teacher </color><color name="green">id</color>="576"/<color name="green">&gt;</color>
            <color name="green">&lt;teacher </color><color name="green">id</color>="345"/<color name="green">&gt;</color>
            <color name="green">&lt;teacher </color><color name="green">id</color>="12"/<color name="green">&gt;</color>
          <color name="green">&lt;/teachers&gt;</color>
        <color name="green">&lt;/school&gt;</color>
        <color name="green">&lt;school </color><color name="green">id</color>="36"<color name="green">&gt;</color>
          <color name="green">&lt;teachers&gt;</color>
            <color name="green">&lt;teacher </color><color name="green">id</color>="576"/<color name="green">&gt;</color>
            <color name="green">&lt;teacher </color><color name="green">id</color>="8"/<color name="green">&gt;</color>
          <color name="green">&lt;/teachers&gt;</color>
        <color name="green">&lt;/school&gt;</color>
        [...]
      <color name="green">&lt;/shools&gt;</color>
    <color name="green">&lt;/dministrative-region&gt;</color>
    [...]
  <color name="green">&lt;/administrative-regions&gt;</color>
<color name="green">&lt;/education-system&gt;</color></verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Die erste Datei beinhaltet eine Zuordnung von Lehrern zu Schulen in verschiedenen Regierungsbezirken. Um die Daten zu den beiden referenzierten Objekten einzusehen müssen zwei weitere Dateien konsultiert werden. Die Datei, welche die Lehrer auflistet:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="green">&lt;teachers&gt;</color>
  [...]
  <color name="green">&lt;teacher </color><color name="green">id</color>="576"<color name="green">&gt;</color>
    <color name="green">&lt;first-name&gt;</color>Alfons<color name="green">&lt;/first-name&gt;</color>
    <color name="green">&lt;last-name&gt;</color>Blimetsrieder<color name="green">&lt;/last-name&gt;</color>
    <color name="green">&lt;subjects&gt;</color>
      <color name="green">&lt;subject&gt;</color>Biology<color name="green">&lt;/subject&gt;</color>
      <color name="green">&lt;subject&gt;</color>Math<color name="green">&lt;/subject&gt;</color>
      <color name="green">&lt;subject&gt;</color>Sport<color name="green">&lt;/subject&gt;</color>
    <color name="green">&lt;/subjects&gt;</color>
    <color name="green">&lt;suspended&gt;</color>2017-12-31<color name="green">&lt;/suspended&gt;</color>
    [...]
  <color name="green">&lt;/teacher&gt;</color>
  [...]
<color name="green">&lt;/teachers&gt;</color></verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Und die Datei, welche die Schulen auflistet:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="green">&lt;schools&gt;</color>
  [...]
  <color name="green">&lt;school </color><color name="green">id</color>="45"<color name="green">&gt;</color>
    <color name="green">&lt;name&gt;</color>Gymnasium Bad Aibling<color name="green">&lt;/name&gt;</color>
    <color name="green">&lt;type&gt;</color>Oberschule<color name="green">&lt;/type&gt;</color>
    [...]
  <color name="green">&lt;/school&gt;</color>
  [...]
<color name="green">&lt;/schools&gt;</color></verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Um diese Daten verarbeiten zu können ist es sinnvoll, die drei Dateien in einem ersten "Resolver" Schritt zusammenzuführen und ggf. irrelevante Strukturen zu entfernen. Lehrer aus obigem Beispiel können beispielsweise suspendiert worden sein. Das folgende Skript erledigt dies mittels einer zusätzlichen Transformation in eine Variable:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="green">&lt;?xml </color><color name="green">version</color>="1.0" <color name="green">encoding</color>="UTF-8"?<color name="green">&gt;</color>
<color name="green"><bg>&lt;xsl:stylesheet</bg> </color><color name="green">version</color>="2.0" <color name="green">xmlns:xsl</color>="http://www.w3.org/1999/XSL/Transform" <color name="green">exclude-result-prefixes</color>="#all"<color name="green">&gt;</color>
  
  <color name="green"><bg>&lt;xsl:output</bg> </color><color name="green">indent</color>="yes" <color name="green">method</color>="xml"/<color name="green">&gt;</color>
  
  <color name="green"><bg>&lt;xsl:strip-space</bg> </color><color name="green">elements</color>="*"/<color name="green">&gt;</color>
  
  <color name="green"><bg>&lt;xsl:param</bg> </color><color name="green">name</color>="file-1" <color name="green">required</color>="yes"/<color name="green">&gt;</color>
  <color name="green"><bg>&lt;xsl:param</bg> </color><color name="green">name</color>="file-2" <color name="green">required</color>="yes"/<color name="green">&gt;</color>
  <color name="green"><bg>&lt;xsl:param</bg> </color><color name="green">name</color>="file-3" <color name="green">required</color>="yes"/<color name="green">&gt;</color>
  
  <color name="green"><bg>&lt;xsl:variable</bg> </color><color name="green">name</color>="files" <color name="green">select</color>="(doc($file-1), <color name="green"></color>= <color name="green"></color>=<color name="green">&gt;</color>
  <color name="green"><bg>&lt;xsl:variable</bg> </color><color name="green">name</color>="bavaria-region-ids" <color name="green">select</color>="(31, <color name="green"></color>=<color name="green">&gt;</color>
  
  <color name="green"><bg>&lt;xsl:key</bg> </color><color name="green">name</color>="teachers" <color name="green">match</color>="teacher" <color name="green">use</color>="@id"/<color name="green">&gt;</color>
  <color name="green"><bg>&lt;xsl:key</bg> </color><color name="green">name</color>="schools" <color name="green">match</color>="school" <color name="green">use</color>="@id"/<color name="green">&gt;</color>
  
  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">name</color>="main"<color name="green">&gt;</color>
    <color name="green"><bg>&lt;xsl:variable</bg> </color><color name="green">name</color>="resolve-result"<color name="green">&gt;</color>
      <color name="green"><bg>&lt;xsl:apply-templates</bg> </color><color name="green">select</color>="$files/administrative-regions" <color name="green">mode</color>="resolve"/<color name="green">&gt;</color>
    <color name="green"><bg>&lt;/xsl:variable&gt;</bg></color>
    <color name="green"><bg>&lt;xsl:apply-templates</bg> </color><color name="green">select</color>="$resolve-result/administrative-regions"/<color name="green">&gt;</color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>
  
  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="administrative-region[not(@id <color name="green"></color>= <color name="green"></color>= <color name="green">mode</color>="resolve"/<color name="green">&gt;</color>

  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="school" <color name="green">mode</color>="resolve"<color name="green">&gt;</color>
    <color name="green"><bg>&lt;xsl:copy&gt;</bg></color>
      <color name="green"><bg>&lt;xsl:copy-of</bg> </color><color name="green">select</color>="key('schools',@id, <color name="green"></color>=<color name="green">&gt;</color>
      <color name="green"><bg>&lt;xsl:apply-templates</bg> </color><color name="green">select</color>="node()|@*" <color name="green">mode</color>="resolve"/<color name="green">&gt;</color>      
    <color name="green"><bg>&lt;/xsl:copy&gt;</bg></color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>

  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="teacher" <color name="green">mode</color>="resolve"<color name="green">&gt;</color>
    <color name="green"><bg>&lt;xsl:copy-of</bg> </color><color name="green">select</color>="key('teachers',@id, <color name="green"></color>=<color name="green">&gt;</color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>
    
  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="teacher[suspended/xs:date(.) <color name="green"></color>= <color name="green"></color>=<color name="green">&gt;</color>
  
  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="node()|@*" <color name="green">mode</color>="#all"<color name="green">&gt;</color>
    <color name="green"><bg>&lt;xsl:copy&gt;</bg></color>
      <color name="green"><bg>&lt;xsl:apply-templates</bg> </color><color name="green">mode</color>="#current"/<color name="green">&gt;</color>
    <color name="green"><bg>&lt;/xsl:copy&gt;</bg></color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>
  
<color name="green"><bg>&lt;/xsl:stylesheet&gt;</bg></color></verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Im ersten Resolve-Schritt werden die Referenzen zu den Lehrer- und Schul-Objekten aufgelöst, d.h. die Attribute des Schul-Objekts werden in die Struktur aus der ersten Datei kopiert. Die Liste der Lehrer an diesen Schul-Objekten bleibt erhalten und wird mit dem Inhalt aus der zweiten Datei bestückt. </p>
            </column-wide-element>
                  <column-wide-element>
               <p>Zusätzlich werden alle Regierungsbezirke entfernt, die nicht zu Bayern gehören, was die weitere Verarbeitung wesentlich beschleunigen wird. Lehrer die suspendiert worden sind fliegen ebenfalls raus.</p>
            </column-wide-element>
               
            
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="d2e1348" ismodule="no">
            
               <title>
                  <title id="d97b76dd-7b2b-48e3-9b9e-53a4197d41f8">Vererbung </title>
               </title>
               
                  <column-wide-element>
               <p>Mit XSLT<xe>
                     <first criterion="Konzepte">Konzepte</first>
                     <second criterion="Vererbung">Vererbung</second>
                  </xe> kann man Konstrukte nachbilden, so wie sie in anderen Programmiersprachen auch vorhanden sind. Bspw. die Vererbung. Dabei wird in einer Spezialisierung eine schon bereits getätigte Implementierung übernommen und erweitert oder eingeschränkt.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Der Vorteil dabei ist, dass man nicht alles nochmal neu schreiben muss. Das verkleinert die Redundanz, führt zu einer besseren Wartbarkeit und einer geringeren Fehleranfälligkeit.</p>
            </column-wide-element>
                  <block-title>
                     <title id="3e8c9912-e49a-4cf3-8836-4c6d59415fcdd6e9">Beispiel: Parameterisierung</title>
                  </block-title>
                  <column-wide-element>
               <p>Gewöhnlich implementiert man ein Stylsheet für ein bestimmtes Ausgabeformat und eine Produktvariante. Schrittweise werden dann weitere Varianten und Formate hinzugefügt.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Am komfortabelsten hat man es natürlich, wenn zu Beginn der Implementierung eine vollständige Spezifikation vorliegt... Das ist aber natürlich eher selten der Fall.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Aus diesem Grund ist es wichtig, sich eine gute Strategie zu überlegen, damit die Architektur nicht in Spagetthi-Code auswartet.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Eine gute Option wäre, die XSLT Import Präzedenz auszunutzen, vgl. Kapitel <doclink class="db988919-f71e-437e-b699-b6fdd2a32cb9"
                           id="ec4e438f-b6cc-4f50-b903-bda598a9003c"
                           type="none">Eindeutigkeit der Regelbasis</doclink>.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Angenommen es geht darum zu einem späteren Zeitpunkt weitere Parameter einzuführen. Ein Switch, wie der folgende, müsste dann an mehreren Stellen im Code aktualisiert werden.</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="green"><bg>&lt;xsl:choose&gt;</bg></color>
    <color name="green"><bg>&lt;xsl:when</bg> </color><color name="green">test</color>="$myParameter='this_option'"<color name="green">&gt;</color>
        &lt;!-- do this --&gt;
    <color name="green"><bg>&lt;/xsl:when&gt;</bg></color>
    <color name="green"><bg>&lt;xsl:when</bg> </color><color name="green">test</color>="$myParameter='that_option'"<color name="green">&gt;</color>
        &lt;!-- do that --&gt;
    <color name="green"><bg>&lt;/xsl:when&gt;</bg></color>
        [...]
<color name="green"><bg>&lt;/xsl:choose&gt;</bg></color></verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Besser ist es, wenn man ein Core-Stylesheet pflegt, das für ein Format und eine Produktvariante<xe>
                     <first criterion="Format- und Produktvarianten">Format- und Produktvarianten</first>
                  </xe> gut ausgetestet ist. Dieses Core-Stylesheet wird dann einfach für eine neue Variante importiert und relevante Teile werden für die neue "Spezialisierung"<xe>
                     <first criterion="Konzepte">Konzepte</first>
                     <second criterion="Generalisierung und Spezialisierung">Generalisierung und Spezialisierung</second>
                  </xe> überschrieben. Beispielsweise könnte eine Regel zum Setzen des Headers auf jeder Seite so implementiert sein:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">name</color>="render-header"<color name="green">&gt;</color>
    &lt;!-- print logo on the left side spanning two rows--&gt;
    &lt;!-- print some metadata right side first row --&gt;
    &lt;!-- print a running header right side second row --&gt;
<color name="green"><bg>&lt;/xsl:template&gt;</bg></color></verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Will man in einem neuen Format, bspw. A5, diese Logik austauschen und nur eine Zeile drucken, z.B. weil man nicht so viel Platz hat, so würde in einem "abgeleiteten" Stylesheet einfach die Regel noch einmal implementiert. </p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="green"><bg>&lt;xsl:choose&gt;</bg></color>
<color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">name</color>="render-header"<color name="green">&gt;</color>
    &lt;!-- print a running header on left side --&gt;
    &lt;!-- print logo on right side --&gt;
<color name="green"><bg>&lt;/xsl:template&gt;</bg></color></verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Dieses Template hat nun Vorrang und wird zur Auswertung herangezogen, mit der Konsequenz, dass der Header nur einzeilig gedruckt wird. Das schöne an diesen "Named-Templates"<xe>
                     <first criterion="Konzepte">Konzepte</first>
                     <second criterion="Named Template">Named Template</second>
                  </xe> ist auch, dass man sie innerhalb von Variablen verwenden kann:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="green"><bg>&lt;xsl:variable</bg> </color><color name="green">name</color>="margin-width"<color name="green">&gt;</color>
    <color name="green"><bg>&lt;xsl:call-template</bg> </color><color name="green">name</color>="get-margin-width"/<color name="green">&gt;</color>
<color name="green"><bg>&lt;/xsl:variable&gt;</bg></color></verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Das Template "get-margin-width" kann in einem "Sub"-Stylesheet überschrieben werden ohne dass die Variablen-Zugriffe im Core-Stylesheet angepasst werden müssten. Eine Zuweisung, wie:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim>width="{<color name="red">$margin-width</color>}"</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>müsste nirgendwo im Code nochmal angefasst werden.</p>
            </column-wide-element>
               
            
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="d2e1426" ismodule="no">
            
               <title>
                  <title id="40515442-a67d-49f4-9945-0f9d227bd97e">XSLT Streaming</title>
               </title>
               
                  <column-wide-element>
               <p>Bei grossen flach strukturierten Datenmengen gibt es zwei Möglichkeiten:</p>
            </column-wide-element>
                  <column-wide-element>
               <procedure type="ol">
                     <step>
                        <action>
                           <p>Für einfache Sammel- und Auswertungsaufgaben schreibt man sich am besten einen kleinen Parser, z.B. mit der Python<xe>
                              <first criterion="Programmiersprachen">Programmiersprachen</first>
                              <second criterion="Python">Python</second>
                           </xe> sgmllib<footnote>
                              <desc>https://docs.python.org/2/library/sgmllib.html</desc>
                              <add>Einfacher SGML Parser der Python Standard Bibliothek</add>
                           </footnote>.</p>
                        </action>
                     </step>
                     <step>
                        <action>
                           <p>Für komplexere Aufgaben, in denen man nicht an jeder Stelle über den ganzen XML Baum navigiert und sich die Werte zusammensuchen suchen muss, kann man die Streaming Funktion des Saxon XSLT Prozessors verwenden.</p>
                        </action>
                     </step>
                  </procedure>
            </column-wide-element>
                  <column-wide-element>
               <p>XSLT Streaming<xe>
                     <first criterion="Verarbeitungsmethoden">Verarbeitungsmethoden</first>
                     <second criterion="XSLT Streaming">XSLT Streaming</second>
                  </xe> ist in der XSLT Version 3.0 neu hinzugekommen<footnote>
                     <desc>https://www.saxonica.com/html/documentation/sourcedocs/streaming/xslt-streaming.html</desc>
                     <add>XSLT3.0 Streaming API</add>
                  </footnote> und in der
kommerziellen Saxon-EE Löusug implementiert<footnote>
                     <desc>https://www.saxonica.com/html/documentation/sourcedocs/streaming/</desc>
                  </footnote>. Bei dieser Methode wird kein Eingabebaum im Speicher aufgebaut, was zu einer drastischen Performanzsteigerung<xe>
                     <first criterion="Performanzsteigerung">Performanzsteigerung</first>
                  </xe> führt.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Es gibt ein paar Regeln, die man bei der Verarbeitung großer Datenmengen über die Streaming Funktionen beachten sollte:</p>
            </column-wide-element>
                  <column-wide-element>
               <ul>
                     <li>
                        <p>Bei einer XPATH Auswertung sollte nur ein einfacher Ausdruck mit höchstens einer konsumierenden Selektion gegeben sein. Konsumieren heißt, dass vom Kontextknoten aus eine Knotenmenge abwärts selektiert wird. Dagegen bleibt die Information bzgl. der Ancestor-Achse erhalten.</p>
                     </li>
                     <li>
                        <p>Bei einer Selektion sollte man aber darauf achten nur atomarische Werte auszuwählen.</p>
                     </li>
                     <li>
                        <p>Knotenmengen, die über die Streaming Option eingelesen wurden, können nicht einer Funktion übergeben werden. Sie sind auch nicht einer Variablen zuweisbar.</p>
                     </li>
                     <li>
                        <p>"Crawler”-Ausdrücke, wie //section sind nicht nicht zu verwenden, ebenso ein rekursiver Abstieg mit Selektion, wie bspw. mit einem Apply-Templates Call.</p>
                     </li>
                  </ul>
            </column-wide-element>
                  <column-wide-element>
               <p>Zu Beginn der Streaming-Aktion kann man sich auf konventionelle Art und Weise Teilbäume, die nicht so performanzlastig aufgebaut werden, 
in einer Variablen abspeichern und im Verlauf der Streaming-Verarbeitung z.B. für einen Vergleich auswerten.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Ein einfaches Streaming Stylesheet könnte z.B. so aussehen:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="green"><bg>&lt;xsl:stylesheet</bg> </color><color name="green">version</color>="3.0" <color name="green">xmlns:xsl</color>="http://www.w3.org/1999/XSL/Transform" <color name="green">xmlns:xs</color>="http://www.w3.org/2001/XMLSchema" <color name="green">exclude-result-prefixes</color>="#all"<color name="green">&gt;</color>
  
  <color name="green"><bg>&lt;xsl:output</bg> </color><color name="green">method</color>="xml" <color name="green">indent</color>="yes"/<color name="green">&gt;</color>
  
  <color name="green"><bg>&lt;xsl:mode</bg> </color><color name="green">on-no-match</color>="shallow-copy" <color name="green">use-accumulators</color>="entry-count" <color name="green">streamable</color>="true"/<color name="green">&gt;</color>
  
  <color name="green"><bg>&lt;xsl:accumulator</bg> </color><color name="green">name</color>="entry-count" <color name="green">as</color>="xs:integer" <color name="green">initial-value</color>="0" <color name="green">streamable</color>="yes"<color name="green">&gt;</color>
    <color name="green"><bg>&lt;xsl:accumulator-rule</bg> </color><color name="green">match</color>="entry" <color name="green">select</color>="$value <color name="green"></color>= <color name="green"></color>=<color name="green">&gt;</color>
  <color name="green"><bg>&lt;/xsl:accumulator&gt;</bg></color>
  
  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="/"<color name="green">&gt;</color>
    <color name="green">&lt;result&gt;</color>
      <color name="green"><bg>&lt;xsl:apply-templates/&gt;</bg></color>
      <color name="green">&lt;count&gt;</color>
        <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="accumulator-after('entry-count')"/<color name="green">&gt;</color> 
      <color name="green">&lt;/count&gt;</color>
    <color name="green">&lt;/result&gt;</color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>
  
<color name="green"><bg>&lt;/xsl:stylesheet&gt;</bg></color></verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Diese Stylesheet hat einige Besonderheiten:</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Zum einen wird darin ein Default-Modus deklariert, der jeden Knoten der Eingabeinstanz über
eine implizite Identity-Transformation (shallow-copy)<footnote>
                     <desc>https://www.saxonica.com/html/documentation/xsl-elements/mode.html</desc>
                     <add>Mode Optionen in XSLT3.0</add>
                  </footnote> 
                  <xe>
                     <first criterion="Verarbeitungsmethoden">Verarbeitungsmethoden</first>
                     <second criterion="Shallow Copy">Shallow Copy</second>
                  </xe>in die Ausgabeinstanz kopiert.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Auf herkömmlichem Weg würde man dafür ein Templates wie dieses verwenden:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="node()|@*" <color name="green"></color>=<color name="green">&gt;</color>
    <color name="green"><bg>&lt;xsl:apply-templates</bg> </color><color name="green">select</color>="node()|@*"/<color name="green">&gt;</color>
  <color name="green"><bg>&lt;/xsl:copy&gt;</bg></color>
<color name="green"><bg>&lt;/xsl:template&gt;</bg></color></verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Zum anderen wird ein Akkumulator<xe>
                     <first criterion="Verarbeitungsmethoden">Verarbeitungsmethoden</first>
                     <second criterion="Akkumulator">Akkumulator</second>
                  </xe> verwendet. Normalerweise gibt es in XSLT keine Variablen,
sondern nur Konstanten, so wie das auch bei funktionalen Programmiersprachen der Fall ist.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Es gab zwar schon länger eine Saxon-Erweiterung, die die mehrmalige Zuweisung eines Wertes
an eine Variable erlaubte, im Normallfall braucht man diese Eigenschaft aber nicht.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Ber der Verarbeitung sehr großer Datemengen, ist es aber unumgänglich, denn sonst
würde der Laufzeitstapel schnell an seine Grenzen gelangen.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Ein Akkumulator akkumuliert Werte, wie der Name schon sagt. Das können atomare Typen sein,
wie im obigen Beispiel, aber auch Datenstrukturen können aufgebaut werden, wie 
bspw. das Abspeichern des gerade prozessierten Teilbaums in einem Dictionary zur 
späteren Auswertung bzw. Gruppierung der Key-Elemente.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Auch im Akkumulator muss das streamable="yes" Property gesetzt sein, wenn er im 
Streaming-Modus arbeiten soll. In diesem Modus kann der Akkumulatorwert erst ausgelesen werden,
wenn der untersuchte Baum vollständig durchlaufen wurde.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Um die Unterschiede zum "normalen" XSLT Betrieb festzustellen, können im obigen Beispiel 
einige offensichtlich korrekte Änderungen vorgenommen werden, die der Streaming 
Prozessor allerdings nicht akzeptiert.</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim>Cannot call accumulator-after except during the post-descent 
phase of a streaming template</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Diese Fehlermeldung erscheint, wenn man den Apply-Templates Call entfernt. Der Akkumulator
wird also nur befüllt, wenn der Baum auch explizit durchlaufen wurde. Dieser Durchlauf 
kann auch ein reines Kopieren sein, bspw. kann man den Apply-Templates Call auch durch ein</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="green"><bg>&lt;xsl:copy-of</bg> </color><color name="green">select</color>="."/<color name="green">&gt;</color></verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>ersetzen, was gleichbedeutend mit der Mode Einstellung</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim>on-no-match="deep-copy"</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>wäre. Wie man sieht hat sich in XSLT 3.0 viel bzgl. der Handhabung verschiedener
Verarbeitungsmodi getan. Anstatt Default-Match Regeln zu schreiben, kann man ganz oben
am Stylesheet Modus Properties setzen, die den Baumdurchlauf auf verschiedene
Arten realisieren.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Die Verarbeitung großer Datenmenden ist aber mit Streaming etwas tricky und es sollte geprüft 
werden, ob ggf. konventionelles Performanz-optimiertes XSLT für den Answendungsfall ausreichen
würde.</p>
            </column-wide-element>
               
            
            <chapter hyphenation="yes" chapterpage="no" id="d2e1561" ismodule="no">
               
                  <title>
                     <title id="8a54eb22-afbb-4741-b3e5-8088e75c9ebd">XSLT Iterator</title>
                  </title>
                  
                     <column-wide-element>
                  <p>XSLT Streaming<xe>
                        <first criterion="XSLT Streaming">XSLT Streaming</first>
                     </xe> ist ziemlich tricky. Betrachten wir ein einfaches Problem.</p>
               </column-wide-element>
                     <column-wide-element>
                  <p>Es soll ein kommaseparierter Report aus folgender XML Quelle generiert werden:</p>
               </column-wide-element>
                     <page-wide-element>
                  <verbatim><color name="green">&lt;status-report&gt;</color>
  <color name="green">&lt;status-change&gt;</color>
    <color name="green">&lt;billing_id&gt;</color>360788<color name="green">&lt;/dentaltrac_encounter_id&gt;</color>
    <color name="green">&lt;claim_ids&gt;</color>967382,673647<color name="green">&lt;/claim_ids&gt;</color>
    <color name="green">&lt;status&gt;</color>open<color name="green">&lt;/status&gt;</color>
    <color name="green">&lt;time_stamp&gt;</color>2019-02-22T13:53:34.605Z<color name="green">&lt;/status_time&gt;</color>
  <color name="green">&lt;/status-change&gt;</color>
  <color name="green">&lt;status-change&gt;</color>
    <color name="green">&lt;billing_id&gt;</color>360788<color name="green">&lt;/dentaltrac_encounter_id&gt;</color>
    <color name="green">&lt;claim_ids&gt;</color>967382,673647<color name="green">&lt;/claim_ids&gt;</color>
    <color name="green">&lt;status&gt;</color>open<color name="green">&lt;/status&gt;</color>
    <color name="green">&lt;time_stamp&gt;</color>2019-02-22T13:53:34.605Z<color name="green">&lt;/status_time&gt;</color>
  <color name="green">&lt;/status-change&gt;</color>
  [...]</verbatim>
               </page-wide-element>
                     <column-wide-element>
                  <p>Mit einer <code>
                        <nb>for-each</nb>
                     </code> Loop und einem Named-Template würde das so gehen:</p>
               </column-wide-element>
                     <page-wide-element>
                  <verbatim>
<color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">name</color>="main"<color name="green">&gt;</color>
  <color name="green"><bg>&lt;xsl:for-each</bg> </color><color name="green">select</color>="$input-file/status-report/status-change"<color name="green">&gt;</color>
    <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="concat(billing_id,',')"/<color name="green">&gt;</color>
    <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="concat(claim_ids,',')"/<color name="green">&gt;</color>
    <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="concat(status,',')"/<color name="green">&gt;</color>
    <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="concat(format-dateTime(xs:dateTime(time_stamp), <color name="green"></color>= <color name="green"></color>=<color name="green">&gt;</color>
  <color name="green"><bg>&lt;/xsl:for-each&gt;</bg></color>
<color name="green"><bg>&lt;/xsl:template&gt;</bg></color></verbatim>
               </page-wide-element>
                     <column-wide-element>
                  <note>
                        <consequence>
                           <p>Named-Templates, die direkt über den Saxon Aufruf <code>
                              <nb>saxon -it:main</nb>
                           </code> aufgerufen werden, sind dann
brauchbar, wenn keine eindeutige Eingabequelle vorhanden ist, bspw. weil aus mehreren
Quellen eingelesen werden soll, wenn die Eingabe von einem Webservice kommt oder 
vom XSLT Skript selbst erzeugt wird.</p>
                        </consequence>
                     </note>
               </column-wide-element>
                     <column-wide-element>
                  <p>Im vorliegenden Fall wird von einer Datei eingelesen - wir brauchen also kein Named-Template. Statt der for-each Schleife können wir uns auch auf den rekursiven Abstieg des XSLT Prozessors
verlassen, was den Code weiter vereinfacht:</p>
               </column-wide-element>
                     <page-wide-element>
                  <verbatim>
<color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="/status-report/status-change"<color name="green">&gt;</color>
  <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="concat(billing_id,',')"/<color name="green">&gt;</color>
  <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="concat(claim_ids,',')"/<color name="green">&gt;</color>
  <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="concat(status,',')"/<color name="green">&gt;</color>
  <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="concat(format-dateTime(xs:dateTime(time_stamp), <color name="green"></color>= <color name="green"></color>=<color name="green">&gt;</color>
<color name="green"><bg>&lt;/xsl:template&gt;</bg></color></verbatim>
               </page-wide-element>
                     <column-wide-element>
                  <p>Wollen wir große Datenmengen schnell verarbeiten mit ein paar Hundert MB, so ist es sinnvoll
auf die neue XSLT3.0 Streaming Option umzuschalten, weil dadurch kein Eingabebaunm in-Memory
aufgebaut wird. Wie schon im Kapitel <doclink class="51bec5b9-1207-45cc-9bf2-b6ce3e300547"
                              id="e78aa311-072e-49b7-8248-47e00991e0c7"
                              type="topic">XSLT Streaming</doclink> angesprochen, gibt es dazu mehrere Möglichkeiten.</p>
               </column-wide-element>
                     <column-wide-element>
                  <p>Wir betrachten hier das <code>
                        <nb>xsl:iterator</nb>
                     </code>
                     <footnote>
                        <desc>https://www.saxonica.com/html/documentation/xsl-elements/iterate.html</desc>
                        <add>Der Iterator ist ein Konzept um XSLT Streaming zu realisieren</add>
                     </footnote>
 Konstrukt und stossen dabei auf einige Fallstricke. Zunächst einmal unsere Settings:</p>
               </column-wide-element>
                     <column-wide-element>
                  <ul>
                        <li>
                           <p>Wir benutzen <code>
                              <nb>xsl:source-document</nb>
                           </code> in Verbindung mit dem <code>
                              <nb>streamable='yes'</nb>
                           </code> Attribut,
um dem Prozessor mitzuteilen, dass er im Streaming Modus arbeiten soll.</p>
                        </li>
                        <li>
                           <p>Wenn wir die Quelle über einen Parameter einlesen, dann müssen wir auch die Transformation über ein Named-Template
starten.</p>
                        </li>
                     </ul>
               </column-wide-element>
                     <column-wide-element>
                  <p>Ohne zu wissen, wie XSLT Streaming genau funktioniert, setzen wir eine Reihe von <code>
                        <nb>value-of select</nb>
                     </code> statements in den Iterator:</p>
               </column-wide-element>
                     <page-wide-element>
                  <verbatim>
<color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">name</color>="main"<color name="green">&gt;</color>
  <color name="green"><bg>&lt;xsl:source-document</bg> </color><color name="green">href</color>="{$input-file}" <color name="green">streamable</color>='yes'<color name="green">&gt;</color>
    <color name="green"><bg>&lt;xsl:iterate</bg> </color><color name="green">select</color>="status-report/status-change"<color name="green">&gt;</color>
      <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="concat(billing_id,',')"/<color name="green">&gt;</color>
      <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="concat(claim_ids,',')"/<color name="green">&gt;</color>
      <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="concat(status,',')"/<color name="green">&gt;</color>
      <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="concat(format-dateTime(xs:dateTime(time_stamp), <color name="green"></color>= <color name="green"></color>=<color name="green">&gt;</color>
    <color name="green"><bg>&lt;/xsl:iterate&gt;</bg></color>
  <color name="green"><bg>&lt;/xsl:source-document&gt;</bg></color> 
<color name="green"><bg>&lt;/xsl:template&gt;</bg></color></verbatim>
               </page-wide-element>
                     <column-wide-element>
                  <p>und werden dafür prompt mit einer Fehlermeldung belohnt:</p>
               </column-wide-element>
                     <page-wide-element>
                  <verbatim>Static error on line 16 column 64 of report.xsl:
  XTSE3430: The body of the xsl:stream instruction is not streamable
  *  There is more than one consuming operand: {xsl:value-of} on line 18, and
  {xsl:value-of} on line 19</verbatim>
               </page-wide-element>
                     <column-wide-element>
                  <p>In diesem Iterator ist also nur eine "konsumierende" <code>
                        <nb>value-of</nb>
                     </code> Operation erlaubt. Um nur einmal zu selektieren, müssen wir - auf Kosten der Lesbarkeit - ziemlich umbauen. Eine Lösung könnte z.B. so aussehen:</p>
               </column-wide-element>
                     <page-wide-element>
                  <verbatim><color name="green">&lt;?xml </color><color name="green">version</color>="1.0" <color name="green">encoding</color>="UTF-8"?<color name="green">&gt;</color>
<color name="green"><bg>&lt;xsl:stylesheet</bg> </color><color name="green">xmlns:xsl</color>="http://www.w3.org/1999/XSL/Transform" <color name="green">xmlns:xs</color>="http://www.w3.org/2001/XMLSchema" <color name="green">exclude-result-prefixes</color>="xs" <color name="green">xpath-default-namespace</color>="https://tekturcms.de/schema/status-report/1.0" <color name="green">version</color>="3.0"<color name="green">&gt;</color>
   
  <color name="green"><bg>&lt;xsl:param</bg> </color><color name="green">name</color>="input-file" <color name="green">required</color>="yes"/<color name="green">&gt;</color>
  
  <color name="green"><bg>&lt;xsl:output</bg> </color><color name="green">method</color>="text"/<color name="green">&gt;</color>
 
  &lt;!-- https://www.saxonica.com/html/documentation/xsl-elements/iterate.html --&gt;

  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">name</color>="main"<color name="green">&gt;</color>
    <color name="green"><bg>&lt;xsl:source-document</bg> </color><color name="green">href</color>="{$input-file}" <color name="green">streamable</color>='yes'<color name="green">&gt;</color>
      <color name="green"><bg>&lt;xsl:iterate</bg> </color><color name="green">select</color>="status-report/status-change/*"<color name="green">&gt;</color>
        <color name="green"><bg>&lt;xsl:choose&gt;</bg></color>
          <color name="green"><bg>&lt;xsl:when</bg> </color><color name="green">test</color>="name()='time_stamp'"<color name="green">&gt;</color>
            <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="concat(format-dateTime(xs:dateTime(time_stamp), <color name="green"></color>= <color name="green"></color>=<color name="green">&gt;</color>
          <color name="green"><bg>&lt;/xsl:when&gt;</bg></color>
          <color name="green"><bg>&lt;xsl:otherwise&gt;</bg></color>
            <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="concat(.,',')"/<color name="green">&gt;</color>
          <color name="green"><bg>&lt;/xsl:otherwise&gt;</bg></color>
        <color name="green"><bg>&lt;/xsl:choose&gt;</bg></color>
      <color name="green"><bg>&lt;/xsl:iterate&gt;</bg></color>
    <color name="green"><bg>&lt;/xsl:source-document&gt;</bg></color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>  
<color name="green"><bg>&lt;/xsl:stylesheet&gt;</bg></color>
</verbatim>
               </page-wide-element>
                     <column-wide-element>
                  <p>Hier wird davon ausgegangen, dass das Element mit Namen 'time_stamp' als letztes in der Sequenz vorkommt und beim Auftreten (<code>
                        <nb>&amp;#10;</nb>
                     </code>) wird ein Zeilenumbruch gesetzt. Der deklarative Ansatz aus dem ersten Beispiel geht dabei verloren. </p>
               </column-wide-element>
                     <column-wide-element>
                  <note>
                        <consequence>
                           <p>Logisch wird beim XSLT Streaming auf einer niedrigeren Abstraktionsebene programmiert, um den Anforderungen des Prozessors gerecht zu werden.</p>
                        </consequence>
                     </note>
               </column-wide-element>
                     <column-wide-element>
                  <p>Für eine <b>1.6 GB Datei</b> benötigt das obige Skript auf meinem Rechner gute<b> drei Minuten</b>. Der traditionelle temlate-match Ansatz bricht mit einer Out-of-Memory Exception ab, selbst wenn man den Java Heap Size auf 4GB einstellt.</p>
               </column-wide-element>
                  
               
            </chapter>
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="d2e1673" ismodule="no">
            
               <title>
                  <title id="6e53fba3-c83c-4a92-8cea-170e5781324c">Identifikation mit generate-id()</title>
               </title>
               
                  <column-wide-element>
               <p>Die generate-id() Funktion gibt es in XSLT schon immer. Mit ihr kann eine Prüfsumme eines Knotens im Baum generiert werden.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Das funktioniert natürlich nur, wenn man bei der Auswertung dieses Wertes nicht den Kontext wechselt. D.h. z.B. dass ein Knoten in einem Baum,
der in einer Variablen gespeichert ist, eine andere Prüfsumme bekommt, als derselbe Knoten im Kontext-Baum.</p>
            </column-wide-element>
                  <block-title>
                     <title id="fc5861f4-cba9-4568-8ebe-a70d04f46a66d6e9">Beispiel Stückliste</title>
                  </block-title>
                  <column-wide-element>
               <p>Ein Anwendungszenario wäre bspw. die Generierung einer Target-ID für ein Bauteil in einer Stückliste. Das Bauteil ist nur einmal im 
System erfasst, hat also eine eindeutige ID, soll aber an mehreren Stellen in die Ausgabe (Eine Dokumentation für eine Maschine)
generiert werden.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Die Id an einem Element <code>
                     <nb>&lt;part id=“1234”&gt;</nb>
                  </code> würde somit mehrfach in die XML Eingabe für einen XSL-FO Prozessor erscheinen und ist 
für Referenzen unbrauchbar geworden.  Deshalb ist es ratsam beim Rendern der Bauteile eine neue Id zu vergeben, das kann z.B. 
mit den folgenden Templates (vereinfacht) passieren:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="green"><bg>&lt;xsl:key</bg> </color><color name="green">name</color>="parts" <color name="green">match</color>="part" <color name="green">use</color>="@id"/<color name="green">&gt;</color>
  
<color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>=“part” <color name="green">mode</color>=“content"<color name="green">&gt;</color>
  &lt;!-- Ausgabe des Bauteils im Content Bereich --&gt;
  <color name="green">&lt;fo:block </color><color name="green">id</color>="{generate-id()}"<color name="green">&gt;</color>
    <color name="green">&lt;fo:external-graphic </color><color name="green">xsl:use-attribute-sets</color>="part.img"/<color name="green">&gt;</color>  
  <color name="green">&lt;/fo:block&gt;</color>
<color name="green"><bg>&lt;/xsl:template&gt;</bg></color>
    
<color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>=“part” <color name="green">mode</color>=“part-list"<color name="green">&gt;</color>
  &lt;!-- Ausgabe einer Liste mit allen Verweisen an unterschiedicher Stelle --&gt;
  <color name="green">&lt;fo:block&gt;</color>
    <color name="green"><bg>&lt;xsl:for-each</bg> </color><color name="green">select</color>="key('parts',@id)"<color name="green">&gt;</color>
      <color name="green">&lt;fo:page-number-citation </color><color name="green">ref-id</color>="{generate-id()}"/<color name="green">&gt;</color>
    <color name="green"><bg>&lt;/xsl:for-each&gt;</bg></color>
  <color name="green">&lt;/fo:block&gt;</color>
<color name="green"><bg>&lt;/xsl:template&gt;</bg></color></verbatim>
            </page-wide-element>
                  <block-title>
                     <title id="90386d0e-7162-471c-8c09-8bb00da36da5d6e17">Beispiel Mantel Dokument</title>
                  </block-title>
                  <column-wide-element>
               <p>Im Bereich EDI Datenaustausch werden große XML Dateien versendet, die man auf einzelne Transmissions 
aufsplitten will, um sie in einer XML Datenbank abspeichern zu können. Die Struktur einer Datenübertragung
könnte folgendermassen aussehen:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim>WRAPPER1
  SEQUENZ1
  SEQUENZ2
  SEQUENZ3
  WRAPPER2
    SEQUENZ1
    SEQUENZ2
    SEQUENZ3
    SEQUENZ4
    WRAPPER3
      SEQUENZ1
      SEQUENZ2
      CONTENT
        DATA1
        DATA2
        DATA3
        DATA4
        DATA5
      CONTENT
        DATA1
        DATA2
        DATA3
        DATA4
        DATA5
      WRAPPER4
        SEQUENZ1
      CONTENT
        DATA1
        DATA2
        DATA3
        DATA4
        DATA5
      [...]</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Jedes einzelne <code>
                     <nb>CONTENT</nb>
                  </code> Element soll nun einen Mantel erhalten und separat in einer Datei abgelegt werden.
Der "Umschlag" soll dabei alle Elemente des Rahmens der Transmission erhalten. Also alles auf der
Descendant-Achse bis zum Element <code>
                     <nb>WRAPPER3</nb>
                  </code>, ausserdem noch die Elemente <code>
                     <nb>SEQUENZ1</nb>
                  </code> und <code>
                     <nb>SEQUENZ2</nb>
                  </code>,
sowie das Element <code>
                     <nb>WRAPPER4</nb>
                  </code> mit Kind <code>
                     <nb>SEQUENZ1</nb>
                  </code> .Ohne groß auf die Performanz zu achten, könnte das recht einfach so realisiert werden:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="green"><bg>&lt;xsl:stylesheet</bg> </color><color name="green">xmlns:xsl</color>="http://www.w3.org/1999/XSL/Transform" <color name="green">version</color>="2.0"<color name="green">&gt;</color>
    
  <color name="green"><bg>&lt;xsl:output</bg> </color><color name="green">method</color>="xml" <color name="green">indent</color>="yes"/<color name="green">&gt;</color>
  <color name="green"><bg>&lt;xsl:strip-space</bg> </color><color name="green">elements</color>="*"/<color name="green">&gt;</color>
  
  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="/"<color name="green">&gt;</color>
    <color name="green"><bg>&lt;xsl:apply-templates</bg> </color><color name="green">select</color>="/WRAPPER1/WRAPPER2/WRAPPER3/CONTENT" <color name="green">mode</color>="umschlag"/<color name="green">&gt;</color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>
    
  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="CONTENT" <color name="green">mode</color>="umschlag"<color name="green">&gt;</color>
    <color name="green"><bg>&lt;xsl:result-document</bg> </color><color name="green">href</color>="{concat(@id,'.xml')}"<color name="green">&gt;</color>
      <color name="green">&lt;umschlag&gt;</color>
        <color name="green">&lt;metadaten&gt;</color>&lt;!-- einige Metadaten --&gt;<color name="green">&lt;/env:metadata&gt;</color>
        <color name="green">&lt;nutzdaten&gt;</color>
            <color name="green"><bg>&lt;xsl:apply-templates</bg> </color><color name="green">select</color>="ancestor::WRAPPER1"<color name="green">&gt;</color>
              <color name="green"><bg>&lt;xsl:with-param</bg> </color><color name="green">name</color>="this-id" <color name="green">select</color>="generate-id()" <color name="green">tunnel</color>="yes"/<color name="green">&gt;</color>
            <color name="green"><bg>&lt;/xsl:apply-templates&gt;</bg></color>
        <color name="green">&lt;/nutzdaten&gt;</color>
      <color name="green">&lt;/umschlag&gt;</color>
    <color name="green"><bg>&lt;/xsl:result-document&gt;</bg></color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>

  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="node()|@*"<color name="green">&gt;</color>
    <color name="green"><bg>&lt;xsl:copy&gt;</bg></color>
      <color name="green"><bg>&lt;xsl:apply-templates</bg> </color><color name="green">select</color>="node()|@*"/<color name="green">&gt;</color>
    <color name="green"><bg>&lt;/xsl:copy&gt;</bg></color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>
    
  <color name="green"><bg>&lt;xsl:template</bg> </color><color name="green">match</color>="CONTENT"<color name="green">&gt;</color>
    <color name="green"><bg>&lt;xsl:param</bg> </color><color name="green">name</color>="this-element" <color name="green">tunnel</color>="yes"/<color name="green">&gt;</color>
    <color name="green"><bg>&lt;xsl:if</bg> </color><color name="green">test</color>="$this-id <color name="green"></color>= <color name="green"></color>=<color name="green">&gt;</color>
      <color name="green"><bg>&lt;xsl:copy&gt;</bg></color>
        <color name="green"><bg>&lt;xsl:apply-templates</bg> </color><color name="green">select</color>="node()|@*"/<color name="green">&gt;</color>
      <color name="green"><bg>&lt;/xsl:copy&gt;</bg></color>
    <color name="green"><bg>&lt;/xsl:if&gt;</bg></color>
  <color name="green"><bg>&lt;/xsl:template&gt;</bg></color>
    
<color name="green"><bg>&lt;/xsl:stylesheet&gt;</bg></color></verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Im rekursiven Abstieg wird im Modus "umschlag" jedes <code>
                     <nb>CONTENT</nb>
                  </code> Element selektiert und
in einen Umschlag verpackt. Der eigentlich Inhalt des Umschlags wird generiert,
indem der gesamte XML Baum über die Standard-Kopierregel in das Element <code>
                     <nb>&lt;nutzdaten&gt;</nb>
                  </code> gesetzt wird. Dabei wird aber nur derjenige <code>
                     <nb>CONTENT</nb>
                  </code> Abschnitt evaluiert, der
zu der als Parameter übergebenen generierten Id passt.</p>
            </column-wide-element>
               
            
         </chapter>
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="d2e1733" ismodule="no">
         
            <title>
               <title id="79507fbb-caa9-4316-8097-2d7e55208d81">XQuery Use Cases und Lösung</title>
            </title>
            
               <column-wide-element>
            <p>In diese Kapitel werden einige ausgewählte Themen zu XQuery dargestellt. Dabei geht es weder um Vollständigkeit noch um die beste/eleganteste Lösung, sondern eher um die Vorstellung eines Anwendungsszenarios mit einem potentiellen Lösungsansatz.</p>
         </column-wide-element>
            
         
         <chapter hyphenation="yes" chapterpage="no" id="d2e1750" ismodule="no">
            
               <title>
                  <title id="0e661463-0259-4d9f-a784-93f4f169bc52">Abfragen mit XQuery</title>
               </title>
               
                  <column-wide-element>
               <p>Xquery<xe>
                     <first criterion="Programmiersprachen">Programmiersprachen</first>
                     <second criterion="XQuery">XQuery</second>
                  </xe> führt im Publishing-Bereich ein Schattendasein. In meiner Zeit als XSL Programmierer für zwei Publishing  Firmen hatte ich damit nie zu tun. Erst als ich näher an den eigentlichen Daten war und mit XML Datenbanken zu tun hatte, kam ich mit XQuery in Berührung.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Während relationale Datenbanken mit SQL abgefragt werden, verwendet man bei XML Datenbanken, wie eXist<footnote>
                     <desc>http://exist-db.org/exist/apps/homepage/index.html</desc>
                     <add>Hompage der eXist XML Datenbank</add>
                  </footnote> oder Marklogic<footnote>
                     <desc>https://de.marklogic.com/</desc>
                     <add>Hompage der NoSQL/XML Datenbank MarkLogic</add>
                  </footnote>, XQuery als Abfragesprache.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Aber auch einzelne XML Dokumente können z.B. in Oxygen XML Editor<xe>
                     <first criterion="Tools">Tools</first>
                     <second criterion="oXygen XML Editor">oXygen XML Editor</second>
                  </xe> mit dem XQuery Builder Tool<footnote>
                     <desc>https://www.oxygenxml.com/xml_editor/xquery_builder.html</desc>
                     <add>Tool zur einfachen Eingabe von XQuery Test-Skripten im oXygen XML Editor</add>
                  </footnote> oder auch per Saxon Kommandozeile abgefragt werden:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim>java -cp usr/lib/saxon/saxon.jar net.sf.saxon.Query 
     -s:"schulen.xml" 
     -qs:"/schulen/schule[id='6']" 
     -o:"/Users/Alex/Desktop/schule_6.xml"</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Mit der Option <b>-qs </b>kann hier der Querystring angebenen werden. </p>
            </column-wide-element>
                  <column-wide-element>
               <p>Wie man an dem einfachen Beispiel schon sieht, ist XQuery mit XPATH verwandt. XQuery umfasst den Sprachumfang von XPATH bietet aber zusätzlich die FLOWR Syntax um mächtigere Abfragen stellen zu können. Mittels weiterer Extensions<footnote>
                     <desc>http://cs.au.dk/~amoeller/XML/querying/flwrexp.html</desc>
                     <add>XQuery Extensions für mächtigere Funktionen</add>
                  </footnote> können aber auch ganze Programme erstellt werden, die weit über die Funktionalität einer "Abfragesprache" hinausgehen.</p>
            </column-wide-element>
                  <block-title>
                     <title id="c7e8acb5-6c21-4de1-a88d-8bbd376bbbb4d6e20">XQuery Builder</title>
                  </block-title>
                  <column-wide-element>
               <p>Oxygen XML Editor bietet eine schöne Möglichkeit XQuery-Abfragen 
auf einem geladenen XML Dokument auszuführen. Dazu kann man 
seine Query in das betreffende Eingabefenster schreiben.</p>
            </column-wide-element>
                  <page-wide-element>
               <figure pdfwidth="page">
                     <column-wide-element>
                     <subtitle>oXygen XQuery Builder</subtitle>
                  </column-wide-element>
                     <desc id="71e42e88-d6ac-4fca-9bae-a4d2919b818cd6e27">Mit dem XQuery Builder von oXygen lassen sich unkompliziert Queries testen</desc>
                     <img src="./client/data/0846d6a2-6999-42ab-9e83-55bc197fc11c/xquery-builder.png"/>
                  </figure>
            </page-wide-element>
                  <column-wide-element>
               <p>Mit folgendem Ergebnis:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="green">&lt;dates&gt;</color>
  <color name="green">&lt;today&gt;</color>2019-01-16+01:00<color name="green">&lt;/today&gt;</color>
  <color name="green">&lt;formatted&gt;</color>Wednesday, 16th January 2019<color name="green">&lt;/formatted&gt;</color>
<color name="green">&lt;/dates&gt;</color></verbatim>
            </page-wide-element>
                  <block-title>
                     <title id="59f98501-17c8-47d7-a314-8f89c6b7299ed6e33">FLOWR Expression</title>
                  </block-title>
                  <column-wide-element>
               <p>FLOWR<xe>
                     <first criterion="FLOWR Expression">FLOWR Expression</first>
                  </xe> steht für <code>
                     <nb>for, let, where, order by, return</nb>
                  </code>. Das sind die Query-Anweisungen, die in 
dem Ausdruck erlaubt sind - in genau dieser Reihenfolge.</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="brown">let </color><color name="red">$bibliothek</color> := .
<color name="brown">for </color><color name="red">$x</color> in <color name="red">$bibliothek</color>//buecher,
    <color name="red">$y</color> in <color name="red">$bibliothek</color>//autoren/autor
<color name="brown">where </color>starts-with(<color name="red">$autor</color>, 'Grass')
    and <color name="red">$x</color>/@autorId = <color name="red">$y</color>/@id
<color name="brown">return </color><color name="red">$x</color>/titel</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>In dieser Query werden die Titel aller Bücher von Grass zurückgeliefert.
Bemerkenswert ist hier die Syntax.</p>
            </column-wide-element>
                  <column-wide-element>
               <note>
                     <consequence>
                        <p>Normalerweise würde man zwischen den
einzelnen Anweisungen einen Blockabschluss, wie ein Semikolon erwarten.
Da wir aber hier funtional prorgammieren, ist die Sache etwas anders...</p>
                     </consequence>
                  </note>
            </column-wide-element>
                  <block-title>
                     <title id="7dbf0fb3-8421-43c4-b792-0eba61c4bf27d6e44">XML per XQuery</title>
                  </block-title>
                  <column-wide-element>
               <p>Es ist aber auch möglich XML zu erzeugen, wobei natürlich für eine Transformation XSLT 
vorzuziehen ist. Dazu werden Tags direkt in die Expression geschrieben, wie z.B. hier:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="brown">declare </color><color name="brown">variable </color><color name="red">$nachname</color> as xs:string external;
<color name="green">&lt;buecher </color><color name="green">autor</color>="{$nachname}"<color name="green">&gt;</color>
{
  <color name="brown">let </color><color name="red">$bibliothek</color> := .
  <color name="brown">for </color><color name="red">$x</color> in <color name="red">$bibliothek</color>/buecher//buch,
      <color name="red">$y</color> in <color name="red">$bibliothek</color>/autoren//autor
  <color name="brown">where </color>starts-with(<color name="red">$y</color>, <color name="red">$nachname</color>)
      and <color name="red">$x</color>/@autorId = <color name="red">$y</color>/@id
  <color name="brown">order </color>by <color name="red">$x</color>/ausgabe
  return
  <color name="green">&lt;buch </color><color name="green">ausgabe</color>="{$x/ausgabe}"<color name="green">&gt;</color>
    {<color name="red">$x</color>/titel}
  <color name="green">&lt;/buch&gt;</color>
}
<color name="green">&lt;/buecher&gt;</color></verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Speichert man dieses Schnippsel in einer Datei <code>
                     <nb>buecher.xquery</nb>
                  </code> ab,
so kann man mit der folgenden Kommandozeile auf einer <code>
                     <nb>buecher.xml</nb>
                  </code> Datei als Eingabe suchen:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim>java -cp usr/lib/saxon/saxon.jar net.sf.saxon.Query -t -s:buecher.xml 
                                                       -q:buecher.xquery 
                                                       -o:ergebnis.xml 
                                                       nachname=grass</verbatim>
            </page-wide-element>
                  <block-title>
                     <title id="72199b87-ef45-4bac-93aa-a03892a63e12d6e54">Document Projection</title>
                  </block-title>
                  <column-wide-element>
               <p>Document Projection<footnote>
                     <desc>http://www.saxonica.com/documentation/#!sourcedocs/projection</desc>
                     <add>Verstecktes Saxon Feature: Dokument Projektion bei einer XQuery Abfrage</add>
                  </footnote>
                  <xe>
                     <first criterion="Tipps und Tricks">Tipps und Tricks</first>
                     <second criterion="Document Projection">Document Projection</second>
                  </xe>  ist ein verstecktes Saxon XQuery Feature. Es funktioniert nur für eine einzige Abfrage.
Das kann schon recht hilfreich sein, wenn man ein mehrere 100MB großes Dokument durchsuchen
will.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Ohne Projection würde das Beispiel von oben so verarbeitet:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim>java -cp usr/lib/saxon/saxon.jar net.sf.saxon.Query -t 
     -s:buecher.xml 
     -q:buecher.xquery 
     -o:ergebnis.xml 
     -projection:off 
     nachname=grass
Saxon-EE 9.7.0.20J from Saxonica
Java version 1.8.0_60
Using license serial number V005095
Analyzing query from Desktop/buecher.xquery
Generating byte code...
Analysis time: 201.10095 milliseconds
Processing file:/Users/Alex/buecher.xml
Using parser com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl<color name="red">$JAXPSAXParser</color>
Building tree <color name="brown">for </color>file:/Users/Alex/buecher.xml 
using class net.sf.saxon.tree.tiny.TinyBuilder
Tree built in 3.482278ms
Tree size: 46 nodes, 58 characters, 6 attributes
Execution time: 27.137589ms
Memory used: 67031664</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Mit der Option <code>
                     <nb>-projection:on</nb>
                  </code> verändert sich die Ausführungszeit signifikant:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim>[...]

Document projection <color name="brown">for </color>file:/Users/Alex/buecher.xml
-- Input nodes 50; output nodes 27; reduction = 46%
Tree built in 3.80615ms
Tree size: 26 nodes, 58 characters, 3 attributes
Execution time: 15.83463ms
Memory used: 64339064</verbatim>
            </page-wide-element>
               
            
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="d2e1879" ismodule="no">
            
               <title>
                  <title id="d9ecd69d-0fbd-4931-8d5b-fe5bee02f362">Connector zu Marklogic in Oxygen</title>
               </title>
               
                  <column-wide-element>
               <p>Marklogic<xe>
                     <first criterion="Software">Software</first>
                     <second criterion="Marklogic">Marklogic</second>
                  </xe> bietet zwar auf Port 8000 per Default ein Query Console im Browser, mit der man bestimmte Sachen ausprobieren kann. Komfortabler arbeitet man aber mit einem Oxygen-Connector<xe>
                     <first criterion="Tools">Tools</first>
                     <second criterion="oXygen-Connector">oXygen-Connector</second>
                  </xe>. Dazu öffnet man den <i id="69aba0a2-ccaa-4d60-bbf7-1fd62f608ca5d6e6">Data Source Explorer</i>: </p>
            </column-wide-element>
                  <page-wide-element>
               <figure pdfwidth="page">
                     <desc id="6f6f78fc-76e7-496e-a509-60ae08c0f6afd6e10">oXygen Data Source Explorer View öffnen</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/show-view-data-source-explorer.png"/>
                  </figure>
            </page-wide-element>
                  <column-wide-element>
               <p>und konfiguriert eine neue Datenquelle:</p>
            </column-wide-element>
                  <page-wide-element>
               <figure pdfwidth="page">
                     <desc id="56e5bbeb-575d-4df1-b392-a30865bf534fd6e16">Neue Datenquelle in oXygen konfigurieren</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/configure-data-sources.png"/>
                  </figure>
            </page-wide-element>
                  <column-wide-element>
               <p>Dazu muss man den Marklogic Treiber installieren<footnote>
                     <desc>https://www.oxygenxml.com/doc/versions/20.1/ug-editor/topics/configure-marklogic-datasource.html</desc>
                     <add>MarkLogic Datenquelle in oXygen konfigurieren</add>
                  </footnote> und diesen im folgenden Screen verfügbar machen.</p>
            </column-wide-element>
                  <column-wide-element>
               <caution>
                     <cause>Das Jar sollte an einem soliden Ort abgespeichert werden, da hier nur ein Verweis auf diesen Ort gesetzt wird.</cause>
                     <consequence/>
                  </caution>
            </column-wide-element>
                  <page-wide-element>
               <figure pdfwidth="page">
                     <desc id="36195db5-65ff-4426-b863-06a72fa91351d6e27">Marklogic Treiber auswählen</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/add-marklogic-jar.png"/>
                  </figure>
            </page-wide-element>
                  <column-wide-element>
               <p>Natürlich ist auf der Serverseite auch eine Einstellung notwendig. Man wechselt als Admin in den Bereich <b>App Servers</b> und fügt einen neuen <b>WebDAV Server</b> 
                  <xe>
                     <first criterion="Tools">Tools</first>
                     <second criterion="Marklogic WebDAV Server">Marklogic WebDAV Server</second>
                  </xe> hinzu. Ggf. muss man bei der Auswahl der Datenbank diese noch auf "automatische Directory Erzeugung" umstellen.</p>
            </column-wide-element>
                  <page-wide-element>
               <figure pdfwidth="page">
                     <desc id="9a38a110-c4b8-4efa-95e5-bcba44278512d6e39">Wechseln in die Marklogic App Server Verwaltung</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/appserver.png"/>
                  </figure>
            </page-wide-element>
                  <page-wide-element>
               <figure pdfwidth="page">
                     <desc id="993f9c35-b441-42cf-87fb-63980a4554b7d6e43">WebDAV in Marklogic konfigurieren</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/marklogic-create-webdav.png"/>
                  </figure>
            </page-wide-element>
                  <column-wide-element>
               <p>Hat man den WebDAV Server erzeugt und diesem eine bestehende oder neu angelegte Datenbank zugewiesen, dann kann man diese DB im Konfigurationsdialog der neuen WebDav Connection auswählen.</p>
            </column-wide-element>
                  <page-wide-element>
               <figure pdfwidth="page">
                     <desc id="f355add5-223f-475a-a976-cd7d1d45602cd6e50">Konfigurieren der WebDAV Connection Einstellungen in oXygen</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/cnfigure-database-connection.png"/>
                  </figure>
            </page-wide-element>
                  <column-wide-element>
               <p>Schliesslich hat man im Data Source Explorer in oXygen die neue Verbindung verfügbar und kann gefühlt wie im Dateisystem mit den Files auf dem Server arbeiten.</p>
            </column-wide-element>
                  <page-wide-element>
               <figure pdfwidth="page">
                     <desc id="54149835-7759-4782-aa85-5d9f8a767aa2d6e56">oXagen Data Source Explorer zeigt die WebDAV Verzeichnisse auf dem Marklogic Server</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/Data-Source_explorer.png"/>
                  </figure>
            </page-wide-element>
               
            
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="d2e1987" ismodule="no">
            
               <title>
                  <title id="8c5a4500-d080-4910-b4cd-529caeb12ae3">XQuery als Programmiersprache</title>
               </title>
               
                  <column-wide-element>
               <p>Erste Schritte in XQuery gehen sehr schön  
mit der Query Konsole auf dem Marklogic Server (Port 8000).
Hat man parallel auch noch oXygen offen, kann man die Testergbnisse aus der Konsole direkt in ein XQuery Server Skript packen.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>wqdqwd</p>
            </column-wide-element>
                  <block-title>
                     <title id="fa1956ff-e468-4fb8-99dc-1a7a8f773707d6e7">Schleifen</title>
                  </block-title>
                  <column-wide-element>
               <p>Die ersten 10 Dokumente auf dem Server bekommt man z.B. mit:<xe>
                     <first criterion="Programmierkonstrukte">Programmierkonstrukte</first>
                     <second criterion="Schleifen - for">Schleifen - for</second>
                  </xe>
               </p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim>(doc())[position() lt 11]</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Die Zahlen von 1 bis 100 mit:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim>(<color name="brown">for </color><color name="red">$i</color> in (1 to 100) <color name="brown">return </color><color name="red">$i</color>)</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Wenn man diese beide Anweisungen untereinander in die Konsole
schreibt bekommt man einen Fehler. Trennt man sie mit einem 
Komma - ein Tupel wird erzeugt - dann klappt es.</p>
            </column-wide-element>
                  <block-title>
                     <title id="0bbb962d-b38e-431a-855a-294425a5a016d6e20">Dokumente in der DB anlegen</title>
                  </block-title>
                  <column-wide-element>
               <p>Der Befehl zum Anlegen eines Dokuments in der Marklogic DB sieht
folgendermassen aus<footnote>
                     <desc>https://docs.marklogic.com/xdmp:document-insert</desc>
                     <add>Doku zu xdmp:documen-insert Funktion auf den MarkLogic Webseiten</add>
                  </footnote>:<xe>
                     <first criterion="Programmierkonstrukte">Programmierkonstrukte</first>
                     <second criterion="DB insert">DB insert</second>
                  </xe>
               </p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="blue">xdmp:document-insert</color>(
  "/alex-test/example-alex.xml",
  <color name="green">&lt;root&gt;</color>Hier steht der Content<color name="green">&lt;/root&gt;</color>, 
  <color name="green">&lt;options </color><color name="green">xmlns</color>="xdmp:document-insert"<color name="green">&gt;</color>  
    <color name="green">&lt;metadata&gt;</color>{
      <color name="blue">map:map</color>() =&gt; <color name="blue">map:with</color>("valid-start", "2014-06-03T14:13:05.472585-07:00")
      =&gt; <color name="blue">map:with</color>("valid-end", "9999-12-31T11:59:59Z")
      }<color name="green">&lt;/metadata&gt;</color>
  <color name="green">&lt;/options&gt;</color>)</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Packt man diese Instruktion in die for-Schleife oben, dann sieht das Konstrukt so aus:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim>(<color name="brown">for </color><color name="red">$i</color> in (1 to 10) <color name="brown">return </color>
  <color name="blue">xdmp:document-insert</color>(
  concat("/alex-test/example-alex-",<color name="red">$i</color>,".xml"),
  <color name="green">&lt;root&gt;</color>Hier steht der Content {<color name="red">$i</color>}<color name="green">&lt;/root&gt;</color>, 
  <color name="green">&lt;options </color><color name="green">xmlns</color>="xdmp:document-insert"<color name="green">&gt;</color>  
    <color name="green">&lt;metadata&gt;</color>{
      <color name="blue">map:map</color>() =&gt; <color name="blue">map:with</color>("valid-start", "2014-06-03T14:13:05.472585-07:00")
      =&gt; <color name="blue">map:with</color>("valid-end", "9999-12-31T11:59:59Z")
      }<color name="green">&lt;/metadata&gt;</color>
  <color name="green">&lt;/options&gt;</color>)
)</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Dokumente kann man einer Collection<xe>
                     <first criterion="Programmierkonstrukte">Programmierkonstrukte</first>
                     <second criterion="DB Collection">DB Collection</second>
                  </xe> zuweisen, um sie leichter finden und auswerten
zu können. Das geht mit dem folgenden Befehl<footnote>
                     <desc>https://docs.marklogic.com/xdmp:document-add-collections</desc>
                     <add>Dokumentation zur xdmp:document-add-collections Funktion auf den MarkLogic Webseiten</add>
                  </footnote> und diesem Schnippsel:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="brown">let </color><color name="red">$root</color> :=
<color name="green">&lt;mein-test&gt;</color>
   <color name="green">&lt;id&gt;</color>{<color name="red">$id</color>}<color name="green">&lt;/id&gt;</color>
   <color name="green">&lt;content&gt;</color>Hallo Welt!<color name="green">&lt;/content&gt;</color>
<color name="green">&lt;/mein-test&gt;</color>,
<color name="red">$options</color> :=
<color name="green">&lt;options </color><color name="green">xmlns</color>="xdmp:document-insert"<color name="green">&gt;</color>  
  <color name="green">&lt;permissions&gt;</color><color name="blue">{xdmp:default-permissions</color>()}<color name="green">&lt;/permissions&gt;</color>
  <color name="green">&lt;collections&gt;</color>
    <color name="green">&lt;collection&gt;</color>/alex-test<color name="green">&lt;/collection&gt;</color>
  <color name="green">&lt;/collections&gt;</color>
<color name="green">&lt;/options&gt;</color>,
<color name="red">$fname</color> := concat('/',<color name="red">$id</color>,'_','.xml'),
<color name="red">$td</color> := <color name="blue">xdmp:document-insert</color>(<color name="red">$fname</color>,<color name="red">$root</color>,<color name="red">$options</color>)
<color name="brown">return </color>
  [...]</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Die Dokumente, die mit der Collection alex-test getaggt wurden, kann man sich mit der folgenden Schleife ausgeben lassen:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="brown">for </color><color name="red">$x</color> in collection("/alex-test")
  return
    <color name="blue">fn:document-uri</color>(<color name="red">$x</color>)</verbatim>
            </page-wide-element>
               
            
            <chapter hyphenation="yes" chapterpage="no" id="d2e2060" ismodule="no">
               
                  <title>
                     <title id="9c13d213-40d3-4e74-b343-23cc42779c6d">Funktionen und Module</title>
                  </title>
                  
                     <block-title>
                        <title id="2b09a4f1-af09-482e-b220-bbaa5e4f0897d6e5">Funktionen</title>
                     </block-title>
                     <column-wide-element>
                  <p>Um bestimmte Abschnitte des XQuery Programm wiederverwendbar zu machen, stehen Funktionsdeklarationen<xe>
                        <first criterion="Programmierkonstrukte">Programmierkonstrukte</first>
                        <second criterion="Funktionen">Funktionen</second>
                     </xe> zur verfügung. Eine einfache Funktion wäre z.B. diese hier:</p>
               </column-wide-element>
                     <page-wide-element>
                  <verbatim><color name="brown">declare </color><color name="brown">function </color><color name="blue">local:wrap-header</color>(<color name="red">$json</color>) {
  <color name="blue">xdmp:add-response-header</color>("Pragma", "no-cache"),
  <color name="blue">xdmp:add-response-header</color>("Cache-Control", "no-cache"),
  <color name="blue">xdmp:add-response-header</color>("Expires", "0"),
  <color name="blue">xdmp:set-response-content-type</color>('text/json; charset=utf-8'),
  <color name="red">$json</color>
};</verbatim>
               </page-wide-element>
                     <column-wide-element>
                  <p>Sie wickelt um einen JSON String eine passende Header Information.</p>
               </column-wide-element>
                     <column-wide-element>
                  <p>Damit die Funktion eingebunden werden kann, muss ein passender Namespace<xe>
                        <first criterion="XML Konstrukte">XML Konstrukte</first>
                        <second criterion="Namespaces">Namespaces</second>
                     </xe> deklariert werden:</p>
               </column-wide-element>
                     <page-wide-element>
                  <verbatim><color name="brown">declare </color><color name="brown">namespace </color>local = 'local:';</verbatim>
               </page-wide-element>
                     <column-wide-element>
                  <p>Nicht nur bzgl. Wiederverwendbarkeit sind Funktionen praktisch, sondern auch
um ganz elementare Konstrukte, wie <code>
                        <nb>while...do</nb>
                     </code>
                     <xe>
                        <first criterion="Programmierkonstrukte">Programmierkonstrukte</first>
                        <second criterion="Schleifen - while..do">Schleifen - while..do</second>
                     </xe> Schleifen, zu realisieren.</p>
               </column-wide-element>
                     <column-wide-element>
                  <p>Dazu nutzt man, wie in der funktionalen Programmierung üblich, die Rekursion:</p>
               </column-wide-element>
                     <page-wide-element>
                  <verbatim><color name="brown">declare </color><color name="brown">function </color><color name="blue">local:ist-letzter-wert-in-kette</color>(<color name="red">$glied</color>) {
  <color name="brown">let </color><color name="red">$wert</color> := <color name="blue">local:komplizierte-berechnung</color>(<color name="red">$glied</color>),
    <color name="red">$naechstes-glied</color> := <color name="blue">local:komplizierte-berechnung-der-position</color>(<color name="red">$glied</color>),
  return
    <color name="brown">if </color>(<color name="red">$naechstes-glied</color> and not(<color name="red">$wert</color> = 'foobar')) then
      <color name="blue">local:durchlaufe-kette</color>(<color name="red">$naechstes-glied</color>)
    else
      <color name="red">$wert</color> = 'foobar'
};</verbatim>
               </page-wide-element>
                     <column-wide-element>
                  <p>In diesem kleinen Schnippsel sind schon einige Besonderheiten von 
XQuery zu sehen. Variablenzuweisungen geschehen mit einem Doppelpunkt,
Vergleiche dagegen nur mit einem einfachen "=". Statements werden mit einem
Komma getrennt.</p>
               </column-wide-element>
                     <block-title>
                        <title id="dab65cd2-0eb9-4487-99e0-07422d3c3759d6e26">Module</title>
                     </block-title>
                     <column-wide-element>
                  <p>Um eine XQuery Anwendung zu modularisieren<xe>
                        <first criterion="Programmierkonstrukte">Programmierkonstrukte</first>
                        <second criterion="Module">Module</second>
                     </xe>, können einzelne Skripte in
Module ausgelagert werden. Ein Modul, z.B. common.xqy, wird dabei über einen eigenen
Namespace deklariert:</p>
               </column-wide-element>
                     <page-wide-element>
                  <verbatim><color name="brown">module </color><color name="brown">namespace </color>common = "https://www.tekturcms.de/common";</verbatim>
               </page-wide-element>
                     <column-wide-element>
                  <p>Dieses Modul kann dann in anderen Skripten eingebunden werden:</p>
               </column-wide-element>
                     <page-wide-element>
                  <verbatim>import <color name="brown">module </color><color name="brown">namespace </color>common = "https://www.tekturcms.de/common" at "common.xqy";</verbatim>
               </page-wide-element>
                     <column-wide-element>
                  <p>Funktionen und Variablen werden dann mir dem Namespace<xe>
                        <first criterion="XML Konstrukte">XML Konstrukte</first>
                        <second criterion="Namespaces">Namespaces</second>
                     </xe> geprefixt aufgerufen:</p>
               </column-wide-element>
                     <page-wide-element>
                  <verbatim>Funktionsaufruf: <color name="blue">common:wrap-response-header</color>(...)
Variablenauswertung: <color name="red">$common</color>:collection-books</verbatim>
               </page-wide-element>
                  
               
            </chapter>
            <chapter hyphenation="yes" chapterpage="no" id="d2e2134" ismodule="no">
               
                  <title>
                     <title id="86a66f53-eb4a-4cc0-b14c-12d5c2bb84bd">If..then..else Ausdrücke</title>
                  </title>
                  
                     <column-wide-element>
                  <p>In nicht-funktionalen Programmiersprachen sind die Schlüsselwörter <code>
                        <nb>if</nb>
                     </code> und <code>
                        <nb>then</nb>
                     </code> dazu da, um dem Compiler oder Interpreter mitzuteilen, dass eine bedingte Anweisung ausgewertet werden soll.</p>
               </column-wide-element>
                     <column-wide-element>
                  <p>Was für den Nicht-funktionalen Programmierer etwas befremdlich erscheint, ist der Umstand, dass in XQuery <code>
                        <nb>if..then</nb>
                     </code> als Ausdrücke ausgewertet werden.</p>
               </column-wide-element>
                     <column-wide-element>
                  <p>Das ist einerseits sehr praktisch, weil es richtig angewandt den Code verkürzt und damit das Wesentliche herausstellt, kann aber auch weiter zur allg. Verwirrung bzgl. des kryptischen XQuery Codes beitragen.</p>
               </column-wide-element>
                  
               
            </chapter>
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="d2e2159" ismodule="no">
            
               <title>
                  <title id="6dc3be8f-5b8c-407c-9853-0533fdbf8267">SQL Views in MarkLogic</title>
               </title>
               
                  <column-wide-element>
               <p>Es macht nicht immer Sinn über eine Baumstruktur zu suchen. Obwohl das in einer 
XML Datenbank rasend schnell geht, weil jeder Knoten des Baums initial in einen Index
aufgenommen wird. So gibt es doch Anwendungsfälle bei denen man lieber eine relationale
Sicht auf die Daten hätte.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>In MarkLogic heisst die Lösung dazu SQL Views.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Bspw. benötigt man eine relationale Sicht auf die Daten,
wenn über verschiedene Datensätze ein Report generiert werden soll.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Nehmen wir an es gibt im Datenbestand die folgenden Dokumente:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="green">&lt;k:kunde&gt;</color>
  <color name="green">&lt;k:id&gt;</color>1<color name="green">&lt;/k:id&gt;</color>
  <color name="green">&lt;k:name&gt;</color>Alex<color name="green">&lt;/k:name&gt;</color>
  <color name="green">&lt;k:eMail&gt;</color>tekturcms@gmail.com<color name="green">&lt;/k:eMail&gt;</color>
<color name="green">&lt;/k:kunde&gt;</color>

<color name="green">&lt;k:kunde&gt;</color>
  <color name="green">&lt;k:id&gt;</color>2<color name="green">&lt;/k:id&gt;</color>
  <color name="green">&lt;k:name&gt;</color>Horst<color name="green">&lt;/k:name&gt;</color>
  <color name="green">&lt;k:eMail&gt;</color>horst@horst.de<color name="green">&lt;/k:eMail&gt;</color>
<color name="green">&lt;/k:kunde&gt;</color>

<color name="green">&lt;k:kunde&gt;</color>
  <color name="green">&lt;k:id&gt;</color>3<color name="green">&lt;/k:id&gt;</color>
  <color name="green">&lt;k:name&gt;</color>Gundula<color name="green">&lt;/k:name&gt;</color>
  <color name="green">&lt;k:eMail&gt;</color>gundl@gundula.de<color name="green">&lt;/k:eMail&gt;</color>
<color name="green">&lt;/k:kunde&gt;</color>

<color name="green">&lt;b:bestellung&gt;</color>
  <color name="green">&lt;b:id&gt;</color>1<color name="green">&lt;/b:id&gt;</color>
  <color name="green">&lt;b:datum&gt;</color>02.01.2019<color name="green">&lt;/b:datum&gt;</color>
  <color name="green">&lt;b:preis&gt;</color>99.90<color name="green">&lt;/b:preis&gt;</color>
  <color name="green">&lt;kunde-id&gt;</color>2<color name="green">&lt;/kunde-id&gt;</color>
<color name="green">&lt;/b:bestellung&gt;</color>

<color name="green">&lt;b:bestellung&gt;</color>
  <color name="green">&lt;b:id&gt;</color>2<color name="green">&lt;/b:id&gt;</color>
  <color name="green">&lt;b:datum&gt;</color>03.01.2019<color name="green">&lt;/b:datum&gt;</color>
  <color name="green">&lt;b:preis&gt;</color>68.90<color name="green">&lt;/b:preis&gt;</color>
  <color name="green">&lt;b:kunde-id&gt;</color>1<color name="green">&lt;/b:kunde-id&gt;</color>
<color name="green">&lt;/b:bestellung&gt;</color></verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Will man sich alle Kunden anzeigen lassen, die eine Bestellung 
abgegeben haben - das sind Alex und Horst - so würde man bei
einem relationalen Ansatz einen JOIN verwenden, so wie:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim>SELECT name, datum, preis
FROM kunden k
INNER JOIN bestellungen b
ON k.id = b.kunde_id</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>In einer relationalen Sicht würde uns das dann die folgende Tabelle liefern:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim>name, datum, preis
Alex, 03.01.2019, 68.90
Horst, 02.01.2019, 99.90</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Um für MarkLogic eine SQL View zu definieren verwendet man einen Mechanismus,
der da heisst: Template Driven Extraction<footnote>
                     <desc>https://docs.marklogic.com/guide/app-dev/TDE</desc>
                     <add>Template Driven Extraction wird verwendet um in MarkLogic eine relationale Sicht auf die baumstrukturierten Daten zu setzen</add>
                  </footnote>
               </p>
            </column-wide-element>
                  <column-wide-element>
               <p>Dazu werden Templates in XML deklariert und in die Template Collection eingefügt. Für unser obiges Beispiel
würden wir zwei Templates brauchen, die so aussehen:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim>xquery version "1.0-ml";

import <color name="brown">module </color><color name="brown">namespace </color>tde = "http://marklogic.com/xdmp/tde" 
                            at "/MarkLogic/tde.xqy";

<color name="brown">let </color><color name="red">$sql-view-name</color> := 'kunden-view.xml'
<color name="brown">let </color><color name="red">$sql-view</color> := <color name="green">&lt;template </color><color name="green">xmlns</color>="http://marklogic.com/xdmp/tde"<color name="green">&gt;</color>
   <color name="green">&lt;path-namespaces&gt;</color>
      <color name="green">&lt;path-namespace&gt;</color>
         <color name="green">&lt;prefix&gt;</color>k<color name="green">&lt;/prefix&gt;</color>
         <color name="green">&lt;namespace-uri&gt;</color>https://tekturcms.de/schema/kunde/1.0<color name="green">&lt;/namespace-uri&gt;</color>
      <color name="green">&lt;/path-namespace&gt;</color>
   <color name="green">&lt;/path-namespaces&gt;</color>
   <color name="green">&lt;context&gt;</color>/k:kunde<color name="green">&lt;/context&gt;</color>
   <color name="green">&lt;collections&gt;</color>
      <color name="green">&lt;collections-and&gt;</color>
         <color name="green">&lt;collection&gt;</color>/kunden<color name="green">&lt;/collection&gt;</color>
      <color name="green">&lt;/collections-and&gt;</color>
   <color name="green">&lt;/collections&gt;</color>
   <color name="green">&lt;rows&gt;</color>
      <color name="green">&lt;row&gt;</color>
         <color name="green">&lt;schema-name&gt;</color>kunden_schema<color name="green">&lt;/schema-name&gt;</color>
         <color name="green">&lt;view-name&gt;</color>kunden_view<color name="green">&lt;/view-name&gt;</color>
         <color name="green">&lt;columns&gt;</color>
            <color name="green">&lt;column&gt;</color>
               <color name="green">&lt;name&gt;</color>id<color name="green">&lt;/name&gt;</color>
               <color name="green">&lt;scalar-type&gt;</color>string<color name="green">&lt;/scalar-type&gt;</color>
               <color name="green">&lt;val&gt;</color>k:id<color name="green">&lt;/val&gt;</color>
               <color name="green">&lt;nullable&gt;</color>true<color name="green">&lt;/nullable&gt;</color>
            <color name="green">&lt;/column&gt;</color>
            <color name="green">&lt;column&gt;</color>
               <color name="green">&lt;name&gt;</color>datum<color name="green">&lt;/name&gt;</color>
               <color name="green">&lt;scalar-type&gt;</color>string<color name="green">&lt;/scalar-type&gt;</color>
               <color name="green">&lt;val&gt;</color>k:datum<color name="green">&lt;/val&gt;</color>
               <color name="green">&lt;nullable&gt;</color>true<color name="green">&lt;/nullable&gt;</color>
            <color name="green">&lt;/column&gt;</color>
            <color name="green">&lt;column&gt;</color>
               <color name="green">&lt;name&gt;</color>eMail<color name="green">&lt;/name&gt;</color>
               <color name="green">&lt;scalar-type&gt;</color>string<color name="green">&lt;/scalar-type&gt;</color>
               <color name="green">&lt;val&gt;</color>k:eMail<color name="green">&lt;/val&gt;</color>
               <color name="green">&lt;nullable&gt;</color>true<color name="green">&lt;/nullable&gt;</color>
            <color name="green">&lt;/column&gt;</color>
         <color name="green">&lt;/columns&gt;</color>
      <color name="green">&lt;/row&gt;</color>
   <color name="green">&lt;/rows&gt;</color>
<color name="green">&lt;/template&gt;</color>
return(
  <color name="blue">tde:template-insert</color>(concat('/templates/', <color name="red">$sql-view-name</color>), 
                      <color name="red">$sql-view</color>, <color name="blue">xdmp:default-permissions</color>())
)</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>und analog für die Bestellungen:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim>[...]
   <color name="green">&lt;rows&gt;</color>
      <color name="green">&lt;row&gt;</color>
         <color name="green">&lt;schema-name&gt;</color>bestellungen_schema<color name="green">&lt;/schema-name&gt;</color>
         <color name="green">&lt;view-name&gt;</color>bestellungen_view<color name="green">&lt;/view-name&gt;</color>
         <color name="green">&lt;columns&gt;</color>
            <color name="green">&lt;column&gt;</color>
               <color name="green">&lt;name&gt;</color>id<color name="green">&lt;/name&gt;</color>
               <color name="green">&lt;scalar-type&gt;</color>string<color name="green">&lt;/scalar-type&gt;</color>
               <color name="green">&lt;val&gt;</color>b:id<color name="green">&lt;/val&gt;</color>
            <color name="green">&lt;/column&gt;</color>
            <color name="green">&lt;column&gt;</color>
               <color name="green">&lt;name&gt;</color>datum<color name="green">&lt;/name&gt;</color>
               <color name="green">&lt;scalar-type&gt;</color>string<color name="green">&lt;/scalar-type&gt;</color>
               <color name="green">&lt;val&gt;</color>b:datum<color name="green">&lt;/val&gt;</color>
            <color name="green">&lt;/column&gt;</color>
            <color name="green">&lt;column&gt;</color>
               <color name="green">&lt;name&gt;</color>preis<color name="green">&lt;/name&gt;</color>
               <color name="green">&lt;scalar-type&gt;</color>string<color name="green">&lt;/scalar-type&gt;</color>
               <color name="green">&lt;val&gt;</color>b:preis<color name="green">&lt;/val&gt;</color>
            <color name="green">&lt;/column&gt;</color>
            <color name="green">&lt;column&gt;</color>
               <color name="green">&lt;name&gt;</color>kunde_id<color name="green">&lt;/name&gt;</color>
               <color name="green">&lt;scalar-type&gt;</color>string<color name="green">&lt;/scalar-type&gt;</color>
               <color name="green">&lt;val&gt;</color>b:kunde-id<color name="green">&lt;/val&gt;</color>
            <color name="green">&lt;/column&gt;</color>
         <color name="green">&lt;/columns&gt;</color>
      <color name="green">&lt;/row&gt;</color>
[...]</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>In XQuery eingebunden könnte man dann die definierten SQL Views mit dem folgenden Befehl abfragen:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="blue">xdmp:sql</color>("SELECT name, datum, preis FROM kunden_view k 
          INNER JOIN bestellungen_view b ON k.id = b.kunde_id")</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Folgende ist das komplette Beispiel für eine MarkLogic XQuery Konsolensitzung abgebildet ...</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim>xquery version "1.0-ml";

<color name="brown">declare </color><color name="brown">namespace </color>k = 'http://www.tekturcms.de/kunden';
<color name="brown">declare </color><color name="brown">namespace </color>b = 'http://www.tekturcms.de/bestellungen';

import <color name="brown">module </color><color name="brown">namespace </color>tde = "http://marklogic.com/xdmp/tde" at "/MarkLogic/tde.xqy";

<color name="brown">declare </color><color name="brown">function </color><color name="blue">local:loadKunde</color>(<color name="red">$id</color>, <color name="red">$name</color>, <color name="red">$eMail</color>)
{
  <color name="brown">let </color><color name="red">$root</color> :=
  <color name="green">&lt;k:kunde&gt;</color>
    <color name="green">&lt;k:id&gt;</color>{ <color name="red">$id</color> }<color name="green">&lt;/k:id&gt;</color>
    <color name="green">&lt;k:name&gt;</color>{ <color name="red">$name</color> }<color name="green">&lt;/k:name&gt;</color>
    <color name="green">&lt;k:eMail&gt;</color>{ <color name="red">$eMail</color> }<color name="green">&lt;/k:eMail&gt;</color>
  <color name="green">&lt;/k:kunde&gt;</color>,
  <color name="red">$options</color> :=
  <color name="green">&lt;options </color><color name="green">xmlns</color>="xdmp:document-insert"<color name="green">&gt;</color>  
    <color name="green">&lt;permissions&gt;</color>{ <color name="blue">xdmp:default-permissions</color>() }<color name="green">&lt;/permissions&gt;</color>
    <color name="green">&lt;collections&gt;</color>
      <color name="green">&lt;collection&gt;</color>/kunden<color name="green">&lt;/collection&gt;</color>
    <color name="green">&lt;/collections&gt;</color>
  <color name="green">&lt;/options&gt;</color>,
  <color name="red">$fname</color> := concat('/kunden/',<color name="red">$id</color>,".xml")
  <color name="brown">return </color><color name="blue">xdmp:document-insert</color>(<color name="red">$fname</color>,<color name="red">$root</color>,<color name="red">$options</color>)
};

<color name="brown">declare </color><color name="brown">function </color><color name="blue">local:loadBestellung</color>(<color name="red">$id</color>, <color name="red">$datum</color>, <color name="red">$preis</color>, <color name="red">$kunde-id</color>)
{
  <color name="brown">let </color><color name="red">$root</color> :=
  <color name="green">&lt;b:bestellung&gt;</color>
    <color name="green">&lt;b:id&gt;</color>{ <color name="red">$id</color> }<color name="green">&lt;/b:id&gt;</color>
    <color name="green">&lt;b:datum&gt;</color>{ <color name="red">$datum</color> }<color name="green">&lt;/b:datum&gt;</color>
    <color name="green">&lt;b:preis&gt;</color>{ <color name="red">$preis</color> }<color name="green">&lt;/b:preis&gt;</color>
    <color name="green">&lt;b:kunde-id&gt;</color>{ <color name="red">$kunde-id</color> }<color name="green">&lt;/b:kunde-id&gt;</color>
  <color name="green">&lt;/b:bestellung&gt;</color>,
  <color name="red">$options</color> :=
  <color name="green">&lt;options </color><color name="green">xmlns</color>="xdmp:document-insert"<color name="green">&gt;</color>  
    <color name="green">&lt;permissions&gt;</color>{ <color name="blue">xdmp:default-permissions</color>() }<color name="green">&lt;/permissions&gt;</color>
    <color name="green">&lt;collections&gt;</color>
      <color name="green">&lt;collection&gt;</color>/bestellungen<color name="green">&lt;/collection&gt;</color>
    <color name="green">&lt;/collections&gt;</color>
  <color name="green">&lt;/options&gt;</color>,
  <color name="red">$fname</color> := concat('/bestellungen/',<color name="red">$id</color>,".xml")
  <color name="brown">return </color><color name="blue">xdmp:document-insert</color>(<color name="red">$fname</color>,<color name="red">$root</color>,<color name="red">$options</color>)
};

<color name="brown">declare </color><color name="brown">function </color><color name="blue">local:insertKundenSchema</color>()
{
  <color name="brown">let </color><color name="red">$sql-view-name</color> := 'kunden-view.xml',
      <color name="red">$sql-view</color> := <color name="green">&lt;template </color><color name="green">xmlns</color>="http://marklogic.com/xdmp/tde"<color name="green">&gt;</color>
    <color name="green">&lt;path-namespaces&gt;</color>
      <color name="green">&lt;path-namespace&gt;</color>
        <color name="green">&lt;prefix&gt;</color>k<color name="green">&lt;/prefix&gt;</color>
        <color name="green">&lt;namespace-uri&gt;</color>http://www.tekturcms.de/kunden<color name="green">&lt;/namespace-uri&gt;</color>
       <color name="green">&lt;/path-namespace&gt;</color>
    <color name="green">&lt;/path-namespaces&gt;</color>
    <color name="green">&lt;context&gt;</color>/k:kunde<color name="green">&lt;/context&gt;</color>
     <color name="green">&lt;collections&gt;</color>
       <color name="green">&lt;collections-and&gt;</color>
         <color name="green">&lt;collection&gt;</color>/kunden<color name="green">&lt;/collection&gt;</color>
      <color name="green">&lt;/collections-and&gt;</color>
     <color name="green">&lt;/collections&gt;</color>
     <color name="green">&lt;rows&gt;</color>
       <color name="green">&lt;row&gt;</color>
         <color name="green">&lt;schema-name&gt;</color>kunden_schema<color name="green">&lt;/schema-name&gt;</color>
         <color name="green">&lt;view-name&gt;</color>kunden_view<color name="green">&lt;/view-name&gt;</color>
         <color name="green">&lt;columns&gt;</color>
            <color name="green">&lt;column&gt;</color>
               <color name="green">&lt;name&gt;</color>id<color name="green">&lt;/name&gt;</color>
               <color name="green">&lt;scalar-type&gt;</color>string<color name="green">&lt;/scalar-type&gt;</color>
               <color name="green">&lt;val&gt;</color>k:id<color name="green">&lt;/val&gt;</color>
            <color name="green">&lt;/column&gt;</color>
            <color name="green">&lt;column&gt;</color>
               <color name="green">&lt;name&gt;</color>name<color name="green">&lt;/name&gt;</color>
               <color name="green">&lt;scalar-type&gt;</color>string<color name="green">&lt;/scalar-type&gt;</color>
               <color name="green">&lt;val&gt;</color>k:name<color name="green">&lt;/val&gt;</color>
            <color name="green">&lt;/column&gt;</color>
          <color name="green">&lt;column&gt;</color>
             <color name="green">&lt;name&gt;</color>eMail<color name="green">&lt;/name&gt;</color>
             <color name="green">&lt;scalar-type&gt;</color>string<color name="green">&lt;/scalar-type&gt;</color>
             <color name="green">&lt;val&gt;</color>k:eMail<color name="green">&lt;/val&gt;</color>
          <color name="green">&lt;/column&gt;</color>
        <color name="green">&lt;/columns&gt;</color>
      <color name="green">&lt;/row&gt;</color>
    <color name="green">&lt;/rows&gt;</color>
  <color name="green">&lt;/template&gt;</color>
  return
    <color name="blue">tde:template-insert</color>(concat('/templates/', 
                        <color name="red">$sql-view-name</color>), <color name="red">$sql-view</color>, <color name="blue">xdmp:default-permissions</color>())
};

<color name="brown">declare </color><color name="brown">function </color><color name="blue">local:insertBestellungenSchema</color>()
{
  <color name="brown">let </color><color name="red">$sql-view-name</color> := 'bestellungen-view.xml',
      <color name="red">$sql-view</color> := <color name="green">&lt;template </color><color name="green">xmlns</color>="http://marklogic.com/xdmp/tde"<color name="green">&gt;</color>
    <color name="green">&lt;path-namespaces&gt;</color>
      <color name="green">&lt;path-namespace&gt;</color>
        <color name="green">&lt;prefix&gt;</color>b<color name="green">&lt;/prefix&gt;</color>
        <color name="green">&lt;namespace-uri&gt;</color>http://www.tekturcms.de/bestellungen<color name="green">&lt;/namespace-uri&gt;</color>
       <color name="green">&lt;/path-namespace&gt;</color>
    <color name="green">&lt;/path-namespaces&gt;</color>
    <color name="green">&lt;context&gt;</color>/b:bestellung<color name="green">&lt;/context&gt;</color>
     <color name="green">&lt;collections&gt;</color>
       <color name="green">&lt;collections-and&gt;</color>
         <color name="green">&lt;collection&gt;</color>/bestellungen<color name="green">&lt;/collection&gt;</color>
      <color name="green">&lt;/collections-and&gt;</color>
     <color name="green">&lt;/collections&gt;</color>
     <color name="green">&lt;rows&gt;</color>
       <color name="green">&lt;row&gt;</color>
         <color name="green">&lt;schema-name&gt;</color>bestellungen_schema<color name="green">&lt;/schema-name&gt;</color>
         <color name="green">&lt;view-name&gt;</color>bestellungen_view<color name="green">&lt;/view-name&gt;</color>
         <color name="green">&lt;columns&gt;</color>
            <color name="green">&lt;column&gt;</color>
               <color name="green">&lt;name&gt;</color>id<color name="green">&lt;/name&gt;</color>
               <color name="green">&lt;scalar-type&gt;</color>string<color name="green">&lt;/scalar-type&gt;</color>
               <color name="green">&lt;val&gt;</color>b:id<color name="green">&lt;/val&gt;</color>
            <color name="green">&lt;/column&gt;</color>
            <color name="green">&lt;column&gt;</color>
               <color name="green">&lt;name&gt;</color>datum<color name="green">&lt;/name&gt;</color>
               <color name="green">&lt;scalar-type&gt;</color>string<color name="green">&lt;/scalar-type&gt;</color>
               <color name="green">&lt;val&gt;</color>b:datum<color name="green">&lt;/val&gt;</color>
            <color name="green">&lt;/column&gt;</color>
          <color name="green">&lt;column&gt;</color>
             <color name="green">&lt;name&gt;</color>preis<color name="green">&lt;/name&gt;</color>
             <color name="green">&lt;scalar-type&gt;</color>string<color name="green">&lt;/scalar-type&gt;</color>
             <color name="green">&lt;val&gt;</color>b:preis<color name="green">&lt;/val&gt;</color>
          <color name="green">&lt;/column&gt;</color>
          <color name="green">&lt;column&gt;</color>
             <color name="green">&lt;name&gt;</color>kunde_id<color name="green">&lt;/name&gt;</color>
             <color name="green">&lt;scalar-type&gt;</color>string<color name="green">&lt;/scalar-type&gt;</color>
             <color name="green">&lt;val&gt;</color>b:kunde-id<color name="green">&lt;/val&gt;</color>
          <color name="green">&lt;/column&gt;</color>
        <color name="green">&lt;/columns&gt;</color>
      <color name="green">&lt;/row&gt;</color>
    <color name="green">&lt;/rows&gt;</color>
  <color name="green">&lt;/template&gt;</color>
  return
    <color name="blue">tde:template-insert</color>(concat('/templates/', 
                        <color name="red">$sql-view-name</color>), <color name="red">$sql-view</color>, <color name="blue">xdmp:default-permissions</color>())
};<color name="blue">
local:loadKunde</color>("1","Alex","tekturcms@gmail.com"),<color name="blue">
local:loadKunde</color>("2","Horst","horst@horst.de"),<color name="blue">
local:loadKunde</color>("3","Gundula","gundl@gundula.de"),<color name="blue">
local:loadBestellung</color>("1","02.01.2019","99.90","2"),<color name="blue">
local:loadBestellung</color>("2","03.01.2019","68.90","1"),<color name="blue">
local:insertKundenSchema</color>(),<color name="blue">
local:insertBestellungenSchema</color>(),
<color name="blue">
xdmp:sql</color>("SELECT name, datum, preis FROM kunden_view k INNER JOIN 
          bestellungen_view b ON k.id = b.kunde_id")</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>... mit einer schönen tabellarischen Ausgabe im unteren Panel der Query Konsole - oder als JSON:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim>[
  [
    "k.name", 
    "b.datum", 
    "b.preis"
  ], 
  [
    "Alex", 
    "03.01.2019", 
    "68.90"
  ], 
  [
    "Horst", 
    "02.01.2019", 
    "99.90"
  ]
]</verbatim>
            </page-wide-element>
               
            
         </chapter>
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="d2e2238" ismodule="no">
         
            <title>
               <title id="05ed1e37-8006-4bb7-ba6a-7c143ff22106">Testing</title>
            </title>
            
               <column-wide-element>
            <p>In diese Kapitel werden einige ausgewählte Themen zum Testing von XSLT und XQuery Programmen dargestellt. Dabei geht es weder um Vollständigkeit noch um die beste/eleganteste Lösung, sondern eher um die Vorstellung eines Anwendungsszenarios mit einem potentiellen Lösungsansatz.</p>
         </column-wide-element>
            
         
         <chapter hyphenation="yes" chapterpage="no" id="d2e2255" ismodule="no">
            
               <title>
                  <title id="a693fc99-5e16-4788-95a0-958870aa845a">Validierung mit Schematron</title>
               </title>
               
                  <column-wide-element>
               <p>Um die Korrektheit einer XML Instanz zu prüfen, gib es verschiedene Schemata, wie XSD, RNG oder DTD<xe>
                     <first criterion="Schemata">Schemata</first>
                  </xe>, welche der Parser beim Aufbau des DOM Baums heranzieht. Eine Validierung<xe>
                     <first criterion="Verarbeitungsmethoden">Verarbeitungsmethoden</first>
                     <second criterion="Validierung">Validierung</second>
                  </xe> mit Apache Xerces könnte beispielsweise als Java Code<xe>
                     <first criterion="Programmiersprachen">Programmiersprachen</first>
                     <second criterion="Java">Java</second>
                  </xe> folgendermaßen angestossen werden:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim>URL schemaFile = new URL("http://host:port/filename.xsd");
Source xmlFile = new StreamSource(new File("web.xml"));
SchemaFactory schemaFactory = SchemaFactory
    .newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
try {
  Schema schema = schemaFactory.newSchema(schemaFile);
  Validator validator = schema.newValidator();
  validator.validate(xmlFile);
  System.out.println(xmlFile.getSystemId() + " is valid");
} catch (SAXException e) {
  System.out.println(xmlFile.getSystemId() + " is NOT valid reason:" + e);
} catch (IOException e) {</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Schema Dateien können aber auch in XML Editoren eingebunden werden, um schon während der Eingabe der XML Instanz die Korrektheit zu überprüfen. </p>
            </column-wide-element>
                  <column-wide-element>
               <p>Das geht einerseits über die Angabe des Doctypes in der XML Instanz, anderseits bieten auch alle Editoren die Möglichkeit ein bestimmtes Schema explizit auszuwählen, um gegen dieses auf Anforderung zu validieren.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Gilt es komplexere Businessregeln zu überprüfen, die über Syntax-, Konsistenz- und einfache Korrektheitschecks hinausgehen, empfiehlt sich eine Validierung mit Schematron Regeln.</p>
            </column-wide-element>
                  <block-title>
                     <title id="c802dd14-5953-4c24-8637-f7552d107e57d6e13">Schematron ist XSLT</title>
                  </block-title>
                  <column-wide-element>
               <p>Bei einer Schematron Validierung wird eine XML Instanz mit Hilfe eines automatisch generierten XSLT Stylesheets überprüft. Dieses kontextabhängige Stylesheet wird aus einer in der Schematron Syntax vom Autor verfassten Regelbasis, die wiederum in XML vorliegt, über ein zweites XSLT Stylesheet generiert - Dieses zweite XSLT Stylesheet ist sozusagen das eigentliche Schematron Programm. </p>
            </column-wide-element>
                  <column-wide-element>
               <p>Das folgende Diagramm veranschaulicht die Vorgehensweise anhand eines Filter-Szenarios<xe>
                     <first criterion="Verarbeitungsmethoden">Verarbeitungsmethoden</first>
                     <second criterion="Filter-Szenario">Filter-Szenario</second>
                  </xe>, bei dem ein XML Dokument mit einigen ungültigen Passagen in eine gefilterte Darstellung überführt wird.</p>
            </column-wide-element>
                  <page-wide-element>
               <figure pdfwidth="page">
                     <column-wide-element>
                     <subtitle>Schematron Validierung mit Filter</subtitle>
                  </column-wide-element>
                     <desc id="70b1fb39-5f41-4889-952c-5ab7a7c131fbd6e25">Einfacher Batch-Prozess zur Validierung mit Schematron und anschliessendem Filtern der Ergebnisse</desc>
                     <img src="./client/data/6fd7b270-9d1f-4f8e-996f-13b5862956a9/schematron.svg"/>
                  </figure>
            </page-wide-element>
                  <column-wide-element>
               <p>Zu finden ist das Schematron Programm auf Github<footnote>
                     <desc>https://github.com/Schematron/schematron</desc>
                     <add>Schematron auf GitHub</add>
                  </footnote>. Dieses Repo ist etwas unübersichtlich. Der relevante Teil des Sourcecodes befindet sich unter: <b>schematron/code</b>
                  </p>
            </column-wide-element>
                  <block-title>
                     <title id="0cc5ca05-4506-44eb-981b-f74a156e6da0d6e20">CLI Verwendung</title>
                  </block-title>
                  <column-wide-element>
               <p>Um die Schematron XSLT Skripte in eine eigene XSLT Anwendung per Kommandozeile einzubinden, könnte man folgendermassen vorgehen: </p>
            </column-wide-element>
                  <column-wide-element>
               <ul>
                     <li>
                        <p>Im eigenen GIT Projekt das Schematron Projekt als Submodule referenzieren.</p>
                     </li>
                     <li>
                        <p>Eine Regelbasis anlegen, beispielsweise <b>$project_name.sch</b>.</p>
                     </li>
                     <li>
                        <p>Zwei Batch-Skripte anlegen, beispielsweise <b>generate_schema.sh</b> und <b>validate.sh</b>.</p>
                     </li>
                  </ul>
            </column-wide-element>
                  <column-wide-element>
               <p>Mittels des Skripts <b>generate_schema.sh</b> wird aus der Schematron Regelbasis das Schematron XSLT Stylesheet generiert. Der Inhalt dieser Batchdatei könnte zum Beispiel so aussehen:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim>saxon <color name="red">$script</color>_dir/<color name="red">$project</color>_name_validation.sch <color name="red">$script</color>_dir/schematron/iso_dsdl_include.xsl
 | \ saxon -s:- <color name="red">$script</color>_dir/schematron/iso_abstract_expand.xsl | \
saxon -s:- <color name="red">$script</color>_dir/schematron/iso_svrl_for_xslt2.xsl \
  <b>generate-fired-rule</b>=false &gt; <color name="red">$script</color>_dir/<color name="red">$project</color>_name_validation.xsl</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Der Prozess zum Erzeugen des projektspezifischen Validerungs-XSLT-Skripts ist dreistufig und wird über die folgenden XSLT Schritte abgearbeitet.</p>
            </column-wide-element>
                  <column-wide-element>
               <ul>
                     <li>
                        <p>iso_dsdl_include.xsl</p>
                     </li>
                     <li>
                        <p>iso_abstract_expand.xsl</p>
                     </li>
                     <li>
                        <p>iso_svrl_for_xslt2.xsl</p>
                     </li>
                  </ul>
            </column-wide-element>
                  <column-wide-element>
               <p>Herauszufinden, was in diesen Skripten passiert, sei dem geneigten Leser selbst überlassen. Uns interessiert an dieser Stelle nur das Resultat, nämlich das XSLT Stylesheet <b>$project_name_validation.xsl.</b>
                  </p>
            </column-wide-element>
                  <column-wide-element>
               <p>Dieses Skript wird in der Batchdatei <b>validate.sh</b> aufgerufen:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim>saxon <color name="red">$xml</color>_instance_to_check.xml <color name="red">$script</color>_dir/<color name="red">$project</color>_name_validation.xsl \
  &gt; <color name="red">$validation-result</color>.xml</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Die Ausgabe dieses Prüfprozesses ist eine XML Datei mit den Fehlern in der Eingabe-XML-Instanz, die weiterverarbeitet werden kann, beispielsweise als Filterkriterium für einen nachfolgenden Prozessschritt. Ihr Inhalt dieser Datei sieht z.B. wie folgt aus:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="green">&lt;svrl:schematron-output </color><color name="green">xmlns:svrl</color>="http://purl.oclc.org/dsdl/svrl" <color name="green"></color>= <color name="green"></color>= <color name="green">document</color>="file:/Users/alex/xml_instance_to_check.xml" <color name="green">id</color>="default" <color name="green">name</color>="default"/<color name="green">&gt;</color>
  <color name="green">&lt;svrl:failed-assert </color><color name="green">test</color>="count(key('unique-ids', <color name="green">current()))</color>=1"<color name="green">&gt;</color>
    <color name="green">&lt;svrl:text&gt;</color>ID is not unique!<color name="green">&lt;/svrl:text&gt;</color>
    <color name="green">&lt;svrl:diagnostic-reference </color><color name="green">diagnostic</color>="default"<color name="green">&gt;</color>
      <color name="green">&lt;bk:id </color><color name="green">xmlns:bk</color>="http://tekturcms/namespaces/book"<color name="green">&gt;</color>1234-5678-9<color name="green">&lt;/my:id&gt;</color>
    <color name="green">&lt;/svrl:diagnostic-reference&gt;</color>
  <color name="green">&lt;/svrl:failed-assert&gt;</color>
  [...]</verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Neben den <b>svrl:failed-assert</b> Elementen, die angeben, was bei der überprüften XML-Instanz fehlgeschlagen ist, gibt es auch die Möglichkeit sich positive Ergebnisse anzeigen zu lassen - über das Element <b>svrl:successful-report</b>.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Konkret bedeutet das obige XML Schnipsel, dass unsere <b>id</b> mit dem Wert <b>1234-5688-9</b> im geprüften XML Dokument nicht eindeutig ist. Die Schematron Regelbasis, die wir zur Überprüfung angegebenen haben, sieht so aus:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="green">&lt;schema </color><color name="green">xmlns:sch</color>="http://purl.oclc.org/dsdl/schematron" <color name="green"></color>= <color name="green"></color>= <color name="green">name</color>="unique-ids" <color name="green">match</color>="bk:id" <color name="green">use</color>="."/<color name="green">&gt;</color>
  &lt;sch:<color name="brown">let </color>name="date-regex" value="'^((19|2[0-9])[0-9]{2})-(0[1-9]|1[012])
                                     -(0[1-9]|[12][0-9]|3[01])$'"/&gt;
  <color name="green">&lt;sch:pattern </color><color name="green">id</color>="default"<color name="green">&gt;</color>
    <color name="green">&lt;sch:rule </color><color name="green">context</color>="book"<color name="green">&gt;</color>
      <color name="green">&lt;sch:assert </color><color name="green">id</color>="check-book-id" <color name="green">role</color>="error" <color name="green">test</color>="count(key('unique-ids', <color name="green">bk:id))</color>=1" <color name="green">diagnostics</color>="default"<color name="green">&gt;</color>ID is not unique!<color name="green">&lt;/sch:assert&gt;</color>
      <color name="green">&lt;sch:assert </color><color name="green">id</color>="check-book-published" <color name="green">role</color>="error" <color name="green">test</color>="matches(bk:published,$date-regex) <color name="green"></color>=<color name="green">&gt;</color>
    [...]
  <color name="green">&lt;/sch:pattern&gt;</color>
  <color name="green">&lt;sch:diagnostics&gt;</color>
    <color name="green">&lt;sch:diagnostic </color><color name="green">id</color>="default"<color name="green">&gt;</color>
      <color name="green"><bg>&lt;xsl:element</bg> </color><color name="green">name</color>="bk:id"<color name="green">&gt;</color>
        <color name="green"><bg>&lt;xsl:value-of</bg> </color><color name="green">select</color>="bk:id"/<color name="green">&gt;</color>
      <color name="green"><bg>&lt;/xsl:element&gt;</bg></color>
    <color name="green">&lt;/sch:diagnostic&gt;</color>
  <color name="green">&lt;/sch:diagnostics&gt;</color></verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Neben der "successful" und "failed" Regeln ist auch die Deklaration von Funktionen und Variablen im Body der Regelbasis erlaubt. Dies ermöglicht komplexe Bedingungen, bespw. durch das Nachschlagen in einer Lookup-Tabelle abzuprüfen. </p>
            </column-wide-element>
               
            
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="d2e2438" ismodule="no">
            
               <title>
                  <title id="9b1e7086-25cc-4bdf-ba77-6adfb503603b">Erste Schritte mit Xspec</title>
               </title>
               
                  <column-wide-element>
               <p>XSpec<xe>
                     <first criterion="Tools">Tools</first>
                     <second criterion="XSpec">XSpec</second>
                  </xe> ist ein <b>Test-Framework</b>
                  <footnote>
                     <desc>https://github.com/xspec</desc>
                     <add>XSpec auf GitHub</add>
                  </footnote>
                  <xe>
                     <first criterion="Test-Framework">Test-Framework</first>
                  </xe> für XSLT, XQuery und Schematron. 
Um beispielsweise komplexe Schematron Regeln zu testen, hinterlegt man in einem <b>Test-Szenario</b> 
Erwartungswerte für positive und negative Testfälle in Form von XML Schnippseln.</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="green">&lt;test-szenario&gt;</color>
  <color name="green">&lt;testfall&gt;</color>
    <color name="green">&lt;personen&gt;</color>
      <color name="green">&lt;person&gt;</color>
        <color name="green">&lt;vorname&gt;</color>Horst<color name="green">&lt;/vorname&gt;</color>
        &lt;<b>nachname</b>&gt;Schlämmer&lt;/<b>nachname</b>&gt;
        <color name="green">&lt;gewicht&gt;</color>100<color name="green">&lt;/gewicht&gt;</color>
      <color name="green">&lt;/person&gt;</color>
      <color name="green">&lt;person&gt;</color>
        <color name="green">&lt;vorname&gt;</color>Gundula<color name="green">&lt;/vorname&gt;</color>
        &lt;<b>nachname</b>&gt;&lt;/<b>nachname</b>&gt;
        <color name="green">&lt;gewicht&gt;</color>60<color name="green">&lt;/gewicht&gt;</color>
      <color name="green">&lt;/person&gt;</color>
    <color name="green">&lt;/personen&gt;</color>
  <color name="green">&lt;/testfall&gt;</color>
<color name="green">&lt;/test-szenario&gt;</color></verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>in einer XSpec Datei *. werden <b>Assert- und Not-Assert-Methoden</b> 
                  <xe>
                     <first criterion="Assert- und Not-Assert">Assert- und Not-Assert</first>
                  </xe>deklariert:</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="green">&lt;x:description </color><color name="green">xslt-version</color>="2.0" <color name="green">xmlns:x</color>="http://www.jenitennison.com/xslt/xspec" <color name="green">schematron</color>="test.sch"<color name="green">&gt;</color>
  <color name="green">&lt;x:scenario </color><color name="green">label</color>="ALL"<color name="green">&gt;</color>
    <color name="green">&lt;x:context </color><color name="green">href</color>="test.xml"/<color name="green">&gt;</color>
    &lt;x:expect-not-assert id="person-nachname-rule" location="//person[1]/<b>nachname</b>"/&gt;
    &lt;x:expect-assert id="person-nachname-rule" location="//person[2]/<b>nachname</b>"/&gt;
  <color name="green">&lt;/x:scenario&gt;</color>
<color name="green">&lt;/x:description&gt;</color></verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>Grds. bdeutet ein Assert, dass das Mapping zwischen tatsächlichem Wert und Erwartungswert des
Testfalls<xe>
                     <first criterion="Testfall">Testfall</first>
                  </xe> positiv erfüllt ist. Beim Not-Assert ist das Gegenteil der Fall. Im obigen Beispiel
reichen zwei Regeln, um den Testfall vollständig abzudecken.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Wenn man Schematron<xe>
                     <first criterion="Tools">Tools</first>
                     <second criterion="Schematron">Schematron</second>
                  </xe> Regeln mit Hilfe von XSpec testen will, dann muss man ein bisschen um 
die Ecke denken. Denn auch diese Regeln werden mittels Assert und Not-Assert modelliert.</p>
            </column-wide-element>
                  <page-wide-element>
               <verbatim><color name="green">&lt;sch:schema </color><color name="green">xmlns:sch</color>="http://purl.oclc.org/dsdl/schematron" <color name="green">xmlns:xsl</color>="http://www.w3.org/1999/XSL/Transform" <color name="green">queryBinding</color>="xslt2"<color name="green">&gt;</color>
  <color name="green">&lt;sch:pattern </color><color name="green">id</color>="main"<color name="green">&gt;</color>
    &lt;sch:rule context="<b>nachname</b>"&gt;
      <color name="green">&lt;sch:assert </color><color name="green">id</color>="person-nachname-rule" <color name="green">role</color>="error" <color name="green">test</color>="normalize-space(.)"<color name="green">&gt;</color>
        Der Nachname der Person mit ID: <color name="green">&lt;sch:value-of </color><color name="green">select</color>="@id"/<color name="green">&gt;</color> fehlt! 
      <color name="green">&lt;/sch:assert&gt;</color>
    <color name="green">&lt;/sch:rule&gt;</color>
  <color name="green">&lt;/sch:pattern&gt;</color>
<color name="green">&lt;/sch:schema&gt;</color></verbatim>
            </page-wide-element>
                  <column-wide-element>
               <p>In der Schematron-Regel wird zugesichert (Assert), dass jede Person einen Nachnamen hat.</p>
            </column-wide-element>
                  <column-wide-element>
               <p>Hat sie keinen Nachnamen so wird der Bericht zum Fehlerfall in die Schematron Ergebnisdatei
geschrieben. Diese Datei wertet nun Xspec aus.</p>
            </column-wide-element>
                  <column-wide-element>
               <note>
                     <consequence>
                        <p>Erscheint ein Fehler (= das Feld <b>nachname</b> ist leer), so greift bei Xspec die Assert-Regel! Das ist die umgekehrte Logik zu den Schematron Regeln.</p>
                     </consequence>
                  </note>
            </column-wide-element>
                  <column-wide-element>
               <p>Als Eselsbrücke kann man
ein Assert in der Xspec Datei gleichsetzen mit <b>Appear</b> und ein Not-Assert mit
<b>Not-Appear</b>. <xe>
                     <first criterion="Tipps und Tricks">Tipps und Tricks</first>
                     <second criterion="Appear- und Not-Appear">Appear- und Not-Appear</second>
                  </xe>
               </p>
            </column-wide-element>
                  <column-wide-element>
               <p>Ein Assert sichert also zu, dass sich ein Fehlerbericht in der
Schematron Ergebnisdatei zum Testfall befindet. Ein Not-Assert sichert zu, dass
sich kein Fehlerbericht befindet. </p>
            </column-wide-element>
                  <column-wide-element>
               <p> Wie man sich leicht vorstellen kann, sind Assert-Regeln in diesem Fall leicht zu finden,
dazu muss man nur die Schematron Testregeln ins Leere zeigen lassen. Alles ist grün
und alles ist gut - dem Augenschein nach.</p>
            </column-wide-element>
               
            
         </chapter>
      </chapter>
   </chapter>
   <chapter hyphenation="yes" chapterpage="no" id="d2e2541" ismodule="no">
      
         <title>
            <title id="e4c14d2b-d2df-4a76-ac0c-4ecebfe223ae">Zusätzliches Know-How</title>
         </title>
         
            <column-wide-element>
         <p>Unsortierte Notizen, die für jeden XSLT-Programmierer interessant sein könnten.</p>
      </column-wide-element>
         
      
      <chapter hyphenation="yes" chapterpage="no" id="d2e2558" ismodule="no">
         
            <title>
               <title id="5d677796-4ebf-49b1-85ba-45315312a0e4">GIT Einmaleins </title>
            </title>
            
               <column-wide-element>
            <p>Im Fachbereich Technische Dokumentation wird neue Technologie ein bisschen langsamer adaptiert, als in anderen Disziplinen der IT - schliesslich muss ja erst alles dokumentiert werden ...</p>
         </column-wide-element>
               <column-wide-element>
            <p>Bei Versionsverwaltungssystemen ist das nicht anders. Doch inzwischen hat auch GIT<xe>
                  <first criterion="Tools">Tools</first>
                  <second criterion="GIT">GIT</second>
               </xe> in manchen Entwicklerbüros Einzug gehalten und verdrängt Subversion.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Ein Grund an dieser Stelle einmal zumindest die wichtigsten Befehle aufzulisten - Note to self:</p>
         </column-wide-element>
               <page-wide-element>
            <verbatim>GIT COMMANDS

CLONE
=====
git clone https://github.com/libgit2/libgit2
SIMPLE
======
git init
git add *
git commit -m "Form validation added”
[changes]
git add [changed files] or git commit -a
git diff —cached
git branch experimental
git checkout experimental
git commit -a -m "only in the experimental branch”
git checkout master
git merge experimental
git branch -d experimental

COLLABORATION
=============
push new branch git push -u origin newLocalBranch
bob$ git clone /home/alice/project myrepo
(edit files)
bob$ git commit -a
alice$ cd /home/alice/project
alice$ git pull /home/bob/myrepo master  (fetch &amp; merge)
(fetch and not merge)
alice$ git fetch /home/bob/myrepo master
alice$ git log -p HEAD..FETCH_HEAD
(visualization only)
gitk HEAD..FETCH_HEAD
gitk HEAD…FETCH_HEAD
—
git log
git show ea14 (firs chars is enough)
git grep "headline_font_size” v2.5

PULL REQUESTS
=============
(checkout branch)
git pull origin simple-examples
(changes)
git push origin simple-examples
Create a pull request using the form on the Github page and assign it to a Reviewer

MERGE CONFLICTS
===============
git pull origin master
=&gt; merga conflicts

TROUBLE SHOOTING
=================
git reset --hard origin/master
git tree
git status
git checkout 118886ee3f06738b53f089433078d35f4d70a8f9 vendor/error-report.xsl
git log --diff-filter=D --summary</verbatim>
         </page-wide-element>
            
         
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="d2e2585" ismodule="no">
         
            <title>
               <title id="46cfa469-01ec-434d-ab13-e24ce0b06467">XML Editoren </title>
            </title>
            
               <column-wide-element>
            <p>Der XSLT Styesheet-Entwickler wird sich  gewöhnlich mit Eingabedaten beschäftigen, die entweder automatisch mittels irgendeines Prozesses erzeugt wurden, oder die durch einen menschlichen Autor mit einem XML Editor<xe>
                  <first criterion="Tools">Tools</first>
                  <second criterion="XML Editor">XML Editor</second>
               </xe> eingegeben wurden.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Aus diesem Grund ist es ganz nützlich, die wichtigsten Editoren zu kennen. Wir unterscheiden zwischen Desktopapplikationen und Webanwendungen. Ausserdem unterscheiden wir noch ob der Editor WYSIWIG (<b>W</b>hat <b>Y</b>ou <b>S</b>ee <b>I</b>s <b>W</b>hat <b>Y</b>ou <b>G</b>et) oder WYSIWYM (<b>W</b>hat <b>Y</b>ou <b>S</b>ee <b>I</b>s <b>W</b>hat <b>Y</b>ou <b>M</b>ean) <xe>
                  <first criterion="WYSIWYG und WYSIWYM">WYSIWYG und WYSIWYM</first>
               </xe> unterstützt oder eine Mischung aus beidem darstellt.</p>
         </column-wide-element>
               <block-title>
                  <title id="346853d6-4d45-42f4-a7b8-77af38d96151d6e9">WYSIWYM Desktop</title>
               </block-title>
               <column-wide-element>
            <table type="dl">
                  <tgroup>
                     <colspec colwidth="0.25*"/>
                     <colspec colwidth="0.75*"/>
                     <tbody>
                        <row>
                           <entry>
                              <b>Editor</b>
                           </entry>
                           <entry>
                              <b>Beschreibung</b>
                           </entry>
                        </row>
                        <row>
                           <entry>XMetal<footnote>
                              <key>XM</key>
                              <desc>https://xmetal.com/</desc>
                              <add>Homepage des Desktop XML Editors XMetal</add>
                           </footnote>
                        </entry>
                           <entry>
                              <p>XMetal<xe>
                                 <first criterion="Tools">Tools</first>
                                 <second criterion="XMetal">XMetal</second>
                              </xe> ist wahrscheinlich der am weitesten verbreitete reine WYSIWYM Editor. Er hat Schnittstellen zu COM und Java und kann daher in eigene CMS integriert werden.</p>
                           </entry>
                        </row>
                        <row>
                           <entry>Arbortext XML Editor<footnote>
                              <key>EP</key>
                              <desc>https://www.ptc.com/en/products/service-lifecycle-management/arbortext/editor</desc>
                              <add>Website zum Arbortext XML Editor</add>
                           </footnote>
                        </entry>
                           <entry>
                              <p>Arbortext XML Editor, früher bekannt als EPIC ist sehr betagt. Ich hatte damit im Bereich Luftfahrt/Verteidigung zu tun. Bekanntermassen ist sein Tabelleneditor etwas buggy.</p>
                           </entry>
                        </row>
                     </tbody>
                  </tgroup>
               </table>
         </column-wide-element>
               <block-title>
                  <title id="4c42f7f1-6d2a-482d-8d84-2c500fb35927d6e74">WYSIWYG Desktop</title>
               </block-title>
               <column-wide-element>
            <p>XMetal kann so konfiguriert werden, dass bei einer einfachen DTD der Content Bereich wie Word aussieht. Auch Code Editoren, wie OxygenXML<xe>
                  <first criterion="Tools">Tools</first>
                  <second criterion="oXygen XML Editor">oXygen XML Editor</second>
               </xe> bieten diese Möglichkeit. Das Key-Handling bei dieser Variante zeigt aber schnell, dass die UX noch weit von herkömmlichen Textverarbeitungssystem, wie Word oder OpenOffice entfernt ist.  </p>
         </column-wide-element>
               <block-title>
                  <title id="092992f0-ac89-4bd8-bba5-a1d685135135d6e79">WYSIWYM Online</title>
               </block-title>
               <column-wide-element>
            <table type="dl">
                  <tgroup>
                     <colspec colwidth="0.25*"/>
                     <colspec colwidth="0.75*"/>
                     <tbody>
                        <row>
                           <entry>
                              <b>Editor</b>
                           </entry>
                           <entry>
                              <b>Beschreibung</b>
                           </entry>
                        </row>
                        <row>
                           <entry>Oxygen XML WebAuthor<footnote>
                              <key>OX</key>
                              <desc>https://www.oxygenxml.com/oxygen-xml-web-author/app/oxygen.html</desc>
                              <add>Der oXygen XML Web Editor im Web</add>
                           </footnote>
                        </entry>
                           <entry>
                              <p>Dieser Online-Editor verwendet auf der Serverseite dieselbe Logik, wie das Desktop Programm des Herstellers. Das führt dazu, dass bei jedem Tastendruck eine Verbindung zum Server aufgebaut wird, und die Verarbeitung langsam werden kann. Zum Betrieb und bzgl. Customizing ist einschlägiges Java-Know-How erforderlich.</p>
                           </entry>
                        </row>
                        <row>
                           <entry>FontoXML<footnote>
                              <key>FX</key>
                              <desc>https://www.fontoxml.com/</desc>
                              <add>FontoXML Webeditor</add>
                           </footnote>
                        </entry>
                           <entry>
                              <p>FontoXML<xe>
                                 <first criterion="Tools">Tools</first>
                                 <second criterion="FontoXML">FontoXML</second>
                              </xe> sieht schon fast aus wie Word. Neben der WYSWYG/M Darstellung, kann auch die XML Struktur in einem Seitenpanel angezeigt werden.</p>
                           </entry>
                        </row>
                        <row>
                           <entry>XEditor<footnote>
                              <key>XE</key>
                              <desc>http://www.xeditor.com/portal</desc>
                              <add>Homepage des webbasierten XEditors</add>
                           </footnote>
                        </entry>
                           <entry>
                              <p>Xeditor<xe>
                                 <first criterion="Tools">Tools</first>
                                 <second criterion="Xeditor">Xeditor</second>
                              </xe> benutzt XSLT Transformationen, um aus der Eingabe die Editoransicht zu generieren. Beim Abspeichern wird der umgekehrte Weg bestritten. Das mag zwar auf den ersten Blick etwas holprig erscheinen, wie aber auch Tektur beweist, funktioniert das ganze recht gut und schnell.</p>
                           </entry>
                        </row>
                        <row>
                           <entry>Xopus<footnote>
                              <key>XO</key>
                              <desc>http://xopusfiddle.net/VT7T/3/</desc>
                              <add>Homepage des veralteten Xopus XML Editors</add>
                           </footnote>
                        </entry>
                           <entry>
                              <p>Xopus<xe>
                                 <first criterion="Tools">Tools</first>
                                 <second criterion="Xopus">Xopus</second>
                              </xe> ist wohl der älteste web-basierte XML Editor. Ich hatte damit schon 2008 zu tun, als er für ein Redaktionssystem evaluiert wurde. Wir haben uns dann für eine eigene nicht-generische Lösung basierend auf dem Webeditor CKEditor entschieden.</p>
                           </entry>
                        </row>
                     </tbody>
                  </tgroup>
               </table>
         </column-wide-element>
               <column-wide-element>
            <p>Das Customizing dieser Editoren erfordert einen sehr hohen Aufwand. Es müssen diverse Ressourcen angepasst werden, wie XSLT Skripte, XSD Schemas, CSS und Javascript. Das Schema wird meist über Kommandozeilentools in eine JS Repräsentation überführt. </p>
         </column-wide-element>
               <column-wide-element>
            <p>Aus diesem Grund bieten einige Hersteller spezielle Schulungen an, wo man die Bedienung erlernen kann. Aus meiner Sicht ist das Problem "Webbasierter XML Editor" weltweit noch nicht ausreichend gelöst.</p>
         </column-wide-element>
               <column-wide-element>
            <p>Die Kosten für den Betrieb rangieren um die 1000 EUR monatl. für ein 20 Benutzer-Setup.</p>
         </column-wide-element>
            
         
      </chapter>
   </chapter>
   <chapter hyphenation="yes" chapterpage="no" id="d2e2810" ismodule="no">
      
         <title>
            <title id="fab91e1c-40b2-4fa4-8137-87e27882221d">
            <glossary/>
         </title>
         </title>
         
            <block-title xmlns:xs="http://www.w3.org/2001/XMLSchema"
                   xmlns:fo="http://www.w3.org/1999/XSL/Format"
                   xmlns:xe="http://www.xes.future"
                   style="larger">
         <title>
            <b>C</b>
         </title>
      </block-title>
      <column-wide-element xmlns:xs="http://www.w3.org/2001/XMLSchema"
                           xmlns:fo="http://www.w3.org/1999/XSL/Format"
                           xmlns:xe="http://www.xes.future">
         <table type="dl">
            <tgroup>
               <colspec colwidth="2*"/>
               <colspec colwidth="4*"/>
               <tbody>
                  <row>
                     <entry htmlwidth="30%">
                        <b>Core-Stylesheet</b>
                     </entry>
                     <entry htmlwidth="70%">
                           In einem Stylesheet-Projekt bezeichnet das Core-Stylesheet eine bereits ausgiebig getestete Variante, die mittels Sub-Stylesheet unter Ausnutzung der XSLT Import Präzedenz überschrieben wird.
                        </entry>
                  </row>
               </tbody>
            </tgroup>
         </table>
      </column-wide-element>
      <block-title xmlns:xs="http://www.w3.org/2001/XMLSchema"
                   xmlns:fo="http://www.w3.org/1999/XSL/Format"
                   xmlns:xe="http://www.xes.future"
                   style="larger">
         <title>
            <b>D</b>
         </title>
      </block-title>
      <column-wide-element xmlns:xs="http://www.w3.org/2001/XMLSchema"
                           xmlns:fo="http://www.w3.org/1999/XSL/Format"
                           xmlns:xe="http://www.xes.future">
         <table type="dl">
            <tgroup>
               <colspec colwidth="2*"/>
               <colspec colwidth="4*"/>
               <tbody>
                  <row>
                     <entry htmlwidth="30%">
                        <b>DITA</b>
                     </entry>
                     <entry htmlwidth="70%">
                           DITA ist ein Informationsmodell für die Technische Dokumentation.
                        </entry>
                  </row>
               </tbody>
            </tgroup>
         </table>
      </column-wide-element>
      <block-title xmlns:xs="http://www.w3.org/2001/XMLSchema"
                   xmlns:fo="http://www.w3.org/1999/XSL/Format"
                   xmlns:xe="http://www.xes.future"
                   style="larger">
         <title>
            <b>P</b>
         </title>
      </block-title>
      <column-wide-element xmlns:xs="http://www.w3.org/2001/XMLSchema"
                           xmlns:fo="http://www.w3.org/1999/XSL/Format"
                           xmlns:xe="http://www.xes.future">
         <table type="dl">
            <tgroup>
               <colspec colwidth="2*"/>
               <colspec colwidth="4*"/>
               <tbody>
                  <row>
                     <entry htmlwidth="30%">
                        <b>Parameterisierung</b>
                     </entry>
                     <entry htmlwidth="70%">
                           Bei der Parameterisierung wird ein bestehendes Stylesheet mit Parametern versehen, um für möglichst viele Produktvarianten und Ausgabeformate die gleiche Codebasis wiederverwenden zu können. Dadurch soll Redundanz eingespart werden und der Aufruf vereinfacht werden.
                        </entry>
                  </row>
               </tbody>
            </tgroup>
         </table>
      </column-wide-element>
      <block-title xmlns:xs="http://www.w3.org/2001/XMLSchema"
                   xmlns:fo="http://www.w3.org/1999/XSL/Format"
                   xmlns:xe="http://www.xes.future"
                   style="larger">
         <title>
            <b>S</b>
         </title>
      </block-title>
      <column-wide-element xmlns:xs="http://www.w3.org/2001/XMLSchema"
                           xmlns:fo="http://www.w3.org/1999/XSL/Format"
                           xmlns:xe="http://www.xes.future">
         <table type="dl">
            <tgroup>
               <colspec colwidth="2*"/>
               <colspec colwidth="4*"/>
               <tbody>
                  <row>
                     <entry htmlwidth="30%">
                        <b>Sub-Stylesheet</b>
                     </entry>
                     <entry htmlwidth="70%">
                           Ein Sub-Stylesheet spezialisiert das Core-Stylesheet, damit Redundanz vermieden wird und somit die Wartbarkeit gewährleistet werden kann.
                        </entry>
                  </row>
                  <row>
                     <entry htmlwidth="30%">
                        <b>SGML</b>
                     </entry>
                     <entry htmlwidth="70%">
                           SGML ist der Vorläufer von XML.
                        </entry>
                  </row>
                  <row>
                     <entry htmlwidth="30%">
                        <b>Single Source Publishing</b>
                     </entry>
                     <entry htmlwidth="70%">
                           Beim Single Source Publishing wird aus einer XML Quelle eine Vielzahl von Ausgabeformaten erzeugt
                        </entry>
                  </row>
                  <row>
                     <entry htmlwidth="30%">
                        <b>Structured Content Authoring</b>
                     </entry>
                     <entry htmlwidth="70%">
                           Der Content wird hierbei semantisch mittels XML Tags ausgezeichnet. Bei einem WYSIWYG Ansatz sind die meisten Tags nur optional sichtbar.
                        </entry>
                  </row>
               </tbody>
            </tgroup>
         </table>
      </column-wide-element>
      <block-title xmlns:xs="http://www.w3.org/2001/XMLSchema"
                   xmlns:fo="http://www.w3.org/1999/XSL/Format"
                   xmlns:xe="http://www.xes.future"
                   style="larger">
         <title>
            <b>T</b>
         </title>
      </block-title>
      <column-wide-element xmlns:xs="http://www.w3.org/2001/XMLSchema"
                           xmlns:fo="http://www.w3.org/1999/XSL/Format"
                           xmlns:xe="http://www.xes.future">
         <table type="dl">
            <tgroup>
               <colspec colwidth="2*"/>
               <colspec colwidth="4*"/>
               <tbody>
                  <row>
                     <entry htmlwidth="30%">
                        <b>Topic Based Authoring</b>
                     </entry>
                     <entry htmlwidth="70%">
                           Beim Topic Based Authoring steht nicht das gesamte Buch im Vordergrund, sondern der Inhalt wird in wiederverwendbare Topics aufgeteilt, die dann in verschiedenen Publikationen wiederverwendet werden können. 
                        </entry>
                  </row>
                  <row>
                     <entry htmlwidth="30%">
                        <b>TIOBE Index</b>
                     </entry>
                     <entry htmlwidth="70%">
                           Im TIOBE Index wird jährlich die Beliebtheit von Programmiersprachen erfasst.
                        </entry>
                  </row>
               </tbody>
            </tgroup>
         </table>
      </column-wide-element>
      <block-title xmlns:xs="http://www.w3.org/2001/XMLSchema"
                   xmlns:fo="http://www.w3.org/1999/XSL/Format"
                   xmlns:xe="http://www.xes.future"
                   style="larger">
         <title>
            <b>X</b>
         </title>
      </block-title>
      <column-wide-element xmlns:xs="http://www.w3.org/2001/XMLSchema"
                           xmlns:fo="http://www.w3.org/1999/XSL/Format"
                           xmlns:xe="http://www.xes.future">
         <table type="dl">
            <tgroup>
               <colspec colwidth="2*"/>
               <colspec colwidth="4*"/>
               <tbody>
                  <row>
                     <entry htmlwidth="30%">
                        <b>XML Datenbanken</b>
                     </entry>
                     <entry htmlwidth="70%">
                           XML Datenbanken sind NoSQL Datenbanken, d.h. "Not only SQL" oder auch tatsächlich "No SQL" wird unterstützt. Die Spezialisierung erfolgt auf XML Daten. Wie sich aber zeigt, ist eine relationale Sicht auf die Daten meistens auch notwendig, so dass DB wie Marklogic diese Funktionalität mittels Erweiterungen unterstützt. 
                        </entry>
                  </row>
               </tbody>
            </tgroup>
         </table>
      </column-wide-element>
         
      
   </chapter>
   <figure-index/>
   <footnote-index/>
   <index/>
   <cover-backpage>
      <chapter hyphenation="yes" chapterpage="no" id="d2e2974" ismodule="no">
      
         <title>
            <title id="3701e56d-cbbf-4125-bce3-cffcd3b10b4f">Tektur CCMS</title>
         </title>
         
            <column-wide-element>
            <p>Tekur CCMS<xe>
                  <first criterion="Tektur CCMS">Tektur CCMS</first>
               </xe> ist ein web-basiertes Component Content Management System und befindet sich noch in der Entwicklung. Blog: <b>www.tekturcms.de</b>
            </p>
         </column-wide-element>
            <column-wide-element>
            <p>Hier sind einige Random Features:</p>
         </column-wide-element>
            <column-wide-element>
            <ul>
               <li>
                  <p>Die Inhalte werden nach dem DITA Content Model eingegeben. Die Ausgabe erfolgt über ein automatisches Satzsystem.</p>
               </li>
               <li>
                  <p>Grafiken können für die PDF-Ausgabe seitenbreit, spaltenbreit und in der Marginalie gesetzt werden.</p>
               </li>
               <li>
                  <p>Die Breite der Marginalie ist stufenlos einstellbar; die PDF-Ausgabe ist bzgl. der Formatierung weitestgehend konfigurierbar.</p>
               </li>
               <li>
                  <p>Layoutoptionen bzgl. Papierformat, Bemassung und Schriftgrößen können über einen einfachen Dialog eingestellt werden.</p>
               </li>
               <li>
                  <p>TOC und mehrstufige Register werden automatisch in der PDF-Ausgabe erzeugt.</p>
               </li>
               <li>
                  <p>Die Zellenbreite von CALS Tabellen kann mit der Maus eingestellt werden; Funktionen auf Zellen sind weitestgehend implementiert.</p>
               </li>
               <li>
                  <p>Copy 'n Paste funktioniert Element-weise und topic-übergreifend.</p>
               </li>
               <li>
                  <p>Paras, Listitems und Sections können mit den Pfeilbuttons in der Toolbar nach oben und unten verschoben werden.</p>
               </li>
               <li>
                  <p>Verlinkung auf andere Topics funktioniert über Referenzen und ein Linktext wird automatisch aktualisiert, wenn sich der Topic-Titel ändert.</p>
               </li>
               <li>
                  <p>Die DITA-Map kann u.a. mittels Drag 'n Drop editiert werden; Im Topic Editor gibt es an jeder Stelle ein dynamisches Kontextmenü für weitere Optionen.</p>
               </li>
               <li>
                  <p>Valide DITA Strukturen können exportiert und importiert werden.</p>
               </li>
               <li>
                  <p>Topics, Tasks und Maps können vom Autor an Reviewer und Approver für einen Kommentar- und Freigabeprozess überwiesen werden.</p>
               </li>
            </ul>
         </column-wide-element>
         
      
      </chapter>
   </cover-backpage>
</document>