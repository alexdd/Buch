<?xml version="1.0" encoding="utf-8"?>
<document>
   <title>Entwicklerhandbuch</title>
   <meta>
      <owner>alex</owner>
      <date-of-creation>Tue Dec 25 2018 12:56:30 </date-of-creation>
      <date-of-last-change>Sun Mar 31 2019 20:08:12 </date-of-last-change>
      <language>de-DE</language>
      <status>207</status>
      <description>Short Description</description>
      <logo-image>././client/data/dec6632b-2b03-481e-924c-b05befd3f95b/logo.png</logo-image>
      <cover-image>././client/data/dec6632b-2b03-481e-924c-b05befd3f95b/cover.png</cover-image>
      <main-title>XML Hands On</main-title>
      <subtitle>XSLT - XQuery - MarkLogic</subtitle>
      <cover-text>(c) Alex Düsel 2019
Creative Commons Namensnennung-Keine Bearbeitungen 4.0 International Public License
www.github.com/alexdd/Buch</cover-text>
      <structure>
         <format>UNDEFINED</format>
      </structure>
      <design>
         <layout>UNDEFINED</layout>
         <paper-format>UNDEFINED</paper-format>
         <page-margin>UNDEFINED</page-margin>
         <spaces>UNDEFINED</spaces>
         <header>UNDEFINED</header>
         <footer>UNDEFINED</footer>
         <look-and-feel>UNDEFINED</look-and-feel>
         <table-layout>UNDEFINED</table-layout>
      </design>
   </meta>
   <chapter hyphenation="yes" chapterpage="no" id="c15a8d5c-03bc-4ee9-a04a-a123e0ce5d88"
            ismodule="no">
      <content>
         <title id="8ae493b1-a854-4349-8aff-3bc901e07199">
            <title id="67b2fea2-88ac-4cbc-9763-0e31cf89b469">Intro</title>
         </title>
         <block>
            <figure pdfwidth="margin">
               <img src="./client/data/c15a8d5c-03bc-4ee9-a04a-a123e0ce5d88/dita-logo.jpg"/>
            </figure>
            <p id="ad8ab8d5-a2a2-4ed0-9ff6-3efcda000ad5d6e6">Dieses Buch wurde mit Tektur CCMS erstellt. Tektur ist ein einfach zu bedienender kollaborativer Editor um [[link]]DITA[[fn:https://de.wikipedia.org/wiki/Darwin_Information_Typing_Architecture*DITA ist ein Standard im Bereich Publishing und löst ältere Dokumenttypen, wie z.B. Docbook ab. Beispielsweise ist DITA ein gutes Modell für Softwarehandbücher und zugehörige Online-Dokumentation.]] Inhalte erstellen, als PDF ausgeben und pflegen zu können. Die Eingabe erfolgt dabei per [[link]]WYSIWYG[[fn:https://de.wikipedia.org/wiki/WYSIWYG*What You See Is What You Get - Mit dieser Eingabemethode hat der Autor schon ein Bild davon, wie sein Text gedruckt werden kann.]] mit geführter Benutzerinteraktion. Die Inhalte werden als einzelne Topics verwaltet, die in verschiedenen Maps referenziert werden können; Stichwort: [[link]]Topic Based Authoring[[fn:https://en.wikipedia.org/wiki/Topic-based_authoring*Beim Topic Based Authoring wird der Content feingranular in Informationseinheiten aufgegliedert, die sich dann über Referenzen in verschiedene Publikationen einbinden lassen.]].</p>
            <p id="1e9e7b35-22ad-4819-b062-c0f43536e06dd6e10">Sonstige Features: Rechte- und Rollensystem, Versionskontrolle, konfigurerierbarer Workflow mit Review &amp; Approval Fuktionen. Auf dem [[link]]Entwicklerblog[[fn:http://www.tekturcms.de*Das ist die private Homepage des Autors mit einer kompletten Liste seiner Hobby-Projekte seit 2000.]] kann man sich über den Fortschritt informieren.</p>
            <note>
               <consequence>
                  <p id="25b00336-a77d-43f8-ace7-62c8986e20fbd6e11">Dieses Buch ist <b>WORK IN PROGRESS</b> und dient in erster Linie als Test für Tektur CCMS. Der Feinschliff kommt noch! Momentan schreibe ich alles was mir irgendwie interessant erscheint - je nach zeitlicher Möglichkeit mehr oder weniger umfangreich - auf und binde die Topics in eine Map ein, um ein PDF erzeugen zu können.</p>
                  <p id="5797e76b-5aad-494e-8fdf-779c363c3399d6e25">Wie schliesslich Struktur und Inhalt genau aussehen sollen, werde ich mir zu einem späteren Zeitpunkt noch genau überlegen :-]</p>
               </consequence>
            </note>
         </block>
      </content>
   </chapter>
   <chapter hyphenation="yes" chapterpage="no" id="792c9845-7c63-4a18-8aee-1878763200b5"
            ismodule="no">
      <content>
         <title id="70e9195f-8072-415d-986a-6550ed24a577">
            <title id="a01d7a84-023f-4c62-ab06-1e8e8b069bed">Anwendungsgebiete</title>
         </title>
         <block>
            <p id="7f1ab7b8-ac75-40c7-9dd9-633dd060ba71">
               <b>XML,</b>
               <b>XSLT</b>, <b>XPATH</b>, <b>XSL-FO</b> und <b>XQuery</b> sind Techniken um baumstrukturierte Daten - im Vergleich zu relationalen Daten - aus verschiedenen Quellen ineinader zu überführen, abzuspeichern, zu versenden, darzustellen und auszuwerten.</p>
            <p id="e86b0f3d-f40e-4751-a355-f7b3f2e41783d6e6">Vom Aussehen her sind XML Daten im Prinzip Textdaten. Sie können sehr einfach mit einem Texteditor erstellt werden. Im Gegensatz zu Multimedia-Daten sind keine komplexen Tools, wie z.B. ein Grafikeditor, erforderlich.</p>
            <p id="941ec370-0569-49a3-8327-bcf7bb41b444d6e8">Auch relationale Daten können in Form von Tabellen, als Excel Tabelle oder bspw. als kommaseparierte Textdatei, aus einem System ausgespult und weiterverarbeitet werden. XML erlaubt es jedoch die Daten semantisch auszuzeichnen. Das geschieht durch das Klammern semantisch zusammengehöriger Elemente mittels Klammer-Tags und weiterer Kategorisierung dieser Informationseinheiten mittels weiterer Properties (Attribute) an diesen Tags. Durch das Verschachteln dieser geklammerten Komponenten entsteht ein Baum, der die Hierarchische Ordnung der Daten widerspiegelt.</p>
            <p id="bf0a54ff-fbef-4db1-b83b-d18fcc202108d6e10">Diese Baumstrukturen sind maschinell lesbar und die Daten können, bevor sie von einem Versender zu einem Empfänger gehen, mittels eines automatischen Prozesses validiert werden. Dabei können sowohl der Inhalt als auch die Syntax anhand von definierten Regeln (Schemas) genau überprüft werden.</p>
            <p id="eef6c182-a348-4979-bebc-64e3b7bc1e2ed6e12">Der XML Standard ist mittlerweile 20 Jahre alt. Zuvor gab es SGML, das zum Beispiel auch nicht abgeschlossene Tags erlaubt.</p>
            <p id="30432260-5058-47a4-8959-a37812962075d6e18">Der Übergang von SGML zu XML hat die Sache ein bisschen vereinfacht, eine weitere Vereinfachung brachte JSON als Standard. JSON wird gerne im Webbereich eingesetzt um baumstrukturierte Daten auszuzeichnen. JSON ist jedoch nicht so gut maschinenlesbar und es gibt noch nicht so viele Werkzeuge wie z.B. Code Editoren dafür.</p>
            <p id="148bc5b8-55c6-497c-90c6-27d2c65182b1d6e29">Folgend eine kurze Erläuterung zu den eingangs erwähnten Schlüsselwörtern:</p>
            <ul>
               <li>
                  <p id="63f5818d-67ef-4bb2-9b32-c05afdc8ddbdd6e33">
                     <b>XML</b> ist das Datenformat. Auf XML arbeiten die anderen Technologien. XML ist immer Input für diese Tools.</p>
               </li>
               <li>
                  <p id="8f207dc3-6fd8-4c19-be61-2a88ac596f11d6e38">
                     <b>XSLT</b> transformiert eine XML Instanz in eine andere. Plain Text ist eine Aneinanderreihung von Text Knoten</p>
               </li>
               <li>
                  <p id="b2b5e6c1-3acf-46d5-a939-03a5b39d6f01d6e43">
                     <b>XPATH</b> erlaubt es, bestimmte Knoten in einem XML Dokument über bedingte Pfadausdrücke zu selektieren.</p>
               </li>
               <li>
                  <p id="24a51444-7faf-4e7b-ab91-14e41a6856cdd6e48">
                     <b>XSL-FO</b> ist eine weitere XML basierte Auszeichnungssprache, die ein XSL-FO Prozessor einlesen kann, um daraus z.B. ein PDF zu generieren. </p>
               </li>
               <li>
                  <p id="28145d35-dc2b-4747-92a6-4f328339ff10d6e53">
                     <b>XQuery</b> ist eine Abfragesprache ählich zu SQL, jedoch werden damit nicht relationale Daten abgefragt sondern baumstrukturierte.</p>
               </li>
            </ul>
            <p id="d60d7e64-9da6-4310-ad49-0797e265c108d6e57">[[chaptertoc]]</p>
         </block>
      </content>
      <chapter hyphenation="yes" chapterpage="no" id="a264856d-c5d5-4d7b-993f-421bf222db76"
               ismodule="no">
         <content>
            <title id="8cdcf3f1-7456-4043-bfec-894e823a9a06">
               <title id="1ea26780-291c-470f-9559-616cfb744574">XSLT - die Programmiersprache im XML Bereich</title>
            </title>
            <block>
               <p id="6c18d950-e0eb-4640-88c5-4abf302e2459">Ausserhalb der XML Verarbeitung hat XSLT keinen Stellenwert. Im TIOBE Index[[fn:https://de.wikipedia.org/wiki/TIOBE-Index]] von 2003 rangierte XSLT einmal auf Platz 60 an letzter Stelle der [[link]]Liste[[fn:https://bit.ly/2ARgKCJ]].</p>
               <p id="99c64570-4fcf-4448-ba34-59d5cfd8be53d6e9">Im Bereich XML würde aber ohne XSLT nicht viel gehen. Es gibt einige exotische Anwendungsgebiete in denen XML effizient 
mit <b>LISP</b> Dialekten verarbeitet wird, bspw. die Verarbeitung von - nach XML konvertierten - [[link]]EDI X12[[fn:https://en.wikipedia.org/wiki/ASC_X12]] Nachrichten.</p>
               <p id="28d3fd5c-15c3-4ca9-b908-d747e65b8f28d6e17">Auch im Bereich Publishing in der Luftfahrt hat sich SGML als Vorreiter von XML im [[link]]S1000D Standard[[fn:https://en.wikipedia.org/wiki/S1000D]] wacker gehalten. Hier wird teilweise noch mit proprietären Programmiersprachen, wie Metamorphosis gearbeitet.</p>
               <p id="d9f3e676-e9d8-4b79-8c92-552355d2ac69d6e22">Alternativen zu XSLT finden sich im entsprechendem [[link]]Wikipedia-Artikel[[fn:https://de.wikipedia.org/wiki/XSL_Transformation]].</p>
               <p id="d1615c43-ce30-49ce-92ce-e1f918a82108d6e24">Wir konzentrieren uns hier auf XSLT und XSL Stylesheets.</p>
               <p id="40291b73-b2de-452a-b0ab-b965112e44d3">Beispielsweise werden die Autohandbücher führender Hersteller mittels XSL gesetzt, deren Eingabedaten aufbereitet und zur Weiterverarbeitung transformiert. Ein paar interessante Stichpunkte:</p>
               <ul>
                  <li>
                     <p id="4bb863fc-d85b-4475-871f-d8d311d34366d6e8">XSLT hat gerade noch den Status "Programmiersprache", weil man damit eine [[link]]Turing Maschine[[fn:http://www.unidex.com/turing/utm.htm]] programmieren kann.</p>
                  </li>
                  <li>
                     <p id="411a593d-e4af-4620-a0ab-62959c398660d6e11">Mit HTML oder einer Templater Sprache (z.B. JSP) würde das nicht funktionieren.</p>
                  </li>
                  <li>
                     <p id="ab4f359e-d804-47f5-a395-7d1f5bd38f92d6e17">XSLT ist keine imperative Sprache, d.h es werden keine Anweisungen der Reihe nach abgearbeitet, sondern eine deklarative Sprache, d.h für jedes Ereignis (besser gesagt: für jeden durchlaufenen DOM Knoten) wird eine gefundene - und vom Programmierer deklarierte - Regel angewendet.</p>
                  </li>
                  <li>
                     <p id="af8a2adb-7f21-4850-866f-f0bd5afb67ead6e20">Ausserdem gibt es funktionale Anteile, um bspw. die deklarierten Regeln rekursiv anwenden zu können.</p>
                  </li>
                  <li>
                     <p id="bd33428a-a6cd-43d2-a235-e809f2f6f429d6e23">XSLT wird oft mit XSL gleichgesetzt. Aber [[link]]XSL[[fn:https://de.wikipedia.org/wiki/XSL_Transformation*W3C Seiten zu The Extensible Stylesheet Language Family (XSL)]] ist mehr:</p>
                     <ul>
                        <li>
                           <p id="d0a6962f-24f9-4cca-bc0b-48a1ea8530f1d6e27">Zum einen kommt noch XPATH hinzu: XPATH erlaubt komplizierte Berechnungen und Selektionen auf den DOM Knoten eines XML Dokuments.</p>
                        </li>
                        <li>
                           <p id="91c5ffad-ea1d-4108-9f2f-04a89bdbe20dd6e30">Zum anderen ist auch [[link]]XSL-FO[[fn:https://www.w3.org/TR/xsl/*Spezifikation der Auszeichnungssprache XSL-FO für die Formatierung als PDF]] Bestandteil der XSL Spezifikation. XSL-FO Tags sind Anweisungen für einen XSL-FO Prozessor, der aus einem XSL-FO Dokument ein PDF Dokument generiert. Es sind auch andere Ausgabe-Formate, wie bspw. RTF möglich.</p>
                        </li>
                     </ul>
                  </li>
               </ul>
            </block>
         </content>
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="3c090c4b-2d46-459c-87ba-60a824bf5aa5"
               ismodule="no">
         <content>
            <title id="e3e3be23-3387-4f2d-bc88-628272b743f3">
               <title id="f19c130f-edfe-408f-a9e2-31b53d92bb4c">Aktuelle und vergangene Anwendungen</title>
            </title>
            <block>
               <p id="0d86999f-6918-45f8-aa05-ee775429e1db">Einige Beispiele - aktuell und aus vergangenen Tagen:</p>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="df972998-fdff-45dd-9394-6508080a897dd6e6">
                  <content>
                     <title id="df972998-fdff-45dd-9394-6508080a897dd6e6">
                        <title id="ab76273e-04a8-430a-9f91-9a1b68d9c981d6e7">XML Webseiten</title>
                     </title>
                     <p id="d23736ab-93da-4908-83d8-38ffd747db2dd6e9">Einen XSLT Prozessor hat jeder Browser eingebaut. Es gab mal eine Zeit, in der es sehr populär war, Webseiten vom Server als XML auszuliefern[[xe1:Anwendungsgebiete;xe2:XML Webseiten]]. XML erlaubt die semantische Auszeichung des Inhalts, und die strikte Trennung des Inhalts von Layout und Design. Wesentlich besser als dies mit HTML und CSS jemals möglich wäre. U.a. wegen des exzessiven Einsatzes von Javascript (auch inline), hat sich diese Idee nie vollständig durchgesetzt. Schliesslich wurde XHTML spezifiziert und jetzt gibt es HTML5.</p>
                     <p id="c5dabda9-b019-4598-8fed-e6a685efd53cd6e17">Betrachten wir das folgende einfache XML Beispiel:</p>
                     <verbatim>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;document&gt;
&lt;title&gt;Das ultimative Zwei-Kapitel Dokument&lt;/title&gt;
  &lt;chapter&gt;
    &lt;title&gt;Kapitel 1&lt;/title&gt;
    &lt;intro&gt;In Kapitel 1 wird kurz gesagt was Sache ist.&lt;/intro&gt;
    &lt;content&gt;Um es kurz zu machen, wie der Hase läuft steht in Kapitel 2.&lt;/content&gt;
  &lt;/chapter&gt;
  &lt;chapter&gt;
    &lt;title&gt;Kapitel 2&lt;/title&gt;
    &lt;intro&gt;Hier wird erklärt, wie der Hase läuft.&lt;/intro&gt;
    &lt;content&gt;Im Prinzip ist es ganz einfach.&lt;/content&gt;
  &lt;/chapter&gt;
&lt;/document&gt;</verbatim>
                     <p id="1450640b-064e-42c2-9881-547df58b7020d6e21">Ohne XSLT Stylesheet Zuweisung wird der Browser eine Datei mit diesem Inhalt als eingerücktes XML anzeigen - oder die Tags einfach ignorieren und den Textinhalt in einer Zeile darstellen. Fügt man eine [[link]]Processing Instruction[[fn:https://de.wikipedia.org/wiki/Verarbeitungsanweisung*Die Processing Instruction wertet der Parser als Kommando aus und nicht als Teil des XML Contents]][[xe1:XML Konstrukte;xe2:Processing Instruction]] am Anfang ein, wird ein XSLT Stylesheet vom Browser herangezogen und vor der Darstellung im Browser wird die so deklarierte XML Transformation ausgeführt:</p>
                     <verbatim>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="formatiermich.xsl" ?&gt;
&lt;document&gt;
  &lt;title&gt;Das ultimative Zwei-Kapitel Dokument&lt;/title&gt;
  &lt;chapter&gt;
[...]</verbatim>
                     <p id="134c0541-26a7-4213-9b7d-ed83c8f08cbcd6e25">Das XML kann nun im Browser geöffnet werden und alles wird schön formatiert angezeigt:</p>
                     <verbatim>&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="document"&gt;
  &lt;body&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/body&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="document/title"&gt;     
    &lt;h1&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/h1&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter"&gt;
    &lt;div class="chapter"&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/div&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter/title"&gt;
    &lt;h2&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/h2&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter/intro"&gt;
    &lt;div class="intro"&gt;
      &lt;i&gt;&lt;xsl:apply-templates/&gt;&lt;/i&gt;      
    &lt;/div&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter/content"&gt;
    &lt;p&gt;&lt;xsl:apply-templates/&gt;&lt;/p&gt;    
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</verbatim>
                     <p id="25706f42-0507-45a5-a2cc-66f12f9e87bdd6e30">Die <b>Processing Instruction</b> hat keinen Einfluss auf den XML Inhalt und wird in einer anderen Eingabeverarbeitung nicht herangezogen.</p>
                  </content>
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="b77288d2-fa43-40b6-8226-134452b22fc7d6e28">
                  <content>
                     <title id="b77288d2-fa43-40b6-8226-134452b22fc7d6e28">
                        <title id="d1a0e576-5434-4f78-a143-0aba397514ddd6e33">Serverseitige Konvertierung</title>
                     </title>
                     <p id="a476b87f-7491-444d-8668-72f5e5719ebed6e35">Auch eine serverseitige Konvertierung[[xe1:Anwendungsgebiete;xe2:Serverseitige Konvertierung]] ist gebräuchlich. Ein Beispiel aus vergangenen Tagen - [[link]]WAP-Seiten[[fn:https://de.wikipedia.org/wiki/Wireless_Application_Protocol*Mittels dieser Technologie wurden Webinhalte auf Handys gespielt. Das war vor den Smartphones]] für unterschiedliche Handy-Modelle.</p>
                     <p id="b764a9c0-9b8f-411a-ab3a-6b9241047afed6e37">Früher hatten die Handys sehr unterschiedliche Displaygrößen. Handybrowser konnten nicht ausreichend Javascript und die Skalierung der WAP-Seite für das jeweilige Handy passierte nicht im Handy, sondern vor der Auslieferung auf der Serverseite. Dazu wurde eine XML Quelle mittels verschiedener XSLT Stylesheets in unterschiedliche WML WAP Repräsentationen transformiert.</p>
                     <p id="47042bcb-c720-41ec-819b-86527013fa52d6e39">So würde das Zwei-Kapitel Beispiel von oben im WML Format aussehen (recht einfach gehalten):</p>
                     <verbatim>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.1//EN" "http://www.wap.org/DTD/wml_1.1.xml"&gt;
&lt;wml&gt;
  &lt;head&gt;
    &lt;meta name="title" content="Das ultimative Zwei-Kapitel Dokument"/&gt;   
  &lt;/head&gt; 
  &lt;card id="chapter1" title="Kapitel 1"&gt;
    &lt;p&gt;&lt;i&gt;In Kapitel 1 wird kurz gesagt was Sache ist.&lt;/i&gt;&lt;/p&gt;        
    &lt;p&gt;Um es kurz zu machen, wie der Hase läuft steht in Kapitel 2.&lt;/p&gt;  
  &lt;/card&gt;
  &lt;card id="chapter2" title="Kapitel 2"&gt;
    &lt;p&gt;&lt;i&gt;Hier wird erklärt, wie der Hase läuft.&lt;/i&gt;&lt;/p&gt;
    &lt;p&gt;Im Prinzip ist es ganz einfach.&lt;/p&gt;
  &lt;/card&gt;
&lt;/wml&gt;</verbatim>
                     <p id="5d603262-8282-4d8f-bb2f-145b7ff53e92d6e43">Eine XSLT Transformation, die die XML Daten von oben in diese WML Darstellung überführt, könnte z.B. so implementiert werden:</p>
                     <verbatim>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;

  &lt;xsl:output
    doctype-public="-//WAPFORUM//DTD WML 1.2//EN" 
    doctype-system="http://www.wapforum.org/DTD/wml12.dtd"
    indent="yes"/&gt;
    
  &lt;xsl:template match="document"&gt;
    &lt;wml&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/wml&gt;
  &lt;/xsl:template&gt;
    
  &lt;xsl:template match="document/title"&gt;
    &lt;head&gt;
      &lt;meta name="title"&gt;
        &lt;xsl:attribute name="content"&gt;
          &lt;xsl:value-of select="."/&gt;               
        &lt;/xsl:attribute&gt;
      &lt;/meta&gt;      
    &lt;/head&gt;
  &lt;/xsl:template&gt;
    
  &lt;xsl:template match="chapter"&gt;
    &lt;card id="{concat('chapter',count(preceding-sibling::chapter)+1)}"&gt;
      &lt;xsl:attribute name="title"&gt;
        &lt;xsl:value-of select="title"/&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:apply-templates select="*[not(self::title)]"/&gt;
    &lt;/card&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="node()|@*"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates select="node()|@*"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="processing-instruction()"/&gt;
  
  &lt;xsl:template match="intro"&gt;
    &lt;p&gt;&lt;i&gt;&lt;xsl:apply-templates/&gt;&lt;/i&gt;&lt;/p&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="content"&gt;
    &lt;p&gt;&lt;xsl:apply-templates/&gt;&lt;/p&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</verbatim>
                  </content>
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="9c01f236-d070-46db-9fd9-4585808a4401d6e43">
                  <content>
                     <title id="9c01f236-d070-46db-9fd9-4585808a4401d6e43">
                        <title id="fa0123f8-d2ab-48fe-a8a4-69c5ea6e5b29d6e48">Multiple Ausgabeformate</title>
                     </title>
                     <p id="479bd9ce-f36a-4b96-a291-61f95e4e767dd6e50">Aus einer XML Quelle können auch leicht weitere Format erzeugt werden, bspw. <b>ePub</b>. [[link]]EPUB[[fn:https://de.wikipedia.org/wiki/EPUB*EPUB ist ein Dokumentformat für Ebook-Reader.]] ist das Standardformat für eBooks. Neben Tags zur Formatierung für den Content, gibt es bspw. auch Anweisungen zum Erzeugen des Inhaltsverzeichnisses oder anderer Navigationsstrukturen.</p>
                     <p id="e8969256-cea5-4fd0-b7bf-5f9eeb42b148d6e52">Weitere gängige Formate sind neben dem oben veralteten WML Format, elektronische Ausgabe-Formate wie: [[link]]CHM[[fn:https://de.wikipedia.org/wiki/CHM_(Dateiformat*Die alte Windows-Hilfe. Läuft immer noch im Bereich Maschinenbau auf gekoppelten Rechnern mit alter Windows Software)]], [[link]]EclipseHelp[[fn:https://www.ibm.com/developerworks/library/os-echelp/index.html*Das Hilfe-Format der Eclipse Rich Client Plattform. Eclipse wird hauptsächlich von Programmierern als Editor benutzt]], [[link]]JavaHelp[[fn:https://en.wikipedia.org/wiki/JavaHelp*Damit wird bspw. das Java API formatiert als Webseite ausgegeben]], ..., Print-Ausgabe Formate, wie PDF oder [[link]]Adobe Framemaker[[fn:https://de.wikipedia.org/wiki/FrameMaker*Mit Framemaker kann man manuell gesetzte Publikationen erstellen. Über Templates lässt sich das Layout aber auch automatisieren]],  oder XML Standard Austauschformate, wie DITA, S1000D, [[link]]PI-MOD[[fn:https://www.i4icm.de/forschungstransfer/pi-mod/*PI-Mod ist ein Informationsmodell, das am KIT (Uni Karlsruhe) entwickelt wird/wurde]], [[link]]JATS[[fn:https://de.wikipedia.org/wiki/Journal_Article_Tag_Suite*JATS ist ein sehr verbreitetes Informationsmodell im Bereich wissenschaftlicher Artikel und Fachliteratur]][[xe1:Standards;xe2:JAT]] oder [[link]]TEI[[fn:https://de.wikipedia.org/wiki/Text_Encoding_Initiative]][[xe1:Standards;xe2:TEI]].</p>
                  </content>
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="14a69d0c-9be4-46eb-a266-4123a3f473dbd6e53">
                  <content>
                     <title id="14a69d0c-9be4-46eb-a266-4123a3f473dbd6e53">
                        <title id="4135a624-a45f-433c-8d0b-18416fe3765fd6e55">Menschenlesbare Ausgabe</title>
                     </title>
                     <p id="dc869a54-1cb6-4282-b816-825027432083d6e57">Kryptische XML Log-, Daten- oder Konfigurationsfiles[[xe1:Anwendungsgebiete;xe2:Log- und Konfigurationsdaten]] können leicht mit XSLT menschenlesbar formatiert werden. Ein Arbeitskollege im neuen Job kam kürzlich auf mich zu, ob ich um eine Möglichkeit wüsste, wie man sein kryptisches Datenfile für einen Übersetzungsdienst formatieren könnte:</p>
                     <verbatim>&lt;?xml version="1.0" encoding="UTF-8"?&gt;?&lt;?xml-stylesheet type="text/xsl" href="de.xsl"?&gt;
&lt;jcr:root xmlns:sling="http://sling.apache.org/jcr/sling/1.0"
  xmlns:jcr="http://www.jcp.org/jcr/1.0" 
  xmlns:mix="http://www.jcp.org/jcr/mix/1.0"
  xmlns:nt="http://www.jcp.org/jcr/nt/1.0"
  jcr:language="de"
  jcr:mixinTypes="[mix:language]"
  jcr:primaryType="sling:Folder"&gt;
&lt;b_manual 
  jcr:primaryType="sling:MessageEntry"
  sling:message="Bedienungsanleitung"/&gt;
  &lt;b_warning
    jcr:primaryType="sling:MessageEntry"
    sling:message="Warnung"/&gt;
  &lt;b_danger
    jcr:primaryType="sling:MessageEntry"
    sling:message="Vorsicht"/&gt;
  &lt;b_note
    jcr:primaryType="sling:MessageEntry"
    sling:message="Notiz"/&gt;
  &lt;b_notice
    jcr:primaryType="sling:MessageEntry"
    sling:message="Hinweis"/&gt;
  [...]</verbatim>
                     <p id="aaaf6a3a-55b3-4599-8bbd-59db3819473fd6e61">Mit einem eingehängten XSLT Stylesheet [[code:de.xsl]] wird so ein Datenfile als Tabelle formatiert:</p>
                     <verbatim>&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:jcr="http://www.jcp.org/jcr/1.0"
  xmlns:sling="http://sling.apache.org/jcr/sling/1.0"&gt;
  
  &lt;xsl:template match="jcr:root"&gt;
    &lt;html&gt;
      &lt;table border="1" cellpadding="5" cellspacing="5"&gt;
        &lt;xsl:apply-templates/&gt;
      &lt;/table&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="*"&gt;
    &lt;tr&gt;
      &lt;td&gt;
        &lt;xsl:value-of select="concat(count(preceding::*[@sling:message]) + 1,'.')"/&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;xsl:value-of select="name()"/&gt;
      &lt;/td&gt;
      &lt;td contenteditable="true"&gt;
        &lt;xsl:value-of select="@sling:message"/&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</verbatim>
                     <p id="8306957f-386e-4c63-9c69-ee876511fecbd6e65">Hängt man an dieses Beispiel noch ein bisschen Javascript Logik und macht die Felder für die Übersetzungen mittels des HTML5 [[code:contenteditable]] Attributs[[xe1:Attribute;xe2:contenteditable]] editierbar, dann bräuchte man nur noch eine Rücktransformation HTML nach XML und hätte schon einen kleinen XML Editor gebaut. So funktioniert auch der Editor in [[$productname]].</p>
                  </content>
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="2c3b949c-77c7-4dab-b6f6-7aa304536f45d6e66">
                  <content>
                     <title id="2c3b949c-77c7-4dab-b6f6-7aa304536f45d6e66">
                        <title id="5ab04d47-2964-42e4-8002-ba2b7828111bd6e68">Diagramme darstellen</title>
                     </title>
                     <p id="6a649e53-dde4-4e49-8e01-1fb5ad83cf2ed6e70">Nachdem eine SVG[[xe1:Standards;xe2:SVG]] Grafik[[xe1:Anwendungsgebiete;xe2:Visualisierung]] im XML Format vorliegt kann diese auch direkt aus XML Daten mittels XSLT erzeugt werden. Über das HTML5 [[code:&lt;svg&gt;]] Element kann so eine erzeugte Grafik inline in das ebenfalls durch das XSLT generierte HTML Dokument eingebunden werden.</p>
                     <p id="182ba4df-adcd-4102-af88-18c7570f7b71d6e72">Betrachten wir unser Beispiel von oben, erweitert um drei neue [[code:&lt;block&gt;]] Elemente:</p>
                     <verbatim>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="chart.xsl" ?&gt;
&lt;document&gt;
  &lt;title&gt;Das ultimative Zwei-Kapitel Dokument&lt;/title&gt;
  &lt;chapter&gt;
    &lt;title&gt;Kapitel 1&lt;/title&gt;
    &lt;intro&gt;In Kapitel 1 wird kurz gesagt was Sache ist.&lt;/intro&gt;
    &lt;content&gt;Um es kurz zu machen, wie der Hase läuft steht in Kapitel 2.&lt;/content&gt;
  &lt;/chapter&gt;
  &lt;chapter&gt;
    &lt;title&gt;Kapitel 2&lt;/title&gt;
    &lt;intro&gt;Hier wird erklärt, wie der Hase läuft.&lt;/intro&gt;
    &lt;content&gt;Im Prinzip ist es ganz einfach. Betrachten wir doch drei gelbe Blöcke:
    &lt;/content&gt;
    &lt;block/&gt;
    &lt;block/&gt;
    &lt;block/&gt;
  &lt;/chapter&gt;
&lt;/document&gt;</verbatim>
                     <p id="f5656cd5-03c5-43a0-be15-a7187bbdab37d6e76">Wenn wir das XSLT Stylesheet noch um eine Regel für das neue [[code:&lt;block&gt;]] Element ergänzen, so wie hier:</p>
                     <verbatim>&lt;xsl:template match="block"&gt;
   &lt;svg style="background-color:yellow" width="30" height="30" 
     xmlns:xlink="http://www.w3.org/1999/xlink" 
     xmlns="http://www.w3.org/2000/svg"/&gt;
  &lt;br/&gt;
  &lt;br/&gt;
&lt;/xsl:template&gt;</verbatim>
                     <p id="1015bdf3-e31c-4085-b1cb-00c7cc2c5bd4d6e80">Dann erhalten wir drei schön formatierte gelbe SVG Blöcke ...</p>
                     <p id="f1e12ddb-1bcb-49c0-b938-0a77393018d1d6e82">
                        <b>Weiterführende Links:</b>
                     </p>
                     <ul>
                        <li>
                           <p id="d206a44d-c978-4902-9d62-0d34675e805dd6e87">[[link]]Client-side image generation with SVG and XSLT[[fn:http://surguy.net/articles/client-side-svg.xml]]</p>
                        </li>
                        <li>
                           <p id="5689021e-dff9-4b37-9f33-35a0bb84a3c6d6e90">[[link]]Knotentyp Visualisierung im Apache Jack Rabbit Projekt[[fn:http://jackrabbit.apache.org/jcr/node-type-visualization.html]]</p>
                        </li>
                     </ul>
                  </content>
               </chapter>
            </block>
         </content>
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="151a9719-a32a-4fca-a55c-769b47a73b34"
               ismodule="no">
         <content>
            <title id="0ede2c7f-f0c8-4212-9c31-cf3caefa613c">
               <title id="47f2fdc5-eca0-4e9b-bfc8-f2fbd76403d8">Professionelle XML Verarbeitung</title>
            </title>
            <block>
               <p id="25b21e23-d4ce-4721-a7d1-2c6b83245a70">Vom Single-Source Publishing bis zur Generierung von Java Code aus Klassendiagrammen.</p>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="b3ef9995-0478-4867-b02a-e2a3b0d9cf2cd6e6">
                  <content>
                     <title id="b3ef9995-0478-4867-b02a-e2a3b0d9cf2cd6e6">
                        <title id="012db970-b72c-425a-a3ad-3e817e002282d6e7">Single Source Publishing</title>
                     </title>
                     <p id="e88e78e7-d931-45f4-bb7f-0e055e7db65cd6e9">Gängige Formate in der Technischen Dokumentation sind elektronische Ausgabe-Formate wie: CHM, EclipseHelp, JavaHelp, ePub, ..., Print-Ausgabe Formate, wie PDF oder Adobe Framemaker, oder XML Standard Austauschformate, wie DITA, S1000D, PI-MOD[[xe1:Standards;xe2:PI-MOD]] oder TEI[[xe1:Standards;xe2:TEI]].
Vorteile:</p>
                     <ul>
                        <li>
                           <p id="ada9653b-2335-47be-bcd7-a5042e1aedfed6e13">Bei einer Änderung in der XML Quelle werden auch automatisch alle anschließenden Formate aktualisiert.</p>
                        </li>
                        <li>
                           <p id="9c7312ef-0291-4c2d-8fd1-5e3454490334d6e16">Strikte Trennung von Content/Semantik und Layout/Design.</p>
                        </li>
                        <li>
                           <p id="134e480d-ab4c-4554-95d7-55cceb619677d6e19">Auf der XML Quelle sind XML Features möglich, wie:
	
		<b>Modularisierung</b>: Erlaubt die fein-granulare <b>Wiederverwendung</b>[[xe1:Konzepte;xe2:Wiederverwendung]] von Content-Bausteinen, sowie das Verlinken, Filtern, Suchen und Exportieren derselben.
		<b>Generalisierung</b>[[xe1:Konzepte;xe2:Generalisierung und Spezialisierung]] ist ein DITA Konzept, welches die Wiederverendung von angepassten Topics in anderen DITA Systemen ermöglicht.
		<b>Gültigkeiten</b>[[xe1:Konzepte;xe2:Gültigkeitem]] erlauben die bedingte Anwendung von Content-Bestandteilen auf Satz und Wort-Ebene.
		<b>Versionierung</b>[[xe1:Konzepte;xe2:Versionierung]] und <b>Diffing</b>[[xe1:Konzepte;xe2:Diffing]] - Vergleich von Änderungen zwischen Versionen. <b>Intelligente Querverweise</b>[[xe1:Konzepte;xe2:Intelligente Querverweise]]: Ein Link zwischen einzelnen XML Topics  bleibt versionstreu.
		<b>Automatischer Satz</b>, inkl. Zusamenhalte- und Trennregeln für Seiten, Absätze und Blöcke (Listen, Tabellen, etc).
	
	</p>
                        </li>
                        <li>
                           <p id="23dc2a71-64a3-4305-b3d7-81094ca5bcd8d6e22">Veraltete Formate können ausgetauscht werden, ohne dass der Content geändert werden muss oder verlorengeht.</p>
                        </li>
                        <li>
                           <p id="47b354c2-4b48-48c9-ac10-ed3f041feb2fd6e25">Die XML Quelle kann ohne Aufbereitung in anderen Systemen wiederverwendet werden.</p>
                        </li>
                        <li>
                           <p id="252ae481-7a29-4117-9b72-94ae88638e75d6e28">Es gibt weit verbreitete <b>Standards</b> zur Struktur der XML Quelle.</p>
                        </li>
                        <li>
                           <p id="578ead23-ba8a-4186-bf96-e9c9dae8ec9fd6e31">Nur das XML wird in der Datenhaltung persistiert.</p>
                        </li>
                        <li>
                           <p id="c6122f80-b8a0-4cca-9939-4122325dfef2d6e34">Es gibt spezialisierte <doclink class="3337f433-44bf-430d-a809-73fd1de5ba6c"
                                       id="1b7d4b0c-4559-48b0-9e66-21a243a47897"
                                       type="topic">XML Datenbanken</doclink>, die besonders gut auf Baumstrukturen arbeiten. (Dokumente sind per se baum-strukturiert und sind eigentlich für eine relationale Datenbank ungeignet)</p>
                        </li>
                     </ul>
                     <p id="df845a80-c690-4551-af36-90a401ff12aed6e36">Die Redaktionssysteme der Technischen Dokumentation der führenden Hersteller in Deutschland haben XML unter der Haube und setzen auf die <b>Single-Source Strategie</b>.</p>
                  </content>
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="084a7657-95f1-4ade-905e-cada919a0918d6e72">
                  <content>
                     <title id="084a7657-95f1-4ade-905e-cada919a0918d6e72">
                        <title id="c2ea4ffe-bfc9-4c96-b5d9-d793083fc510d6e39">Code Generierung</title>
                     </title>
                     <p id="62ada423-a662-4d08-ba65-63ccadd079ced6e41">Nachdem man bei XSLT im Format der Ausgabe frei ist, kann auch direkt Plain-Text mit  XSLT Regeln generiert werden. Daher liegt es nahe sich jegliche Form von Quelltext aus einer XML Repräsentation erzeugen zu lassen.[[xe1:Anwendungsgebiete;xe2:Code Generierung]]</p>
                     <p id="52746a75-07e2-4452-8f21-1fb22d4e1332d6e43">Beispielsweise speichern gängige CASE Tools (Computer Aided Software Engineering) UML Diagramme im XML Format ab, so z.B. [[link]]ArgoUML[[fn:http://argouml.tigris.org*ArgoUML ist ein freier UML Editor]].</p>
                     <p id="a655bc68-8f84-470f-ad3f-a5bb41b19aa6d6e48">Diese Klassendiagramme lassen sich mittels XSLT direkt in Java-Code transformieren, wie z.B. in einem kleinen Open Source Projekt (aus vergangenen Tagen) : [[link]]Butterfly Code Generator[[fn:http://butterflycode.sourceforge.net*Damit kann man sich Code aus UMl Klassendiagrammen generieren lassen, natürlich XSLT basiert]]</p>
                     <p id="ba1967f4-d697-4466-8455-dd17d935c68ed6e53">Es gibt auch einen schönen Artikel dazu im [[link]]Java World Journal[[fn:https://www.javaworld.com/article/2073998/java-web-development/generate-javabean-classes-dynamically-with-xslt.html*Weiterführende Lektüre zum Thema Code-Generierung mit XSLT]].</p>
                  </content>
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="ce09156d-5ebb-4829-b9dc-21a3bfdf8107d6e83">
                  <content>
                     <title id="ce09156d-5ebb-4829-b9dc-21a3bfdf8107d6e83">
                        <title id="bd0e17e7-dce2-45a0-b5eb-90297e678e88d6e56">Migrationen und Konvertierungen</title>
                     </title>
                     <p id="b7221c07-bea2-4a1e-a1cd-09318580ea8dd6e58">Für jede erdenkliche Art der Migration[[xe1:Anwendungsgebiete;xe2:Migration]] eines XML Datenbestands oder eines Datenbank-Dumps / -Exports im XML Format, zwischen Produktversionen oder zwischen Dienstleister- und Dienstnutzer-Systemen, bietet sich XSLT zur Transformation an.</p>
                     <p id="755dccf0-48c4-4b8f-a778-4e4eb27089a9d6e60">Dabei ist zu beachten, dass XSLT besonders schnell und gut auf verschachtelten Strukturen arbeitet. Entartet ein Baum zur Liste und/oder sind nur geringe Strukturanpassungen notwendig, wird man sich mit einem schnellen SAX Parser leichter tun. </p>
                     <p id="e438ab3c-2aa9-4400-a40a-9181c1911835d6e90"> Mittels der XSLT3.0 Streaming Option können auch sehr große XML Quellen (Big Data) verarbeitet werden. Saxon bietet bspw. diese [[link]]Streaming Option[[fn:http://www.saxonica.com/html/documentation/sourcedocs/streaming/*Streaming ist eine Technik zur Verarbeitung großer XML Daten - Stichwort Big Data - mit XSLT3.0]].</p>
                  </content>
               </chapter>
            </block>
         </content>
      </chapter>
   </chapter>
   <chapter hyphenation="yes" chapterpage="no" id="31a92dc0-959c-49a1-b06e-01e2369e050e"
            ismodule="no">
      <content>
         <title id="6da095b0-be8a-4477-8792-76a4961ade76">
            <title id="6a6d03c2-e2be-4b5f-b515-ed4ec3132dd1">Wichtige Konzepte</title>
         </title>
         <block>
            <p id="40291b73-b2de-452a-b0ab-b965112e44d3">XSLT und XQuery erlauben es Probleme auf viele verschiedene Arten zu lösen. Sicherlich wird jeder Programmierer im Laufe der Zeit seinen eigenen Stil entwickeln. Das kommt nicht zuletzt daher, dass man als XSLT Entwickler in vielen Firmen eine Expertenrolle einnimmt.</p>
            <p id="cb3766c6-5767-4c76-8987-8c97105368d3d6e6">Umso wichtiger ist es, sich an allgemeine Konzepte, Muster und Best Practices zu halten, um einen schwer wartbaren Wildwuchs zu vermeiden.</p>
            <p id="56769cd8-2869-4568-8e41-c9dd7310db84d6e8">Auf den folgenden Seiten wird versucht einige dieser Konzepte zusammenzutragen und mit eigenen Erfahrungen und Ideen zu kombinieren.</p>
            <p id="65cec675-3f08-498e-844c-e3ffc14553b2d6e10">Es wird weder der Anspruch auf Vollständigkeit noch auf Korrektheit dieser Informationen erhoben. Das Kapitel soll vielmehr als Denkanstoß mit hoffentlich einigen verwertbaren Ideen dienen.</p>
            <p id="19ced220-b086-4c47-b595-96a57e617152d6e12">[[chaptertoc]]</p>
         </block>
      </content>
      <chapter hyphenation="yes" chapterpage="no" id="5b73f348-0058-45e0-82f7-c3de72ec5d41"
               ismodule="no">
         <content>
            <title id="17f5bbad-c12b-4da2-a847-29aba6fa0b48">
               <title id="c16fd330-a145-443c-bf0a-2ca245527453">Push vs. Pull Stylesheets </title>
            </title>
            <block>
               <p id="e2adb8e3-a080-41a2-a76f-c4a29dacd4d2">XSLT ist eine ereignisgesteuerte,[[xe1:Konzepte;xe2:Push vs. Pull]] regelbasierte Umgebung zur Konvertierung von XML Daten. Gerade der Vorteil des regelbasierten Ansatzes ist vielen Entwicklern nicht bewusst, und es entsteht Quellcode der aussieht, wie mit XPath angereicherter PHP Code.</p>
               <p id="75d35ff2-13b7-4c17-9aef-8c028ca9a0a7d6e6">Wieso nimmt man dann überhaupt XSLT, wenn man keine Template-Match Regeln verwendet, oder nur spärlich verwendet?</p>
               <p id="adf97e75-c632-445e-aa9f-914096737fdcd6e8">Um diesen Umstand aufzuklären ist ein bisschen Theorie notwendig:</p>
               <figure pdfwidth="page">
                  <subtitle id="bd026272-b5da-421c-9c45-089f290ae41bd6e11">Pull Stylesheet</subtitle>
                  <desc id="07322c84-0481-44ab-a799-bf52da6b8dded6e13">Beim "Pull" werden Elemente in der Quellinstanz selektiert und an einer passenden Stelle in der Zielinstanz eingefügt. Diese Vorgehensweise ist vergleichbar mit derer von Template-Engines, wie JSP oder ASP. Das kann in mehreren Stufen erfolgen, bis schrittweise die Quellinstanz in die finale Zielinstanz überführt wurde.</desc>
                  <img src="./client/data/5b73f348-0058-45e0-82f7-c3de72ec5d41/pull.svg"/>
               </figure>
               <figure pdfwidth="page">
                  <subtitle id="b19d3af3-4850-4f73-83b9-84fc139780e3d6e17">Push Stylesheet</subtitle>
                  <desc id="9a63a604-831f-49cb-81a7-0b79d0c947bdd6e19">Beim "Push" werden die Quelldaten schrittweise in die Zieldaten konvertiert. Diese Vorgehensweise kann explorativ erfolgen und beim Transformieren in einen Zwischenschritt entstehen Erkenntnisse, die bei der Weiterverarbeitung nützlich sind. <b>Merke:</b> XSLT steht für eXtensible Stylesheet Transformation.</desc>
                  <img src="./client/data/5b73f348-0058-45e0-82f7-c3de72ec5d41/pusch.svg"/>
               </figure>
               <p id="43976824-218f-4b76-9c34-24b9e47ccbfcd6e22">Das bisher Gesagte verdeutlicht zwar den "Pull" Ansatz, was genau aber ge"pusht" wird, ist vermutlich noch unklar. Betrachten wir XML in der Baumdarstellung.</p>
               <figure pdfwidth="page">
                  <subtitle id="a24e2f39-4ed3-4f98-a3d6-c7f48358293ad6e28">Transformation des Quellbaums in den Zielbaum</subtitle>
                  <desc id="b407302b-5344-487c-963d-1bf2e2625dded6e30">Der XSLT Prozessor unternimmt einen Tiefensuchlauf[[xe1:Tiefensuchlauf]] und überprüft bei jedem Knoten den er betritt, ob in seiner Regelbasis eine Regel existiert, die auf diesen Knoten "matched". Dabei gibt es drei grundsätzliche Möglichkeiten, wie die Knoten des Quellbaums in den Zielbaum kopiert - oder eben nicht kopiert - werden können.</desc>
                  <img src="./client/data/5b73f348-0058-45e0-82f7-c3de72ec5d41/push.svg"/>
                  <legend>
                     <leg-entry id="f9455559-67ce-4901-9444-ccdd01d21c56d6e43">
                        <leg-pos>
                           <p id="84d2229a-ea25-4543-8c97-0ba238add5b8d6e45">Remove</p>
                        </leg-pos>
                        <leg-name>
                           <p id="55bc5ab5-3a61-4a2d-931a-869b2a1271abd6e48">Beim Betreten einer leeren Match-Regel wird ein Teilbaum nicht kopiert</p>
                        </leg-name>
                     </leg-entry>
                     <leg-entry id="4f2540c3-a78f-49dc-a2b3-3e3d5c7d1c16d6e50">
                        <leg-pos>
                           <p id="1d2fa28e-b42a-4d7e-8251-9021a2d5c910d6e52">Bypass</p>
                        </leg-pos>
                        <leg-name>
                           <p id="f3efa098-bd76-4f6b-98e9-9407409a1ccfd6e55">Beim Betreten einer Match-Regel ohne Kopieranweisung wird der Knoten übersprungen</p>
                        </leg-name>
                     </leg-entry>
                     <leg-entry id="f38f09a2-6878-42f6-bcfe-621ca2fc7fa5d6e57">
                        <leg-pos>
                           <p id="5642055c-b103-4032-83ea-fbcacc830f0cd6e59">Push</p>
                        </leg-pos>
                        <leg-name>
                           <p id="6cbf3169-aec8-4162-bcde-7fbc915a27c2d6e62">Durch gezielte Auswahl einer Knotenmenge auf der Descendant-Achse wird der XSLT Prozessor in eine bestimmte Richtung ge"pusht".</p>
                        </leg-name>
                     </leg-entry>
                  </legend>
               </figure>
               <p id="299d3e98-3089-4974-a46a-bf457340a701d6e52">Pull-Stylesheets werden gewöhlich mit <b>for-each</b> Loops programmiert. Dieser Ansatz ist meiner Ansicht nach gebräuchlich, wenn keine großen DTD Änderungen zu erwarten sind, der XML Baum flach strukturiert ist und die Anforderungen an die  Knvertierung relativ einfach sind, bspw. beim Auswerten / Konvertieren von Konfigurationsdateien. In alles anderen Fällen sind Push-Stylesheets vorzuziehen, d.h. möglichst wenige <b>for-each</b> loops und möglichst viele <b>Template-Match</b> Regeln.</p>
            </block>
         </content>
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="db988919-f71e-437e-b699-b6fdd2a32cb9"
               ismodule="no">
         <content>
            <title id="a418237e-b29f-4ec8-960f-1707108b9f59">
               <title id="b8539c31-c176-46bb-b028-e811b2decfbe">Eindeutigkeit der Regelbasis</title>
            </title>
            <block>
               <p id="9a5b8555-49ef-4d3a-bc72-1640077ef423">Die Regelbasis[[xe1:Konzepte;xe2:Regelbasis]] der XSLT ereignisgesteuerten Laufzeitumgebung kann unendlich viele Regeln aufnehmen. Für die Vollständigkeit, Eindeutigkeit und Konsistenz der Regelbasis ist der Programmierer selbst verantwortlich.</p>
               <p id="3e087bbf-c0ae-4bd1-95b2-89113fd7f25cd6e6">Um die Eindeutigkeit der Regeln zu gewährleisten,  gibt es verschiedene Mechanismen.</p>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="dddb5d5f-b523-4d70-871c-9deadda78661d6e8">
                  <content>
                     <title id="dddb5d5f-b523-4d70-871c-9deadda78661d6e8">
                        <title id="e16576ad-fbf7-41d7-a23e-deb174c6b176d6e9">Reihenfolge der Match-Regeln</title>
                     </title>
                     <p id="9ef5fc0c-f742-4267-98dc-3a3c4711f7f4d6e11">Im Normalfall sollte auf einen bestimmten Knoten in einem bestimmten Szenario genau eine Regel matchen. Falls es einen Konflikt gibt, wird zumindest bei Saxon diejenige Regel herangezogen, die im Stylesheet zuletzt deklariert wurde.</p>
                     <p id="ca5b365e-570a-4296-be40-adc228bb4c30d6e13">Diesen Umstand zu kennen, ist genau dann wichtig, wenn man einen bestehenden Stylesheet-Code übernehmen muss. Getreu dem Motto "Never change a running system" sollte man die Sache diesbzgl. sehr behutsam aufräumen.</p>
                  </content>
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="9ee01e85-e2da-4c26-9c87-8ab4ef47faf6d6e15">
                  <content>
                     <title id="9ee01e85-e2da-4c26-9c87-8ab4ef47faf6d6e15">
                        <title id="c35ab440-7d81-4466-a34f-32545cec227ad6e14">Präzedenz der Auswertung</title>
                     </title>
                     <p id="477f566a-06ea-4716-afc4-5f3fc591ec04d6e16">Match-Regeln[[xe1:Konzepte;xe2:Match-Regeln]] werden gemäß ihrer Spezifität sortiert und diejenige, die auf einem Knoten in einem bestimmten Szenario am besten zutrifft, wird zur Auswertung herangezogen. Grds. werden die Regeln anhand folgender Kriterien sortiert:[[xe1:Konzepte;xe2:Priorität]]</p>
                     <procedure type="ol">
                        <step>
                           <action>
                              <p id="12919986-a583-4893-bc7b-bcab6b74558fd6e22">Importierte Template Regeln haben immer eine niedrigere Priorität als die Regeln des importierenden Stylesheets.</p>
                           </action>
                        </step>
                        <step>
                           <action>
                              <p id="01aededb-d8e1-43b6-92d3-1495e12ce7e5d6e25">Templates mit einem höheren Priority Attribut haben Vorrang.</p>
                           </action>
                        </step>
                        <step>
                           <action>
                              <p id="70789d26-aaa8-40ca-ab3d-54df68f59d9fd6e28">Templates ohne Priorität bekommen automatisch eine Default-Priorität. Die höchste Default-Priorität ist [[code:0.5]].</p>
                           </action>
                        </step>
                        <step>
                           <action>
                              <p id="aafa8f6b-38f7-4076-8d83-4d506d2df6bdd6e31">Diese Default Priorität errechnet sich anhand der Bedingungen oder Wildcards, die an einen Match-Regel geknüpft sind: </p>
                              <ul>
                                 <li>
                                    <p id="847229ce-7fb1-40e2-89d1-a17200496892d6e35">Wenn mehrere Templates matchen, dann wird das am meisten spezifische zur Auswertung herangezogen.</p>
                                 </li>
                                 <li>
                                    <p id="1f5826ff-6c21-4694-93bf-ed25bd17e9c1d6e38">Das am meisten spezifische Template wird anhand der Prioritäten berechnet.</p>
                                 </li>
                                 <li>
                                    <p id="93f78735-9ee8-4a55-b111-db46fa1c0448d6e41">Einfache Elementnamen (z.B. "para") haben Prio [[code:0]].</p>
                                 </li>
                                 <li>
                                    <p id="918bc399-4754-4a49-aba8-e5b5261e25acd6e44">Wildcards (z.B. [[code:*, @*]]) haben Priorität [[code:-0.25]]</p>
                                 </li>
                                 <li>
                                    <p id="26a5a996-f002-4a8d-b4a2-d2bd6d0e0723d6e47">Knoten-Tests für andere Knoten (e.g. [[code:comment(), node()]], etc. ) haben Priorität [[code:-0.5]]</p>
                                 </li>
                                 <li>
                                    <p id="75eeb424-e904-4ba4-aae1-ca1bbf270491d6e50">In allen anderen Fällen ist die Prio [[code:0.5]].</p>
                                 </li>
                              </ul>
                              <p id="787a2108-8ab3-4f1a-a6fd-7f1e4ec490f4d6e52">Beispiele:</p>
                              <ul>
                                 <li>
                                    <p id="57a536cb-b2a8-4d4f-b093-065406abc1b4d6e56">[[code:para -&gt; 0]]</p>
                                 </li>
                                 <li>
                                    <p id="4d8707a6-e174-42ea-a461-18f77c90df5dd6e59">[[code:h:* -&gt; -0.25]]</p>
                                 </li>
                                 <li>
                                    <p id="d7d5606d-df29-4c0f-847a-cac5c4e462e5d6e62">[[code:* -&gt; -0.25]]</p>
                                 </li>
                                 <li>
                                    <p id="154c565b-e5a8-41ef-a166-4c0af8877454d6e65">[[code:node() -&gt; -0.25]]</p>
                                 </li>
                                 <li>
                                    <p id="9ec834a7-6f28-4075-910b-a00e9e51c8cbd6e68">[[code:contents/para -&gt; 0.5]]</p>
                                 </li>
                                 <li>
                                    <p id="2b566d41-a710-4f86-89dd-52131d8c7c87d6e71">[[code:contents/* -&gt; 0.5]]</p>
                                 </li>
                              </ul>
                           </action>
                        </step>
                        <step>
                           <action>
                              <p id="9c338e96-d097-4e31-a5a2-1768d5aa639dd6e34">Mit einer Kommandozeilen-Option kann bei Saxon festgelegt werden, dass die Transformation abbricht, sobald es einen Konflikt bei der Regelauswertung[[xe1:Konzepte;xe2:Regelauswertung]] gibt.</p>
                           </action>
                        </step>
                     </procedure>
                  </content>
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="daccc985-d7ea-41a7-8408-3094b807352dd6e76">
                  <content>
                     <title id="daccc985-d7ea-41a7-8408-3094b807352dd6e76">
                        <title id="5b4364ca-516c-4edb-a9e8-3de574a18cc2d6e19">Import Präzendenz und Default-Regel</title>
                     </title>
                     <p id="69c293ea-97d3-42a9-a6f4-a6f8bdcfa0edd6e21">Wie in der obigen Sektion unter Punkt 1. angegeben, haben alle[[xe1:Konzepte;xe2:Import Präzedenz]] Regeln in einem importierten Stylesheet eine geringere Priorität als im importierenden Stylesheet. Diesen Umstand kann man sich zunutze machen, um eine Default-Regel[[xe1:Konzepte;xe2:Default-Regel]] einzubinden, bspw:</p>
                     <verbatim>&lt;xsl:template match="*" mode="#all"/&gt;</verbatim>
                     <p id="ee1dbc33-8d3b-4a4d-8fff-0f3d31f87f4bd6e83">Da sie sich in einem importierten Stylesheet befindet, hat sie geringere Priorität als alle anderen Regeln und greift nur dann, wenn für einen betretenen Knoten keine andere Match-Regel definiert ist.</p>
                     <p id="c1b40cca-19d7-4c6e-9be7-d77ad779951bd6e85">Das ist z.B. praktisch, um nicht "gehandelte" Element zu identifizieren - dazu wäre die obige Regel nicht leer, sondern würde bspw. einen gelb markierten Warntext direkt in das Ausgabeformat schreiben.</p>
                     <p id="daffa816-57a9-4f65-b1c3-b5266bc0c41bd6e87">Eine leere Default-Regel ist dagegen gut, wenn bspw. in einer XML-2-XML Migration automatisch Knoten im XML Baum abgetrennt werden sollen, für die keine Match-Regel existiert.</p>
                  </content>
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="8159cee1-a749-403e-8f24-6ca446baade4d6e89">
                  <content>
                     <title id="8159cee1-a749-403e-8f24-6ca446baade4d6e89">
                        <title id="be710deb-554e-4962-beb9-9de58d386c7fd6e24">Prioritäten</title>
                     </title>
                     <p id="d9a24ef4-9b36-4aa8-ae9b-371cfe8120c2d6e26">Wie oben schon verdeutlicht[[xe1:Konzepte;xe2:Priorität]] werden alle Match-Regeln mit einer Priorität ausgestattet. Der Stylesheet-Entwickler hat die Möglichkeit diese Priorität zu überschreiben. Dazu wird das Attribut [[code:@priority]] an der Match-Regel verwendet. Ein Use-Case für die Prioritäten wäre bspw. folgendes Szenario:</p>
                     <ul>
                        <li>
                           <p id="2ad7f812-2b73-49a6-a5f7-36638003d62ed6e96">Die Eingabeinstanz soll in einer Vorprozessierung gefiltert werden.</p>
                        </li>
                        <li>
                           <p id="95feaac6-9c99-45e3-afc6-5d662d429984d6e99">Dabei sollen Seminar-Elemente markiert werden, die nicht besonderen Bedingungen entsprechen:</p>
                           <ul>
                              <li>
                                 <p id="e7dfbd53-0177-4c4c-b997-f05acf05a6d9d6e103">Das Seminar-Element hat ein Feld "Ende-Datum" das abgelaufen ist.</p>
                              </li>
                              <li>
                                 <p id="e4c707c1-e72a-4973-bfd7-8daf6c6f8caed6e106">Am Seminar-Element sind mehrere Dozenten angestellt, obwohl das Seminar-Element vom Type "Single" ist.</p>
                              </li>
                              <li>
                                 <p id="d2a692e7-0a1c-4f95-af44-4dc456ceb645d6e109">em Seminar-Element ist kein Dozent zugeordnet.</p>
                              </li>
                           </ul>
                        </li>
                        <li>
                           <p id="d467b740-3e8b-4bac-949c-b94f3c9dc174d6e112">Sicherlich kann es Seminar-Elemente geben, die alle drei Bedingungen erfüllen. Um das Error-Log aber nicht zu überfüllen, sollen die Filter nach ihren Prioritäten ausgeführt werden.</p>
                        </li>
                     </ul>
                     <p id="3f9a7a12-fa87-47eb-9874-4d8f275ed427d6e114">In Templates überführt, könnte diese Anforderung so umgsetzt werden:</p>
                     <verbatim>&lt;xsl:template match="Seminar[Ende-Datum/xs:date(.) le current-date()]" 
              priority="30" mode="filter-network"&gt; 
  &lt;xsl:element name="Filtered-Seminar" namespace="{namespace-uri()}"&gt; 
    &lt;xsl:attribute name="reason"&gt;termed-seminar&lt;/xsl:attribute&gt; 
    &lt;xsl:apply-templates select="node()|@*" mode="filter-network"/&gt; 
  &lt;/xsl:element&gt; 
&lt;/xsl:template&gt; 

&lt;xsl:template match="Seminar[Type eq 'SINGLE' and count(dozenten/dozent) gt 1]"
              priority="20" mode="filter-network"&gt; 
  &lt;xsl:element name="filtered-Seminar" namespace="{namespace-uri()}"&gt; 
    &lt;xsl:attribute name="reason"&gt;dozenten-count&lt;/xsl:attribute&gt; 
    &lt;xsl:apply-templates select="node()|@*" mode="filter-network"/&gt; 
  &lt;/xsl:element&gt; 
&lt;/xsl:template&gt; 

&lt;xsl:template match="Seminar[not(dozenten/dozent)]" mode="filter-network"&gt; 
  &lt;xsl:element name="filtered-Seminar" namespace="{namespace-uri()}"&gt; 
    &lt;xsl:attribute name="reason"&gt;dozenten-missing&lt;/xsl:attribute&gt; 
    &lt;xsl:apply-templates select="node()|@*" mode="filter-network"/&gt; 
  &lt;/xsl:element&gt; 
&lt;/xsl:template&gt;</verbatim>
                  </content>
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="1c1d47cc-6418-4bdb-ad46-5f097384af28d6e118">
                  <content>
                     <title id="1c1d47cc-6418-4bdb-ad46-5f097384af28d6e118">
                        <title id="8950e48f-85c8-4fc8-98f7-e1f7e42ed7d5d6e29">Modus Attribute</title>
                     </title>
                     <p id="bc053ce1-34d6-4565-8b3a-f2fe65d21f1cd6e31">An allen Templates[[xe1:Konzepte:xe2:Modus]] hat man die Möglichkeit einen selbst deklarierten Modus anzugeben. Wenn dann der XSLT Prozessor in eine bestimmte Richtung gepusht, vgl. <doclink class="5b73f348-0058-45e0-82f7-c3de72ec5d41"
                                 id="8e5f35b9-8707-4d46-bf49-cfcfbdc2c7c9"
                                 type="none">Push vs. Pull Stylesheets</doclink> , wird, werden nur diejenigen Regeln zur Auswertung herangezogen, die im selben Modus sind, wie der [[code:apply-templates]] Call.</p>
                     <p id="f26823af-acb5-4314-8aca-25e62527371dd6e126">Beispielsweise möchte man die Titel im Kapitel anders behandeln als die Kapitel im Inhaltsverzeichnis, denn im TOC sollen z.B. keine Fussnoten-Marker angezeigt werden. </p>
                     <p id="12bc5735-95b8-4bb2-99e7-a2979c3d031ad6e128">In Templates formuliert würde diese Anweisung folgendermassen aussehen:</p>
                     <verbatim>&lt;xsl:template match="title" mode="toc"&gt;
  &lt;div class="toc-entry"&gt;
    &lt;xsl:apply-templates select="*[not(self::footnote)]"/&gt;
  &lt;/div&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="title"&gt;
  &lt;h1&gt;
    &lt;xsl:apply-templates/&gt;
  &lt;/h1&gt;
&lt;/xsl:template&gt;</verbatim>
                     <p id="b11eef8a-04dc-4c3e-b189-3d8d6b78444ad6e132">Die Generierung des TOC könnte dann so ablaufen:</p>
                     <verbatim>&lt;xsl:for-each select="chapter"&gt;
  &lt;xsl:apply-templates select="title" mode="toc"&gt;
&lt;/xsl:for-each&gt;</verbatim>
                     <p id="2cb80884-bdd3-4b2d-a4ae-4d1c7ed04a67d6e136">Bzgl. der Eindeutigkeit der Regelbasis kann man also auch noch anhand des Mode-Attributes Ausführungs-Gruppen bilden. </p>
                     <warning>
                        <cause>Wie auch bei Angabe der Priorities kann man auf diese Weise Regeln setzen, die nie ausgeführt wurden, weil sie vllt. im Zuge einer Refactoring-Massnahme abgeklemmt und dann vergessen wurden.</cause>
                        <consequence>Auch das mode-Attribut ist also mit Vorsicht zu geniessen und sparsam einzusetzen.</consequence>
                     </warning>
                  </content>
               </chapter>
            </block>
         </content>
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="3e443c28-8698-470b-b443-f286ff7ed2d5"
               ismodule="no">
         <content>
            <title id="309017d9-9fd7-4a34-b13a-4bf8ecea4556">
               <title id="743f34bc-c83e-49d3-9a2e-2c38d1c384c9">Namespaces</title>
            </title>
            <block>
               <p id="6f3e2556-a8a9-4c91-bf51-cc4b05ba29c9">Wenn man XML Instanzen aus unterschiedlichen Quellen mit XSLT verarbeiten will, wird man sich wohl
oder übel mit dem Thema Namespaces[[xe1:XML Konstrukte;xe2: Namespaces]] (NS) auseinander setzen müssen, um Konflikte in den 
Elementselektoren zu vermeiden.</p>
               <p id="408f70f7-e541-4c17-bc75-16db61b71e87d6e6">Gerade bei hintereinandergeschalteten Transformationen kann es auch passieren, 
dass unerwartet ein Namespace in die Ausgabe generiert wird,
den der folgende Prozesschritt nicht versteht, weil er dort nicht deklariert wurde.</p>
               <p id="7b6e758e-d962-425a-86cf-30fc852bda81d6e8">Es gibt meherere Möglichkeiten einen Namespace im Stylesheet zu deklarieren. Gehen wir davon aus,
dass in einem Transformationsschritt genau eine Quelle und max. eine Konfigurationsdatei verarbeitet 
wird, dann kann das Stylsheet-Element bspw. so aussehen:</p>
               <verbatim>&lt;xsl:stylesheet version="2.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" 
  xmlns:tektur="https://namespace-eigener-xslt-funktionen"
  xmlns="http://namespace-in-der-xml-eingabe.com/"
  xpath-default-namespace="https://namespace-der-konfigdatei.com/"
  exclude-result-prefixes="#all"&gt;</verbatim>
               <ul>
                  <li>
                     <p id="3bc26fb9-3d57-4990-9cb6-bdeea4a490d5d6e14">Der <b>xsl</b> Namespace ist klar</p>
                  </li>
                  <li>
                     <p id="9f37a0f6-0e32-4d52-a2df-26c8b92c584bd6e20">Der <b>xs</b> Namespace ist notwendig, wenn man typisiert arbeiten will. Er erlaubt das Einbinden von Datentypen
nach der [[link]]XML Schema Spezifikation[[fn:https://de.wikipedia.org/wiki/XML_Schema*XML Schema ist der Nachfolger der DTD, ist XML basiert und erlaubt auch die die Content-Validierung in einem bestimmten Umfang]] und somit die 
bessere Validierung des Stylesheets zur Compile-Zeit.</p>
                  </li>
                  <li>
                     <p id="effc0d73-d115-4f50-99c0-bd16960d52f6d6e26">Die Deklaration eines eigenen geprefixten Namespaces erlaubt das Einbinden von eigenen XSLT Funktionen, 
wie z.B. auch das Einbinden der [[link]]FunctX Bibliothek[[fn:http://www.xsltfunctions.com/*Sehr gut gegliederte Funktionsbibliothek von Priscilla Walmsley]]</p>
                  </li>
                  <li>
                     <p id="985f02e1-ff86-49cd-9f9c-d285261fb6bed6e29">Der Nicht-geprefixte Namespace ist der Default-Namespace und kann einen NS aus der Eingabe handeln</p>
                  </li>
                  <li>
                     <p id="6f7d075e-efb2-4407-adb3-6b0d46163a1ed6e32">Das Attribut <b>xpath-default-namespace</b> gibt einen weiteren NS an, der in XPATH Funktionen verwendet werden kann.
In diesem Feld würde ich den NS einer Konfigurations- oder separaten Datendatei angeben.</p>
                  </li>
               </ul>
               <p id="facda359-d33a-4d29-86cd-1c8ed0c0c37bd6e37">Mehr als einen NS in der Eingabe sollte man aus meiner Sicht bei der XML Verarbeitung nit XSLT vermeiden wenn es geht.
GGf. empfiehlt es sich, die Eingabe vor der Verabeitung zu normalisieren und Elemente ggf. umzubennen. Ansonsten kann man auch eigene Namespace-Prefixes deklarieren, wie z.B.:</p>
               <verbatim>xmlns:ext="https://www.tekturcms.de/external-tools"</verbatim>
               <p id="11bfa628-dd5a-46ee-9dfa-99ea9733ed73d6e41">und diese in XPATH Selektionen und Match-Regeln verwenden.</p>
               <danger>
                  <cause>Befinden sich in den Eingabedaten Namespaces, die man in den XSLT Stylesheets nicht handelt - der Namespace kann auch nur
an einem ganz bestimmten Element hängen - so kann es bei der Transformation - ohne Fehlermeldung - zu unerwarteten Ergebnissen kommen.</cause>
                  <consequence>Deshalb sollte man die Daten im Vorfeld bzgl. Namespaces sehr genau analysieren.</consequence>
               </danger>
               <p id="b714b258-69e2-40ef-9d70-582d27bbfc6cd6e45">Namespaces in der Eingabe werden also meistens über die Kopfdeklaration in der Stylesheetdatei gehandelt, welcher Namespace
schliesslich in die Ausgabe geschrieben wird, hängt vom aktuell verarbeiteten Kontextknoten ab:</p>
               <ul>
                  <li>
                     <p id="93df2752-2e39-44f2-8306-bc4014ec566ad6e49">Elemente, die man erzeugt, erhalten automatisch den Default-Namespace, wenn man nicht explizit einen NS angibt.</p>
                  </li>
                  <li>
                     <p id="dd1681a1-b730-4864-9fc6-3b85c7d428c2d6e52">Elemente, die man kopiert, transportieren den Namespace, den sie in der Eingabe hatten, wenn man dies nicht explizit verhindert.</p>
                  </li>
               </ul>
               <p id="b7e9f54a-5c0b-48de-abf2-80f917c915acd6e54">Um diese beiden Default Einstellungen zu steuern (bzw. zu überschreiben) gibt es mehrere Möglichkeiten:</p>
               <verbatim>&lt;xsl:element name="{local-name()}" namespace="{namespace-uri()}"&gt;</verbatim>
               <p id="e38c1750-4914-402d-a6c8-1189f6f96106d6e59">Hier wird ein Element mit dem un-geprefixten Namespace des Kontextknotens deklariert.
Wenn der Kontextknoten keinen anderen Namespace hat, so wird hierdurch sichergestellt,
dass der Default Namespace auch tatsächlich in die Ausgabe kommt.</p>
               <verbatim>&lt;xsl:element name="meinelement" namespace="mein-namespace"&gt;</verbatim>
               <p id="ff135156-7c5f-461a-aa39-03acbbfc2164d6e63">Hier wird ein Element mit eigener Namespace Angabe in die Ausgabe geschrieben. Einfacher geschrieben:</p>
               <verbatim>&lt;mein-element xmlns="mein-namespace"&gt;</verbatim>
               <p id="5803933b-c6bf-431b-9f72-f8649ce4f19fd6e71">Es gibt auch ein Attribut am xsl:copy Element,
das den Vorgang des Namespace-Kopierens steuern kann:</p>
               <verbatim>&lt;xsl:template match="p"&gt;
  &lt;xsl:copy copy-namespaces="no"&gt;
     &lt;xsl:apply-templates/&gt;
   &lt;/xsl:copy&gt;
&lt;/xsl:template&gt;</verbatim>
               <p id="1f87506c-b5f5-4f11-9ff3-4932938dea95d6e67">Hier wird der Namespace am [[code:p]] Element nicht in die Ausgabe geschrieben. Ggf. funktiniert diese
Funktion aber mit unerwarteten Ergebnissen, deshalb sollte man sich ohne genauen Test nicht darauf verlassen.</p>
               <p id="526b542d-9aaa-4181-bb81-9990f3f9940bd6e69">Ebenso kann eine Default-Kopierregel verwendet werden, die es verbietet einen Namespace
weiterzuvererben:</p>
               <verbatim>&lt;xsl:template match="@* | node()"&gt;
   &lt;xsl:copy inherit-namespaces="no"&gt;
     &lt;xsl:apply-templates select="@* | node()"/&gt;
   &lt;/xsl:copy&gt;
&lt;/xsl:template&gt;</verbatim>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="93174629-fa2e-4ee4-a5f4-805f4708bb69d6e82">
                  <content>
                     <title id="93174629-fa2e-4ee4-a5f4-805f4708bb69d6e82">
                        <title id="ad139a27-9649-4c97-8f05-a62edd570cb7d6e74">Namespaces in XQuery</title>
                     </title>
                     <p id="6a862358-2454-4cb0-a7c5-854c9d4cf899d6e75">Während XSLT dazu dienen sollte, XML Daten in andere (XML-) Formate zu transformieren, dient XQuery 
z.B. dazu auf einer NoSQL Datenbank Daten aus unterschiedlichen Quellen
zu selektieren, zu harmonisieren und an verarbeitende Prozesse weiterzugeben.</p>
                     <p id="56fd4141-0088-4fdb-bf10-930e2d5d028ed6e77">Deshalb ist es für mich nicht so erstaunlich, dass das Namespace Konzept in XQuery irgendwie besser
funktioniert.</p>
                     <p id="baa93854-b02c-41f2-a553-bb6701a8925ed6e79">Damit man überhaupt Daten auf einem mit Namespaces versehenen XML Dokument selektieren
kann, müssen alle Namspaces am Anfang des XQuery Ausdrucks angegeben werden, das sieht so aus:</p>
                     <verbatim>xquery version "1.0-ml";

import module namespace tektur = "http://www.teturcms.de/xquery/common" 
                                  at "common.xqy";
import module namespace mem = "http://xqdev.com/in-mem-update" 
                                  at '/MarkLogic/appservices/utils/in-mem-update.xqy';
declare namespace local = "https://lambdawerk.com/code/alex-sandbox/1.0";
declare namespace weiredns = "https://weired-ns-in-input-data.com/weired/ns";
declare namespace xs = "http://www.w3.org/2001/XMLSchema"; </verbatim>
                     <p id="d6bb0949-b9fa-4770-ba36-3acf2056e934d6e83">Hier werden zuerst Funktionen aus anderen Modulen eingebunden, nämlich die in einer Datei common.xqy
im selben Verzeichnis aus der eigenen Entwicklung, sowie die Bibliothek mem aus der MArklogic
Umgebung. Danach wird ein NS local deklariert, den man verwenden wird, wenn im weiteren Verlauf
eigene XQuery Funktionen verwendet werden sollen, sowie der NS weiredns, der in den Eingabedaten
vorhanden ist. Der NS [[code:xs]] ist analog zum XSLT Beispiel gesetzt.</p>
                  </content>
               </chapter>
            </block>
         </content>
      </chapter>
   </chapter>
   <chapter hyphenation="yes" chapterpage="no" id="f838f9be-97bf-44a4-ac63-2e813a87f2ea"
            ismodule="no">
      <content>
         <title id="a230cf67-a3f4-40e4-af51-9959bbc104d8">
            <title id="e959b617-429c-4a40-9ba2-c55ac946a753">Ausgewählte Themen</title>
         </title>
         <block>
            <p id="3a3aa31c-2536-4888-a24f-080ab7101b8f">Auf den folgenden Seiten habe ich Themen ausgewählt, die für mich gerade besonders interessant erscheinen. Nach einer drei-jährigen Pause im Bereich XML, gibt es nun doch wieder viele neue Sachen ...</p>
            <p id="f3210897-f5d0-4e4a-9455-60177b5dbac2d6e6">[[chaptertoc]]</p>
         </block>
      </content>
      <chapter hyphenation="yes" chapterpage="no" id="c20c1e01-1175-4664-a26a-71317760930f"
               ismodule="no">
         <content>
            <title id="64e2c429-6836-44f8-9b53-af2692ba49f0">
               <title id="81e11338-11b3-42c9-917d-d3f9d4bffb12">Transformationen mit XSLT</title>
            </title>
            <block>
               <p id="3d386b11-25a9-44ed-a2c5-81df086412c6">XSLT ist die Standardlösung für XML Transformationen. Es gibt noch einige exotische Lösungen, wie:</p>
               <ul>
                  <li>
                     <p id="002fe486-1e23-4b4d-ab09-941b91a814d5d6e8">
                        <undefined id="538b0aea-451b-474a-ab72-33a03e5638edd6e9" href="undefined">[[link]]</undefined>Metamorphosis<undefined id="637314cc-588a-404d-aade-40f6251755a1d6e12" href="undefined">[[fn:https://de.wikipedia.org/wiki/XSL_Transformation#MetaMorphosis*Wikipedia Eintrag zu dem XML Prozessor Metamorphosis]] ist eine proprietäre Sprache der Firma Ovidius GmbH in Berlin. Sie findet hauptsächlich Anwendung im Bereich Publishing in der Luftfahrt / Verteidigung.</undefined>
                     </p>
                  </li>
                  <li>
                     <p id="df420ef2-f293-40cc-9c0e-ee2926bcc5a1d6e15">Und auch Spielereien, wie eine Nachbildung der XSLT Syntax in Erlang: [[link]]xmerl_xs[[fn:http://erlang.org/doc/man/xmerl_xs.html*Dokuseiten zum Modul xmel_xs, mit dem man in Erlang wie in XSLT "programmieren" kann]]</p>
                  </li>
               </ul>
               <p id="cf2e40a3-e62f-4a90-980a-e27b751bb842d6e17">In diese Kapitel werden einige ausgewählte Themen zur XML Proezessierung mit XSLT dargestellt. Dabei geht es weder um Vollständigkeit, noch um die beste/eleganteste Lösung, sondern eher um die Vorstellung eines Anwendungsszenarios mit einem potentiellen Lösungsansatz - so wie ich die Sache halt angehen würde ...</p>
            </block>
         </content>
         <chapter hyphenation="yes" chapterpage="no" id="ceed4546-a60b-4d5f-a625-6e79c180cc13"
                  ismodule="no">
            <content>
               <title id="a619c6d9-57c8-4fde-a3c0-cf6002905cc1">
                  <title id="28a8c9ba-33b0-41ff-8681-da976df43b85">Vortransformationen </title>
               </title>
               <block>
                  <p id="8a421545-f7a1-49b2-8250-75b86ca592f8">Bei einer komplexen Transformation ist es ratsam und sogar manchmal unabdingbar die Konvertierung in einzelne Stufen aufzuteilen. Das hat folgende Vorteile:</p>
                  <ul>
                     <li>
                        <p id="1f775282-48f6-4e94-819e-d92684be1b88d6e8">Der Prozess ist transparenter, da die einzelnen Stufen leichter überschaubar sind.</p>
                     </li>
                     <li>
                        <p id="f1e5f594-048a-4ce7-8a07-cd0c65f06729d6e11">Die Zwischenergebnisse können für Debug-Zwecke ausgewertet werde oder dienen als Eingabe für andere Prozesse.</p>
                     </li>
                     <li>
                        <p id="bf659729-4486-4a3b-b983-cec9d5748383d6e14">Nicht-relevante oder invalide Teilbäume können aus der Eingabeinstanz gefiltert werden, um so die weitere Verarbeitung zu beschleunigen.</p>
                     </li>
                     <li>
                        <p id="d115f521-f45c-4ae4-85e8-6ee9264558aed6e17">Hilfskonstrukte können erzeugt werden. Diese erleichtern die weitere Verarbeitung.</p>
                     </li>
                  </ul>
                  <p id="e76a9b14-f720-48ff-afad-95bbd80c53a7d6e19">Es gibt zwei Möglichkeiten, wie eine Vortransformation[[xe1:Verarbeitungsmethoden;xe2:Vortransformation]] eingebunden werden kann:</p>
                  <ul>
                     <li>
                        <p id="2bcf1845-b267-46ac-b853-627fd0a0f3bfd6e23">In einem separaten File bzw. einer XML Instanz, die vom XSLT Prozessor vor der eigentlichen Transformation aufgerufen wird und einen Zwischenstand produziert. Dieser kann dann als Eingabe für den Haupttransformationsschritt dienen.</p>
                     </li>
                     <li>
                        <p id="8f673f1d-8c7a-4616-93f2-d808745421ffd6e26">Innerhalb des eigentlichen XSLT Stylesheets. Hier wird das Ergebnis der Vortransformation in einer Variablen erzeugt.</p>
                     </li>
                  </ul>
                  <p id="e42f964a-137b-4b75-bfad-28dc54470a68d6e28">Den zweiten Punkt möchte ich anhand eines Beispiel XSLT Skripts vorführen. Betrachten wir folgende Input Daten:</p>
                  <verbatim>&lt;education-system&gt;
  &lt;administrative-regions&gt;
    [...]
    &lt;dministrative-region id="31" name="Bavaria"&gt;
      &lt;shools&gt;
        &lt;school id="45"&gt;
          &lt;teachers&gt;
            &lt;teacher id="576"/&gt;
            &lt;teacher id="345"/&gt;
            &lt;teacher id="12"/&gt;
          &lt;/teachers&gt;
        &lt;/school&gt;
        &lt;school id="36"&gt;
          &lt;teachers&gt;
            &lt;teacher id="576"/&gt;
            &lt;teacher id="8"/&gt;
          &lt;/teachers&gt;
        &lt;/school&gt;
        [...]
      &lt;/shools&gt;
    &lt;/dministrative-region&gt;
    [...]
  &lt;/administrative-regions&gt;
&lt;/education-system&gt;</verbatim>
                  <p id="8985af84-2126-4159-b493-540b65c41b58d6e32">Die erste Datei beinhaltet eine Zuordnung von Lehrern zu Schulen in verschiedenen Regierungsbezirken. Um die Daten zu den beiden referenzierten Objekten einzusehen, müssen zwei weitere Dateien konsultiert werden. Die Datei, welche die Lehrer auflistet:</p>
                  <verbatim>&lt;teachers&gt;
  [...]
  &lt;teacher id="576"&gt;
    &lt;first-name&gt;Alfons&lt;/first-name&gt;
    &lt;last-name&gt;Blimetsrieder&lt;/last-name&gt;
    &lt;subjects&gt;
      &lt;subject&gt;Biology&lt;/subject&gt;
      &lt;subject&gt;Math&lt;/subject&gt;
      &lt;subject&gt;Sport&lt;/subject&gt;
    &lt;/subjects&gt;
    &lt;suspended&gt;2017-12-31&lt;/suspended&gt;
    [...]
  &lt;/teacher&gt;
  [...]
&lt;/teachers&gt;</verbatim>
                  <p id="c35caf7a-807f-48b2-8973-1e575a619ae8d6e36">Und die Datei, welche die Schulen auflistet:</p>
                  <verbatim>&lt;schools&gt;
  [...]
  &lt;school id="45"&gt;
    &lt;name&gt;Gymnasium Bad Aibling&lt;/name&gt;
    &lt;type&gt;Oberschule&lt;/type&gt;
    [...]
  &lt;/school&gt;
  [...]
&lt;/schools&gt;</verbatim>
                  <p id="c8ee6679-b15c-45f7-9fca-aa269b19e54dd6e40">Um diese Daten verarbeiten zu können ist es sinnvoll, die drei Dateien in einem ersten "Resolver" Schritt zusammenzuführen und ggf. irrelevante Strukturen zu entfernen. Lehrer aus obigem Beispiel können beispielsweise suspendiert worden sein. Das folgende Skript erledigt dies mittels einer zusätzlichen Transformation in eine Variable:</p>
                  <verbatim>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="2.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  exclude-result-prefixes="#all"&gt;
  
  &lt;xsl:output indent="yes" method="xml"/&gt;
  
  &lt;xsl:strip-space elements="*"/&gt;
  
  &lt;xsl:param name="file-1" required="yes"/&gt;
  &lt;xsl:param name="file-2" required="yes"/&gt;
  &lt;xsl:param name="file-3" required="yes"/&gt;
  
  &lt;xsl:variable name="files" select="(doc($file-1), doc($file-2), doc($file-3))"/&gt;
  &lt;xsl:variable name="bavaria-region-ids" select="(31, 58)"/&gt;
  
  &lt;xsl:key name="teachers" match="teacher" use="@id"/&gt;
  &lt;xsl:key name="schools" match="school" use="@id"/&gt;
  
  &lt;xsl:template name="main"&gt;
    &lt;xsl:variable name="resolve-result"&gt;
      &lt;xsl:apply-templates select="$files/administrative-regions" mode="resolve"/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:apply-templates select="$resolve-result/administrative-regions"/&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="administrative-region[not(@id = $bavaria-region-ids)]" 
                mode="resolve"/&gt;

  &lt;xsl:template match="school" mode="resolve"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:copy-of select="key('schools',@id, $files/schools[1]/root())/node()"/&gt;
      &lt;xsl:apply-templates select="node()|@*" mode="resolve"/&gt;      
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="teacher" mode="resolve"&gt;
    &lt;xsl:copy-of select="key('teachers',@id, $files/teachers[1]/root())/node()"/&gt;
  &lt;/xsl:template&gt;
    
  &lt;xsl:template match="teacher[suspended/xs:date(.) le current-date()]"/&gt;
  
  &lt;xsl:template match="node()|@*" mode="#all"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates mode="#current"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;
  
&lt;/xsl:stylesheet&gt;</verbatim>
                  <p id="45fef16c-d685-4a23-9038-37e8b4ce1715d6e45">Im ersten Resolve-Schritt werden die Referenzen zu den Lehrer- und Schul-Objekten aufgelöst, d.h. die Attribute des Schul-Objekts werden in die Struktur aus der ersten Datei kopiert. </p>
                  <p id="e7b46b28-d440-4f91-b415-c4116e924876d6e47">Die Liste der Lehrer an diesen Schul-Objekten bleibt erhalten und wird mit dem Inhalt aus der zweiten Datei bestückt. </p>
                  <p id="aa88c1b0-cb8a-4647-8498-61e6d266fe18d6e47">Zusätzlich werden alle Regierungsbezirke entfernt, die nicht zu Bayern gehören - was die weitere Verarbeitung wesentlich beschleunigen wird. Lehrer die suspendiert worden sind fliegen ebenfalls raus ...</p>
               </block>
            </content>
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="888d37da-0dbe-4fae-bec9-2ad1e99f7818"
                  ismodule="no">
            <content>
               <title id="86c96e00-9a1f-4187-beba-e5d9bd3a938b">
                  <title id="d97b76dd-7b2b-48e3-9b9e-53a4197d41f8">Vererbung </title>
               </title>
               <block>
                  <p id="9f3c9490-6544-4061-9f73-b31a0655f3fc">Mit XSLT[[xe1:Konzepte;xe2:Vererbung]] kann man Konstrukte nachbilden, so wie sie in anderen Programmiersprachen auch vorhanden sind. Bspw. die Vererbung. Dabei wird in einer Spezialisierung eine schon bereits getätigte Implementierung übernommen und erweitert oder eingeschränkt.</p>
                  <p id="55d7fd52-cfb0-4630-a202-8a4997fdc6d5d6e6">Der Vorteil dabei ist, dass man nicht alles nochmal neu schreiben muss. Das verkleinert die Redundanz, führt zu einer besseren Wartbarkeit und einer geringeren Fehleranfälligkeit.</p>
                  <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                           id="df11855f-2b16-4ccb-b01c-f3ad33cc67bed6e8">
                     <content>
                        <title id="df11855f-2b16-4ccb-b01c-f3ad33cc67bed6e8">
                           <title id="3e8c9912-e49a-4cf3-8836-4c6d59415fcdd6e9">Beispiel: Parameterisierung</title>
                        </title>
                        <p id="87a46d3c-3a53-49d8-81af-0b186522ab04d6e11">Gewöhnlich implementiert man ein Stylsheet für ein bestimmtes Ausgabeformat und eine Produktvariante. Schrittweise werden dann weitere Varianten und Formate hinzugefügt.</p>
                        <p id="2c5936d8-c14a-48c6-8783-22cb447e158ad6e13">Am komfortabelsten hat man es natürlich, wenn zu Beginn der Implementierung eine vollständige Spezifikation vorliegt... Das ist aber natürlich eher selten der Fall.</p>
                        <p id="e49285e4-0d9b-4cb5-88fa-3c0cce5f8ca7d6e13">Aus diesem Grund ist es wichtig, sich eine gute Strategie zu überlegen, damit die Architektur nicht in Spagetthi-Code auswartet.</p>
                        <p id="fd634ecc-535d-4768-bc6f-eb4e29d0f513d6e17">Eine gute Option wäre, die XSLT Import Präzedenz auszunutzen, vgl. Kapitel <doclink class="db988919-f71e-437e-b699-b6fdd2a32cb9"
                                    id="a66a728b-6a98-455a-a8e6-c68417213069"
                                    type="topic">Eindeutigkeit der Regelbasis</doclink>.</p>
                        <p id="c22ab5e0-6336-4c9b-8dff-af1a3bfd84a9d6e22">Angenommen es geht darum zu einem späteren Zeitpunkt weitere Parameter einzuführen. Ein Switch, wie der folgende, müsste dann an mehreren Stellen im Code aktualisiert werden.</p>
                        <verbatim>&lt;xsl:choose&gt;
    &lt;xsl:when test="$myParameter='this_option'"&gt;
        &lt;!-- do this --&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="$myParameter='that_option'"&gt;
        &lt;!-- do that --&gt;
    &lt;/xsl:when&gt;
        [...]
&lt;/xsl:choose&gt;</verbatim>
                        <p id="62f5f7b0-1fe2-41c7-a495-77e19a1fd871d6e24">Besser ist es, wenn man ein Core-Stylesheet[[xe1:Parameterisierung;xe2:Core-Stylesheet]] pflegt, das für ein Format und eine Produktvariante[[xe1:Format- und Produktvarianten]] gut ausgetestet ist. Dieses Core-Stylesheet wird dann einfach für eine neue Variante importiert und relevante Teile werden für die neue "Spezialisierung"[[xe1:Konzepte;xe2:Generalisierung und Spezialisierung]] überschrieben. Beispielsweise könnte eine Regel zum Setzen des Headers auf jeder Seite so implementiert sein:</p>
                        <verbatim>&lt;xsl:template name="render-header"&gt;
    &lt;!-- print logo on the left side spanning two rows--&gt;
    &lt;!-- print some metadata right side first row --&gt;
    &lt;!-- print a running header right side second row --&gt;
&lt;/xsl:template&gt;</verbatim>
                        <p id="a25fd496-3d0f-40d0-899b-8eeb8efa4a05d6e28">Will man in einem neuen Format, bspw. A5, diese Logik austauschen und nur eine Zeile drucken, z.B. weil man nicht so viel Platz hat, so würde in einem "abgeleiteten" Stylesheet einfach die Regel noch einmal implementiert.[[xe1:Parameterisierung;xe2:Sub-Stylssheet]]</p>
                        <verbatim>&lt;xsl:choose&gt;
&lt;xsl:template name="render-header"&gt;
    &lt;!-- print a running header on left side --&gt;
    &lt;!-- print logo on right side --&gt;
&lt;/xsl:template&gt;</verbatim>
                        <p id="93a58f22-f501-44d1-bcdd-2d15ff8634b1d6e32">Dieses Template hat nun Vorrang und wird zur Auswertung herangezogen, mit der Konsequenz, dass der Header nur einzeilig gedruckt wird. Das schöne an diesen "Named-Templates"[[xe1:Konzepte;xe2:Named Template]] ist auch, dass man sie innerhalb von Variablen verwenden kann:</p>
                        <verbatim>&lt;xsl:variable name="margin-width"&gt;
    &lt;xsl:call-template name="get-margin-width"/&gt;
&lt;/xsl:variable&gt;</verbatim>
                        <p id="dcdc2784-bb46-400d-975b-16cf6746a77cd6e37">Das Template "get-margin-width" kann in einem "Sub"-Stylesheet überschrieben werden ohne dass die Variablen-Zugriffe im Core-Stylesheet angepasst werden müssten. Eine Zuweisung, wie:</p>
                        <verbatim>width="{$margin-width}"</verbatim>
                        <p id="699bae96-6c18-45c8-a517-4d20e0232f1cd6e43">müsste nirgendwo im Code nochmal angefasst werden.</p>
                     </content>
                  </chapter>
               </block>
            </content>
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="1f8595d0-4ed9-4070-8cff-c5c59f690093"
                  ismodule="no">
            <content>
               <title id="dbe0e394-aeee-4b28-ace0-72dcd590c0f2">
                  <title id="cb79aa28-6141-41b3-9bb7-5dc5f10cd81d">XSLT Streaming</title>
               </title>
               <block>
                  <p id="1b8326b9-86af-407d-b972-5b8d98339dec">Bei grossen flach strukturierten Datenmengen gibt es zwei Möglichkeiten:</p>
                  <procedure type="ol">
                     <step>
                        <action>
                           <p id="b68b789a-b3c9-407f-ba6d-fa3f3e248cdcd6e8">Für einfache Sammel- und Auswertungsaufgaben schreibt man sich am besten einen kleinen Parser, z.B. mit der Python[[xe1:Programmiersprachen;xe2:Python]][[link]]sgmllib[[fn:https://docs.python.org/2/library/sgmllib.html*Einfacher SGML Parser der Python Standard Bibliothek]].</p>
                        </action>
                     </step>
                     <step>
                        <action>
                           <p id="57c4f664-96a8-4fcc-9f0b-3e9ee7dfb3ecd6e11">Für komplexere Aufgaben, in denen man nicht an jeder Stelle über den ganzen XML Baum navigiert und sich die Werte zusammensuchen suchen muss, kann man die Streaming Funktion des Saxon XSLT Prozessors verwenden.</p>
                        </action>
                     </step>
                  </procedure>
                  <p id="a470215e-648e-4bb9-87f9-894c63b0dd90d6e13">XSLT Streaming[[xe1:Verarbeitungsmethoden;xe2:XSLT Streaming]] ist in der [[link]]XSLT Version 3.0[[fn:https://www.saxonica.com/html/documentation/sourcedocs/streaming/xslt-streaming.html*XSLT3.0 Streaming API]] neu hinzugekommen und in der
kommerziellen [[link]]Saxon-EE Löusug [[fn:https://www.saxonica.com/html/documentation/sourcedocs/streaming/]] implementiert. Bei dieser Methode wird kein Eingabebaum im Speicher aufgebaut, was zu einer drastischen Performanzsteigerung[[xe1:Performanzsteigerung]] führt.</p>
                  <p id="3646e5ae-e79b-4fe4-87dc-bf3d33d48095d6e15">Es gibt ein paar Regeln, die man bei der Verarbeitung großer Datenmengen über die Streaming Funktionen beachten sollte:</p>
                  <ul>
                     <li>
                        <p id="dddf3268-6ea2-4478-87d5-24c73f2f8927d6e19">Bei einer XPATH Auswertung sollte nur ein einfacher Ausdruck mit höchstens einer konsumierenden Selektion gegeben sein. Konsumieren heißt, dass vom Kontextknoten aus eine Knotenmenge abwärts selektiert wird. Dagegen bleibt die Information bzgl. der Ancestor-Achse erhalten.</p>
                     </li>
                     <li>
                        <p id="3780bf62-e000-46b1-83be-09dd2089bef4d6e22">Bei einer Selektion sollte man aber darauf achten nur atomarische Werte auszuwählen.</p>
                     </li>
                     <li>
                        <p id="7b4a93a4-86cd-479b-aa10-deca7ae3d6b6d6e25">Knotenmengen, die über die Streaming Option eingelesen wurden, können nicht einer Funktion übergeben werden. Sie sind auch nicht einer Variablen zuweisbar.</p>
                     </li>
                     <li>
                        <p id="2e7c6e48-0ea5-4af8-bd05-5bfa0f731253d6e28">"Crawler”-Ausdrücke, wie [[code://section]] sind nicht nicht zu verwenden, ebenso ein rekursiver Abstieg mit Selektion, wie bspw. mit einem [[code:apply-templates]] Call.</p>
                     </li>
                  </ul>
                  <p id="e3db71ee-23f5-45b5-ab11-d1fcca66e816d6e30">Zu Beginn der Streaming-Aktion kann man sich auf konventionelle Art und Weise Teilbäume, die nicht so performanzlastig aufgebaut werden, in einer Variablen abspeichern und im Verlauf der Streaming-Verarbeitung z.B. für einen Vergleich auswerten.</p>
               </block>
            </content>
            <chapter hyphenation="yes" chapterpage="no" id="51bec5b9-1207-45cc-9bf2-b6ce3e300547"
                     ismodule="no">
               <content>
                  <title id="51877293-95b9-4486-b8f6-c006615a8109">
                     <title id="40515442-a67d-49f4-9945-0f9d227bd97e">XSLT Akkumulator</title>
                  </title>
                  <block>
                     <p id="6c3d953a-91cc-4be7-bf9d-65d3c6d6c75fd6e21">Ein einfaches Streaming Stylesheet könnte z.B. so aussehen:</p>
                     <verbatim>&lt;xsl:stylesheet version="3.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  exclude-result-prefixes="#all"&gt;
  
  &lt;xsl:output method="xml" indent="yes"/&gt;
  
  &lt;xsl:mode on-no-match="shallow-copy" use-accumulators="entry-count" streamable="true"/&gt;
  
  &lt;xsl:accumulator name="entry-count" as="xs:integer" initial-value="0" 
                   streamable="yes"&gt;
    &lt;xsl:accumulator-rule match="entry" select="$value + 1"/&gt;
  &lt;/xsl:accumulator&gt;
  
  &lt;xsl:template match="/"&gt;
    &lt;result&gt;
      &lt;xsl:apply-templates/&gt;
      &lt;count&gt;
        &lt;xsl:value-of select="accumulator-after('entry-count')"/&gt; 
      &lt;/count&gt;
    &lt;/result&gt;
  &lt;/xsl:template&gt;
  
&lt;/xsl:stylesheet&gt;</verbatim>
                     <p id="4ba7c650-d5a0-489c-9392-3ab548afa421d6e25">Diese Stylesheet hat einige Besonderheiten:</p>
                     <p id="06f1d8c6-03dd-4fa3-847b-4554e944f361d6e27">Zum einen wird darin ein Default-Modus deklariert, der jeden Knoten der Eingabeinstanz über
eine implizite [[link]]Identity-Transformation (shallow-copy)[[fn:https://www.saxonica.com/html/documentation/xsl-elements/mode.html*Mode Optionen in XSLT3.0]][[xe1:Verarbeitungsmethoden;xe2:Shallow Copy]]in die Ausgabeinstanz kopiert.</p>
                     <p id="cda2834b-a464-49e5-9b3b-e8880252433cd6e29">Auf herkömmlichem Weg würde man dafür ein Templates wie dieses verwenden:</p>
                     <verbatim>&lt;xsl:template match="node()|@*"
  &lt;xsl:copy&gt;
    &lt;xsl:apply-templates select="node()|@*"/&gt;
  &lt;/xsl:copy&gt;
&lt;/xsl:template&gt;</verbatim>
                     <p id="6deb7053-43b9-437d-8ce4-ec81a69a7795d6e34">Zum anderen wird ein Akkumulator[[xe1:Verarbeitungsmethoden;xe2:Akkumulator]] verwendet. Normalerweise gibt es in XSLT keine Variablen,
sondern nur Konstanten, so wie das auch bei funktionalen Programmiersprachen der Fall ist.</p>
                     <p id="bce045c6-46f1-4745-8326-56beff21e266d6e36">Es gab zwar schon länger eine Saxon-Erweiterung, die die mehrmalige Zuweisung eines Wertes
an eine Variable erlaubte, im Normallfall braucht man diese Eigenschaft aber nicht.</p>
                     <p id="586338d8-49fa-4ddc-b715-99f9688ecd25d6e38">Ber der Verarbeitung sehr großer Datemengen, ist es aber unumgänglich, denn sonst
würde der Laufzeitstapel schnell an seine Grenzen gelangen.</p>
                     <p id="4a5b2945-71be-4b5c-be7f-2e33cd717a4cd6e40">Ein Akkumulator akkumuliert Werte, wie der Name schon sagt. Das können atomare Typen sein,
wie im obigen Beispiel, aber auch Datenstrukturen können aufgebaut werden, wie 
bspw. das Abspeichern des gerade prozessierten Teilbaums in einem Dictionary zur 
späteren Auswertung bzw. Gruppierung der Key-Elemente.</p>
                     <p id="825af8ca-d2ab-4357-ba6b-bbf4863f201fd6e42">Auch im Akkumulator muss das [[code:streamable="yes"]] Property gesetzt sein, wenn er im 
Streaming-Modus arbeiten soll. In diesem Modus kann der Akkumulatorwert erst ausgelesen werden,
wenn der untersuchte Baum vollständig durchlaufen wurde.</p>
                     <p id="8d27d621-4d12-4d40-a59e-8d58c45439a5d6e44">Um die Unterschiede zum "normalen" XSLT Betrieb festzustellen, können im obigen Beispiel 
einige offensichtlich korrekte Änderungen vorgenommen werden, die der Streaming 
Prozessor allerdings nicht akzeptiert.</p>
                     <verbatim>Cannot call accumulator-after except during the post-descent 
phase of a streaming template</verbatim>
                     <p id="c9a77197-237e-49fd-80d3-18a443700c33d6e59">Diese Fehlermeldung erscheint, wenn man den [[code:apply-templates]] Call entfernt. Der Akkumulator
wird also nur befüllt, wenn der Baum auch explizit durchlaufen wurde. Dieser Durchlauf 
kann auch ein reines Kopieren sein, bspw. kann man den [[code:apply-templates]] Call auch durch ein</p>
                     <verbatim>&lt;xsl:copy-of select="."/&gt;</verbatim>
                     <p id="bd5669e8-e0e9-41d0-8854-f9c76aa6d3a3d6e63">ersetzen, was gleichbedeutend mit der Mode Einstellung</p>
                     <verbatim>on-no-match="deep-copy"</verbatim>
                     <p id="073cb9ea-9bed-41e8-ba73-b3cef15a5708d6e68">wäre. Wie man sieht hat sich in XSLT 3.0 viel bzgl. der Handhabung verschiedener
Verarbeitungsmodi getan. Anstatt Default-Match Regeln zu schreiben, kann man ganz oben
am Stylesheet Modus Properties setzen, die den Baumdurchlauf auf verschiedene
Arten realisieren.</p>
                     <p id="29146b97-98e0-448f-8414-d8a9ee82e847d6e70">Die Verarbeitung großer Datenmenden ist aber mit Streaming etwas tricky und es sollte geprüft 
werden, ob ggf. konventionelles Performanz-optimiertes XSLT für den Answendungsfall ausreichen
würde.</p>
                  </block>
               </content>
            </chapter>
            <chapter hyphenation="yes" chapterpage="no" id="b308e60a-c7f3-4143-8e04-6c0d3bd4df01"
                     ismodule="no">
               <content>
                  <title id="e7a9c8c6-7155-402a-9c95-89d45fc022de">
                     <title id="8a54eb22-afbb-4741-b3e5-8088e75c9ebd">XSLT Iterator</title>
                  </title>
                  <block>
                     <p id="9b154448-31c9-495f-bc85-ecb297deece8">XSLT Streaming[[xe1:Verarbeitungsmethoden; xe2:XSLT Streaming]] ist ziemlich tricky. Betrachten wir ein einfaches Problem. Es soll ein kommaseparierter Report aus folgender XML Quelle generiert werden.</p>
                     <verbatim>&lt;status-report&gt;
  &lt;status-change&gt;
    &lt;billing_id&gt;360788&lt;/dentaltrac_encounter_id&gt;
    &lt;claim_ids&gt;967382,673647&lt;/claim_ids&gt;
    &lt;status&gt;open&lt;/status&gt;
    &lt;time_stamp&gt;2019-02-22T13:53:34.605Z&lt;/status_time&gt;
  &lt;/status-change&gt;
  &lt;status-change&gt;
    &lt;billing_id&gt;360788&lt;/dentaltrac_encounter_id&gt;
    &lt;claim_ids&gt;967382,673647&lt;/claim_ids&gt;
    &lt;status&gt;open&lt;/status&gt;
    &lt;time_stamp&gt;2019-02-22T13:53:34.605Z&lt;/status_time&gt;
  &lt;/status-change&gt;
  [...]</verbatim>
                     <p id="22848135-aec4-4770-9e80-b03304ac973cd6e10">Mit einer [[code:for-each]] Loop und einem Named-Template würde das so gehen:</p>
                     <verbatim>
&lt;xsl:template name="main"&gt;
  &lt;xsl:for-each select="$input-file/status-report/status-change"&gt;
    &lt;xsl:value-of select="concat(billing_id,',')"/&gt;
    &lt;xsl:value-of select="concat(claim_ids,',')"/&gt;
    &lt;xsl:value-of select="concat(status,',')"/&gt;
    &lt;xsl:value-of select="concat(format-dateTime(xs:dateTime(time_stamp),
                                        '[Y]-[M]-[D] [H]:[m]'),'&amp;#10;')"/&gt;
  &lt;/xsl:for-each&gt;
&lt;/xsl:template&gt;</verbatim>
                     <note>
                        <consequence>
                           <p id="73c07d96-20b6-4482-96ce-258d1673e1a7d6e15">Named-Templates, die direkt über den Saxon Aufruf [[code:saxon -it:main]] aufgerufen werden, sind dann
brauchbar, wenn keine eindeutige Eingabequelle vorhanden ist, bspw. weil aus mehreren
Quellen eingelesen werden soll, wenn die Eingabe von einem Webservice kommt oder 
vom XSLT Skript selbst erzeugt wird.</p>
                        </consequence>
                     </note>
                     <p id="d769fa8b-5761-43cf-88ab-842d569d1e7dd6e17">Im vorliegenden Fall wird von einer Datei eingelesen - wir brauchen also kein Named-Template. Statt der [[code_for-each]] Schleife können wir uns auch auf den rekursiven Abstieg des XSLT Prozessors
verlassen, was den Code weiter vereinfacht:</p>
                     <verbatim>
&lt;xsl:template match="/status-report/status-change"&gt;
  &lt;xsl:value-of select="concat(billing_id,',')"/&gt;
  &lt;xsl:value-of select="concat(claim_ids,',')"/&gt;
  &lt;xsl:value-of select="concat(status,',')"/&gt;
  &lt;xsl:value-of select="concat(format-dateTime(xs:dateTime(time_stamp),
                                      '[Y]-[M]-[D] [H]:[m]'),'&amp;#10;')"/&gt;
&lt;/xsl:template&gt;</verbatim>
                     <p id="1babc673-5450-4c9f-94d7-02027e879a51d6e21">Wollen wir große Datenmengen schnell verarbeiten mit ein paar Hundert MB, so ist es sinnvoll
auf die neue XSLT3.0 Streaming Option umzuschalten, weil dadurch kein Eingabebaunm in-Memory
aufgebaut wird. Wie schon im Kapitel <doclink class="51bec5b9-1207-45cc-9bf2-b6ce3e300547"
                                 id="3488cd63-8d28-404a-8c32-6694daa8c6bb"
                                 type="topic">XSLT Akkumulator</doclink> angesprochen, gibt es dazu mehrere Möglichkeiten.</p>
                     <p id="24530e61-5662-4972-844c-140ea8d8dc0dd6e23">Wir betrachten hier das [[code:xsl:iterator]][[link]](Doku)[[fn:https://www.saxonica.com/html/documentation/xsl-elements/iterate.html*Der Iterator ist ein Konzept um XSLT Streaming zu realisieren]]
 Konstrukt und stossen dabei auf einige Fallstricke. Zunächst einmal unsere Settings:</p>
                     <ul>
                        <li>
                           <p id="d51bf51d-3d8e-4665-9991-84f7d01f7aefd6e27">Wir benutzen [[code:xsl:source-document]] in Verbindung mit dem [[code:streamable='yes']] Attribut,
um dem Prozessor mitzuteilen, dass er im Streaming Modus arbeiten soll.</p>
                        </li>
                        <li>
                           <p id="edab82eb-21c5-45c3-b543-4c0ac06ad281d6e30">Wenn wir die Quelle über einen Parameter einlesen, dann müssen wir auch die Transformation über ein Named-Template
starten.</p>
                        </li>
                     </ul>
                     <p id="0d5b49f3-2dfb-475c-b317-d76e9aac06a0d6e33">Ohne zu wissen, wie XSLT Streaming genau funktioniert, setzen wir eine Reihe von [[code:value-of select]] statements in den Iterator:</p>
                     <verbatim>
&lt;xsl:template name="main"&gt;
  &lt;xsl:source-document href="{$input-file}" streamable='yes'&gt;
    &lt;xsl:iterate select="status-report/status-change"&gt;
      &lt;xsl:value-of select="concat(billing_id,',')"/&gt;
      &lt;xsl:value-of select="concat(claim_ids,',')"/&gt;
      &lt;xsl:value-of select="concat(status,',')"/&gt;
      &lt;xsl:value-of select="concat(format-dateTime(xs:dateTime(time_stamp),
                                          '[Y]-[M]-[D] [H]:[m]'),'&amp;#10;')"/&gt;
    &lt;/xsl:iterate&gt;
  &lt;/xsl:source-document&gt; 
&lt;/xsl:template&gt;</verbatim>
                     <p id="63c6b0e7-5dbc-499b-87d1-a8f566085023d6e37">und werden dafür prompt mit einer Fehlermeldung belohnt:</p>
                     <verbatim>Static error on line 16 column 64 of report.xsl:
  XTSE3430: The body of the xsl:stream instruction is not streamable
  *  There is more than one consuming operand: {xsl:value-of} on line 18, and
  {xsl:value-of} on line 19</verbatim>
                     <p id="ed797bc5-78cf-4d81-8f07-25d049bb3e78d6e41">In diesem Iterator ist also nur eine "konsumierende" [[code:value-of]] Operation erlaubt. Um nur einmal zu selektieren, müssen wir - auf Kosten der Lesbarkeit - ziemlich umbauen. Eine Lösung könnte z.B. so aussehen:</p>
                     <verbatim>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  exclude-result-prefixes="xs"
  xpath-default-namespace="https://tekturcms.de/schema/status-report/1.0"
  version="3.0"&gt;
   
  &lt;xsl:param name="input-file" required="yes"/&gt;
  
  &lt;xsl:output method="text"/&gt;
 
  &lt;!-- https://www.saxonica.com/html/documentation/xsl-elements/iterate.html --&gt;

  &lt;xsl:template name="main"&gt;
    &lt;xsl:source-document href="{$input-file}" streamable='yes'&gt;
      &lt;xsl:iterate select="status-report/status-change/*"&gt;
        &lt;xsl:choose&gt;
          &lt;xsl:when test="name()='time_stamp'"&gt;
            &lt;xsl:value-of select="concat(format-dateTime(xs:dateTime(time_stamp),
                                               '[Y]-[M]-[D] [H]:[m]'),'&amp;#10;')"/&gt;
          &lt;/xsl:when&gt;
          &lt;xsl:otherwise&gt;
            &lt;xsl:value-of select="concat(.,',')"/&gt;
          &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
      &lt;/xsl:iterate&gt;
    &lt;/xsl:source-document&gt;
  &lt;/xsl:template&gt;  
&lt;/xsl:stylesheet&gt;
</verbatim>
                     <p id="469ff8e1-b60e-47fa-906b-f0ba5ffcbe0ed6e48">Hier wird davon ausgegangen, dass das Element mit Namen 'time_stamp' als letztes in der Sequenz vorkommt und beim Auftreten ([[code:&amp;#10;]]) wird ein Zeilenumbruch gesetzt. Der deklarative Ansatz aus dem ersten Beispiel geht dabei verloren. </p>
                     <note>
                        <consequence>
                           <p id="b7628b73-64d2-4adb-9e79-b0c0e27ea202d6e51">Logisch wird beim XSLT Streaming auf einer niedrigeren Abstraktionsebene programmiert, um den Anforderungen des Prozessors gerecht zu werden.</p>
                        </consequence>
                     </note>
                     <p id="25b7064f-3652-4cf9-96d9-de474327f073d6e53">Für eine <b>1.6 GB Datei</b> benötigt das obige Skript auf meinem Rechner gute<b> drei Minuten</b>. Der traditionelle temlate-match Ansatz bricht mit einer Out-of-Memory Exception ab, selbst wenn man den Java Heap Size auf 4GB einstellt.</p>
                  </block>
               </content>
            </chapter>
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="e3ccdc75-56e4-45b3-a2be-07a61a2dcd51"
                  ismodule="no">
            <content>
               <title id="79f1f2e3-3456-4d89-aa21-ad40597ab9bf">
                  <title id="6e53fba3-c83c-4a92-8cea-170e5781324c">Identifikation mit [[code:generate-id()]]</title>
               </title>
               <block>
                  <p id="3cd96c4e-4783-468f-a32c-5a009e3cd115">Die [[code:generate-id()]] Funktion gibt es in XSLT schon immer. Mit ihr kann eine Prüfsumme eines Knotens im Baum generiert werden.</p>
                  <p id="ec777147-e5f9-4922-90d7-da6edb3ba4e4d6e6">Das funktioniert natürlich nur, wenn man bei der Auswertung dieses Wertes nicht den Kontext wechselt. D.h. z.B. dass ein Knoten in einem Baum,
der in einer Variablen gespeichert ist, eine andere Prüfsumme bekommt, als derselbe Knoten im Kontext-Baum.</p>
                  <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                           id="15182a91-9dc5-4632-9c80-05f50c8fc942d6e8">
                     <content>
                        <title id="15182a91-9dc5-4632-9c80-05f50c8fc942d6e8">
                           <title id="fc5861f4-cba9-4568-8ebe-a70d04f46a66d6e9">Beispiel Stückliste</title>
                        </title>
                        <p id="f1a60882-448a-4f9f-a10b-0b54ef3aa35dd6e10">Ein Anwendungszenario wäre bspw. die Generierung einer Target-ID für ein Bauteil in einer Stückliste. Das Bauteil ist nur einmal im 
System erfasst, hat also eine eindeutige ID, soll aber an mehreren Stellen in die Ausgabe (Eine Dokumentation für eine Maschine)
generiert werden.</p>
                        <p id="8168234a-94fe-432e-900c-567faf2a8552d6e12">Die Id an einem Element [[code:&lt;part id=“1234”&gt;]] würde somit mehrfach in die XML Eingabe für einen XSL-FO Prozessor erscheinen und ist 
für Referenzen unbrauchbar geworden.  Deshalb ist es ratsam beim Rendern der Bauteile eine neue Id zu vergeben, das kann z.B. 
mit den folgenden Templates (vereinfacht) passieren:</p>
                        <verbatim>&lt;xsl:key name="parts" match="part" use="@id"/&gt;
  
&lt;xsl:template match=“part” mode=“content"&gt;
  &lt;!-- Ausgabe des Bauteils im Content Bereich --&gt;
  &lt;fo:block id="{generate-id()}"&gt;
    &lt;fo:external-graphic xsl:use-attribute-sets="part.img"/&gt;  
  &lt;/fo:block&gt;
&lt;/xsl:template&gt;
    
&lt;xsl:template match=“part” mode=“part-list"&gt;
  &lt;!-- Ausgabe einer Liste mit allen Verweisen an unterschiedicher Stelle --&gt;
  &lt;fo:block&gt;
    &lt;xsl:for-each select="key('parts',@id)"&gt;
      &lt;fo:page-number-citation ref-id="{generate-id()}"/&gt;
    &lt;/xsl:for-each&gt;
  &lt;/fo:block&gt;
&lt;/xsl:template&gt;</verbatim>
                     </content>
                  </chapter>
                  <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                           id="f95ff6a2-1583-451f-b21a-8f4761eb4e46d6e17">
                     <content>
                        <title id="f95ff6a2-1583-451f-b21a-8f4761eb4e46d6e17">
                           <title id="90386d0e-7162-471c-8c09-8bb00da36da5d6e17">Beispiel Mantel Dokument</title>
                        </title>
                        <p id="b77784f8-4fa6-4519-b20d-347ba62d7e8bd6e18">Im Bereich EDI Datenaustausch werden große XML Dateien versendet, die man auf einzelne Transmissions 
aufsplitten will, um sie in einer XML Datenbank abspeichern zu können. Die Struktur einer Datenübertragung
könnte folgendermassen aussehen:</p>
                        <verbatim>WRAPPER1
  SEQUENZ1
  SEQUENZ2
  SEQUENZ3
  WRAPPER2
    SEQUENZ1
    SEQUENZ2
    SEQUENZ3
    SEQUENZ4
    WRAPPER3
      SEQUENZ1
      SEQUENZ2
      CONTENT
        DATA1
        DATA2
        DATA3
        DATA4
        DATA5
      CONTENT
        DATA1
        DATA2
        DATA3
        DATA4
        DATA5
      WRAPPER4
        SEQUENZ1
      CONTENT
        DATA1
        DATA2
        DATA3
        DATA4
        DATA5
      [...]</verbatim>
                        <p id="30f17d4c-717b-4778-ad02-1d6a5f41c443d6e22">Jedes einzelne [[code:CONTENT]] Element soll nun einen Mantel erhalten und separat in einer Datei abgelegt werden.
Der "Umschlag" soll dabei alle Elemente des Rahmens der Transmission erhalten. Also alles auf der
Descendant-Achse bis zum Element [[code:WRAPPER3]], ausserdem noch die Elemente [[code:SEQUENZ1]] und [[code:SEQUENZ2]],
sowie das Element [[code:WRAPPER4]] mit Kind [[code:SEQUENZ1]] .Ohne groß auf die Performanz zu achten, könnte das recht einfach so realisiert werden:</p>
                        <verbatim>&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0"&gt;
    
  &lt;xsl:output method="xml" indent="yes"/&gt;
  &lt;xsl:strip-space elements="*"/&gt;
  
  &lt;xsl:template match="/"&gt;
    &lt;xsl:apply-templates select="/WRAPPER1/WRAPPER2/WRAPPER3/CONTENT" mode="umschlag"/&gt;
  &lt;/xsl:template&gt;
    
  &lt;xsl:template match="CONTENT" mode="umschlag"&gt;
    &lt;xsl:result-document href="{concat(@id,'.xml')}"&gt;
      &lt;umschlag&gt;
        &lt;metadaten&gt;&lt;!-- einige Metadaten --&gt;&lt;/env:metadata&gt;
        &lt;nutzdaten&gt;
            &lt;xsl:apply-templates select="ancestor::WRAPPER1"&gt;
              &lt;xsl:with-param name="this-id" select="generate-id()" tunnel="yes"/&gt;
            &lt;/xsl:apply-templates&gt;
        &lt;/nutzdaten&gt;
      &lt;/umschlag&gt;
    &lt;/xsl:result-document&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="node()|@*"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates select="node()|@*"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;
    
  &lt;xsl:template match="CONTENT"&gt;
    &lt;xsl:param name="this-element" tunnel="yes"/&gt;
    &lt;xsl:if test="$this-id = generate-id()"&gt;
      &lt;xsl:copy&gt;
        &lt;xsl:apply-templates select="node()|@*"/&gt;
      &lt;/xsl:copy&gt;
    &lt;/xsl:if&gt;
  &lt;/xsl:template&gt;
    
&lt;/xsl:stylesheet&gt;</verbatim>
                        <p id="a7ab8655-d9eb-4343-bebf-c4d8850cb2c6d6e26">Im rekursiven Abstieg wird im Modus "umschlag" jedes [[code:CONTENT]] Element selektiert und
in einen Umschlag verpackt. Der eigentlich Inhalt des Umschlags wird generiert,
indem der gesamte XML Baum über die Standard-Kopierregel in das Element [[code:&lt;nutzdaten&gt;]] gesetzt wird. Dabei wird aber nur derjenige [[code:CONTENT]] Abschnitt evaluiert, der
zu der als Parameter übergebenen generierten Id passt.</p>
                     </content>
                  </chapter>
               </block>
            </content>
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="12f4b667-2093-456b-8986-d269a6375d60"
                  ismodule="no">
            <content>
               <title id="1baa0c4a-6cde-4033-9e48-ee47dc16c287">
                  <title id="a3acd735-e2ec-4c5f-940d-72d647e5bd74">Reguläre Ausdrücke</title>
               </title>
               <block>
                  <p id="8b2f5bb2-8497-4ea8-b65b-cf8b9c972fc3d6e4">Manchmal reicht für das Durchsuchen des XML Baums XPATH nicht mehr aus und man will auf den Textknoten reguläre Ausdrücke aufrufen. Mir sind derzeit drei XPATH Funktionen bekannt, in denen man XPATH angeben kann:</p>
                  <ul>
                     <li>
                        <p id="6596ac58-1f12-4b1d-8a45-f9b99d8221c8d6e8">[[code:fn:matches(subject, pattern, flags)]]</p>
                     </li>
                     <li>
                        <p id="e2221857-efab-45d2-afff-2d6b1d29c840d6e11">[[code:fn:replace(subject, pattern, replacement, flags)]]</p>
                     </li>
                     <li>
                        <p id="fe46275a-fd1b-4527-aa25-fde0098a6893d6e14">[[code:fn:tokenize(subject, pattern, flags)]]</p>
                     </li>
                  </ul>
                  <p id="867b5230-3fe3-4dd4-8794-938ba7427581d6e16">Bei der EIngabe des regulaären Ausdrucks muss man natürlich Zeichen, wie [[code:&gt;,&lt;,&amp;]] maskieren, was den Ausdruck im Gegensatz zur herkömmlichen Nicht-XML Programmierung noch ein bisschen komplizierter macht.</p>
                  <p id="89d58d94-7076-4bee-9603-f5f241963967d6e18">Der Audruck, der bspw. auf alle XML Tags matched ist folgender: [[code:&amp;lt;[^&amp;gt;^!]+&amp;gt;]]. Hier sind die für XML reservierten Zeichen bereits maskiert.</p>
                  <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                           id="4f0ab2b5-80b9-4cba-9bfb-5c3f37d9887ad6e20">
                     <content>
                        <title id="4f0ab2b5-80b9-4cba-9bfb-5c3f37d9887ad6e20">
                           <title id="055ae7ca-d2b1-41e4-be84-675e3e8827bdd6e21">XSLT Analyze String</title>
                        </title>
                        <p id="cea9c4dd-6e14-445a-a899-07215642bb26d6e23">Es gibt aber auch ein eigenes XSLT Konstrukt, unabhängig von XPATH, um reguläre Ausdrücke anwenden zu können. Der Quelltext dazu sieht so aus:</p>
                        <verbatim>&lt;xsl:template match="text()[parent::xml-code]"&gt;
  &lt;xsl:analyze-string select="." regex="&amp;lt;[^&amp;gt;^!]+&amp;gt;"&gt;
    &lt;xsl:matching-substring&gt;
      &lt;b&gt;&lt;xsl:value-of select="."/&gt;&lt;/b&gt;     
    &lt;/xsl:matching-substring&gt;
    &lt;xsl:non-matching-substring&gt;
      &lt;xsl:value-of select="."/&gt;
    &lt;/xsl:non-matching-substring&gt;
&lt;/xsl:template&gt;</verbatim>
                        <p id="a5477733-e663-4047-8c66-c9fe0f1d54a6d6e27">Hier wird jeder Textknoten eines Elements untersucht und falls ein XML-Tag enthalten ist, so wird dieses über die [[code:xsl:matching-substring]] Anweisung in ein [[code:&lt;b&gt;]] Tag gewrapped. Im nächsten Transformationsschritt wird dieses wiederum in Fettschrift dargestellt.</p>
                        <p id="39dcf242-4503-4812-8866-2f6bfe223737d6e29">Das ist ein einfacher Syntax-Highlighter für XML Quelltexte. Auf diese Weise ist der Syntax-Highlighter für dieses PDF realisiert.</p>
                        <note>
                           <consequence>
                              <p id="2efd01df-e5c6-4202-aaad-cae6fab6f28fd6e32">Man kann auch die [[code:xsl:analyze-string]] Elemente in den [[code:xsl:matching-substring]] und [[code:xsl:non-matching-substring]] Elementen verschachteln, was natürlich noch wesentlich kompliziertere Problemstellungen erlaubt.</p>
                           </consequence>
                        </note>
                     </content>
                  </chapter>
               </block>
            </content>
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="11ebc17e-560c-4961-8dd6-9aa6776dc160"
                  ismodule="no">
            <content>
               <title id="7f03cc5e-675a-4371-b3e9-5d79b981ff95">
                  <title id="fbbe8267-ed7b-4b78-b547-d00fe41f0b5c">Webservice Calls mit [[code:doc()]] und [[code:unparsed-text()]]</title>
               </title>
               <block>
                  <p id="cfd5bdf8-a043-405f-a3f7-1feb395fbd3d">Eine verbreitete Paxis ist es, mit der Funktion [[code:document()]] oder kurz [[code:doc()]] 
entfernte Ressourcen in die Transformation einzubinden. 
Bei einer Schematron-Validierung, würde bspw. eine Regel, wie:</p>
                  <verbatim>&lt;sch:not-assert id="personal-check"
    role="error"
    test="doc(concat('https://tekturcms.de/personal.xqy?personal-id=',personal-id))/kuendigung"&gt;
        Angestellter mit ID "&lt;sch:value-of select="personal-id"/&gt;" hat gekündigt!
&lt;/sch:not-assert&gt;</verbatim>
                  <p id="9fc3fa46-8e19-4c2b-90cf-0f2a76ef18eed6e8">einen entferneten Webservice aufrufen und prüfen, ob für den Angestellten mit [[code:personal-id]]
eine Kündigung vorliegt. Ist dies der Fall, so ist die negative Zusicherung [[code:not-assert]] nicht
erfüllt und die Schematron Regel feuert - was sich wohl im einfachsten Fall in einem 
Logfile Eintrag äussern sollte.</p>
                  <p id="e3b1a6ca-7163-4c64-a69d-a1f4277847d5d6e10">Was vermutlich viele noch nicht kennen - ich nehme jetzt einfach mal an, dass mein 
bisheriger Kenntnisstand dem der Mehrheit der XML-Entwickler entspricht - ist der Umstand,
dass auch die Funktion [[code:unparsed-text()]] eine URL als Parameter nimmt:</p>
                  <verbatim>&lt;xsl:template match="angestellter"
    &lt;xsl:copy&gt;
        &lt;xsl:apply-templates select="node()|@*"/&gt;
        &lt;hat-gekuendigt&gt;
            &lt;xsl:sequence select="json-to-xml(
                                  unparsed-text(
                                  concat('https://tekturcms.de/personal.xqy?personal-id=',
                                  personal-id))))/descendant::*[@key='gekuendigt']/text()"/&gt;
        &lt;/hat-gekuendigt&gt;
    &lt;/xsl:copy&gt;
&lt;/xsl:template&gt;</verbatim>
                  <p id="9992ff44-8622-4832-a290-5b53de8787fbd6e14">Während mit [[code:doc()]] oder [[code:document()]] ein zurückgeliefertes XML Fragment 
prozessiert wird, erwartet [[code:unparsed-text()]] z.B. einen JSON-String, der dann mittels
der Funktion [[code:json-to-xml()]] nach XML konvertiert werden kann.</p>
                  <p id="3b7e4ebd-cc5a-448c-8ae5-85e90302d51dd6e16">Beispielsweise könnte die Gegenseite zum [[code:angestellter]] Template mittels XQuery
folgendermassen realisiert sein:</p>
                  <verbatim>xquery version "1.0-ml";

declare variable $personal-id := xdmp:get-request-field('personal-id');

let $gekuendigt := if (collection('/personal')/*[personal-id = $personal-id and 
                                                 fn:exists(kuendingung)] then 
                                                 'ja' else 'nein'
return 
    common:render-response(concat('{"gekuendigt":"',$gekuendigt,'",
                                    "personal-id":"',$personal-id,'"}'))</verbatim>
                  <p id="83a12eb2-9d2c-4bea-9d00-463280925e65d6e20">(<doclink class="98665bd9-d40d-4fc7-ab7a-e340be6190a6"
                              id="86e61dc1-c690-4420-b3ce-83c39c6bf091"
                              type="none">Mehr zu XQuery und den hier verwendeten Konstrukten</doclink>, wie [[code:render-response()]]))</p>
                  <p id="dc9f1757-17d5-4982-9f9b-b624dcc9f86cd6e22">Das zurückgeklieferte JSON Dokument sieht dann so aus:</p>
                  <verbatim>{"gekuendig":"ja","personal-id":"q5687500"}</verbatim>
                  <p id="c16d857e-bf25-4013-a637-fb1f1f42b212d6e27">Konvertiert nach XML erhält man eine Map Struktur:</p>
                  <verbatim>&lt;map xmlns="http://www.w3.org/2005/xpath-functions"&gt;
    &lt;string key="gekuedigt"&gt;ja&lt;/string&gt;
    &lt;string key="personal-id"&gt;q5687500&lt;/string&gt;
&lt;/map&gt;</verbatim>
                  <p id="5aa1c1a3-6eaa-470b-bbb0-9cecf34158c3d6e31">was den Selektorausdruck im obigen XPATH erklärt:</p>
                  <verbatim>json-to-xml(
unparsed-text(
concat('https://tekturcms.de/personal.xqy?personal-id=',
personal-id))))/descendant::*[@key='gekuendigt']/text()</verbatim>
                  <p id="423a28a9-42c2-4e62-b73c-c2a48f68c079d6e35">Resultat der Konvertierung wäre also dann - wie erwartet - ein um 
das [[code:gekuendigt]] Flag erweitertes [[code:&lt;angestellter&gt;]]
Element:</p>
                  <verbatim>&lt;angestellter&gt;
    &lt;perosnal-id&gt;q5687500&lt;/perosnal-id&gt;
    &lt;name&gt;Alex&lt;/name&gt;
    [...]
    &lt;gekuendigt&gt;nein&lt;/gekuendigt&gt;
&lt;/angestellter&gt;</verbatim>
                  <p id="d6ebc0e3-4946-40df-99b9-89d396165f96d6e39">Sicherlich wird der XML Entwicler eine <doclink class="3337f433-44bf-430d-a809-73fd1de5ba6c"
                              id="997e18de-4390-4b97-9f13-5198617f39e4"
                              type="none">XML Datenbank</doclink>, wie MarkLogic, vorziehen
und sich gleich XML Fragmente ausliefern laasen. [[$productname]] ist aber bspw. mit
[[link]]MongoDB[[fn:https://www.mongodb.com/*Homepage der NoSQL Datenbank MongoDB]]
realisiert, die auf JSON arbeitet... Nicht zuletzt deshalb finde ich JSON Verarbeitung
mit XSLT recht spannend.</p>
               </block>
            </content>
         </chapter>
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="0846d6a2-6999-42ab-9e83-55bc197fc11c"
               ismodule="no">
         <content>
            <title id="ae325776-f861-42c4-9a68-95d2d1c756a5">
               <title id="0e661463-0259-4d9f-a784-93f4f169bc52">Abfragen mit XQuery </title>
            </title>
            <block>
               <p id="c2687f09-7480-4b8a-aa85-97d3e6821592">Xquery[[xe1:Programmiersprachen;xe2:XQuery]] führt im Publishing-Bereich ein Schattendasein. In meiner Zeit als XSL Programmierer für zwei Publishing  Firmen hatte ich damit nie zu tun. Erst als ich näher an den eigentlichen Daten war und mit XML Datenbanken zu tun hatte, kam ich mit XQuery in Berührung.</p>
               <p id="68844713-b2c6-475e-8649-74c9094a4533d6e6">Während relationale Datenbanken mit SQL abgefragt werden, verwendet man bei XML Datenbanken, wie [[link]]eXist[[fn:http://exist-db.org/exist/apps/homepage/index.html*Hompage der eXist XML Datenbank]] oder [[link]]Marklogic[[fn:https://de.marklogic.com/*Hompage der NoSQL/XML Datenbank MarkLogic]], XQuery als Abfragesprache.</p>
               <p id="beb7e5e2-4c9d-4fc8-b536-7f06da326062d6e8">Aber auch einzelne XML Dokumente können z.B. in Oxygen XML Editor[[xe1:Tools;xe2:oXygen XML Editor]] mit dem [[link]]XQuery Builder Tool[[fn:https://www.oxygenxml.com/xml_editor/xquery_builder.html*Tool zur einfachen Eingabe von XQuery Test-Skripten im oXygen XML Editor]] oder auch per Saxon Kommandozeile abgefragt werden:</p>
               <verbatim>java -cp usr/lib/saxon/saxon.jar net.sf.saxon.Query 
     -s:"schulen.xml" 
     -qs:"/schulen/schule[id='6']" 
     -o:"/Users/Alex/Desktop/schule_6.xml"</verbatim>
               <p id="82bd2bc8-d52c-4012-85f5-f167da7f8dc4d6e12">Mit der Option <b>-qs </b>kann hier der Querystring angebenen werden. </p>
               <p id="a1ae2cee-3b1d-4919-8531-d42c03a501f2d6e17">Wie man an dem einfachen Beispiel schon sieht, ist XQuery mit XPATH verwandt. XQuery umfasst den Sprachumfang von XPATH bietet aber zusätzlich die [[link]]FLOWR[[https://en.wikipedia.org/wiki/FLWOR*FLOWR steht für FOR LET WHERE ORDERBY RETURN]] Syntax um mächtigere Abfragen stellen zu können. Mittels weiterer [[link]]Extensions[[fn:http://cs.au.dk/~amoeller/XML/querying/flwrexp.html*XQuery Extensions für mächtigere Funktionen]] können aber auch ganze Programme erstellt werden, die weit über die Funktionalität einer "Abfragesprache" hinausgehen.</p>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="60f1ab16-16a4-4e41-a4c0-0729b99f5850d6e19">
                  <content>
                     <title id="60f1ab16-16a4-4e41-a4c0-0729b99f5850d6e19">
                        <title id="c7e8acb5-6c21-4de1-a88d-8bbd376bbbb4d6e20">XQuery Builder</title>
                     </title>
                     <p id="10cad5f2-85f8-44a2-820b-25080e044176d6e22">Oxygen XML Editor bietet eine schöne Möglichkeit XQuery-Abfragen 
auf einem geladenen XML Dokument auszuführen. Dazu kann man 
seine Query in das betreffende Eingabefenster schreiben.</p>
                     <figure pdfwidth="page">
                        <subtitle id="54c7d5f4-ce3d-4c6e-a05f-bbe2f7374998d6e25">oXygen XQuery Builder</subtitle>
                        <desc id="ea069e8a-c165-414e-a888-67e68b8876fbd6e27">Mit dem XQuery Builder von oXygen lassen sich unkompliziert Queries testen</desc>
                        <img src="./client/data/0846d6a2-6999-42ab-9e83-55bc197fc11c/xquery-builder.png"/>
                     </figure>
                     <p id="f9cd5153-7930-46ee-9bfd-33e14ec55f03d6e28">Mit folgendem Ergebnis:</p>
                     <verbatim>&lt;dates&gt;
  &lt;today&gt;2019-01-16+01:00&lt;/today&gt;
  &lt;formatted&gt;Wednesday, 16th January 2019&lt;/formatted&gt;
&lt;/dates&gt;</verbatim>
                  </content>
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="ac0f96f1-87d9-4191-a515-5e04a69a2147d6e34">
                  <content>
                     <title id="ac0f96f1-87d9-4191-a515-5e04a69a2147d6e34">
                        <title id="59f98501-17c8-47d7-a314-8f89c6b7299ed6e33">FLOWR Expression</title>
                     </title>
                     <p id="d9c7b63e-5eb8-4c1a-8efb-88af290b55bfd6e34">FLOWR[[xe1:FLOWR Expression]] steht für [[code:for, let, where, order by, return]]. Das sind die Query-Anweisungen, die in 
dem Ausdruck erlaubt sind - in genau dieser Reihenfolge.</p>
                     <verbatim>let $bibliothek := .
for $x in $bibliothek//buecher,
    $y in $bibliothek//autoren/autor
where starts-with($autor, 'Grass')
    and $x/@autorId = $y/@id
return $x/titel</verbatim>
                     <p id="c8a0cb85-703f-405f-b645-b24ac1e81133d6e38">In dieser Query werden die Titel aller Bücher von Grass zurückgeliefert.
Bemerkenswert ist hier die Syntax.</p>
                     <note>
                        <consequence>
                           <p id="9107c2a6-03d3-41db-b842-771ef054948fd6e41">Normalerweise würde man zwischen den
einzelnen Anweisungen einen Blockabschluss, wie ein Semikolon erwarten.
Da wir aber hier funtional prorgammieren, ist die Sache etwas anders...</p>
                        </consequence>
                     </note>
                  </content>
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="6b5b8b5e-b7cf-4b53-8f93-b659fadaea06d6e46">
                  <content>
                     <title id="6b5b8b5e-b7cf-4b53-8f93-b659fadaea06d6e46">
                        <title id="7dbf0fb3-8421-43c4-b792-0eba61c4bf27d6e44">XML per XQuery</title>
                     </title>
                     <p id="9ab1e252-cb55-4821-9893-74ec6ef84344d6e45">Es ist aber auch möglich XML zu erzeugen, wobei natürlich für eine Transformation XSLT 
vorzuziehen ist. Dazu werden Tags direkt in die Expression geschrieben, wie z.B. hier:</p>
                     <verbatim>declare variable $nachname as xs:string external;
&lt;buecher autor="{$nachname}"&gt;
{
  let $bibliothek := .
  for $x in $bibliothek/buecher//buch,
      $y in $bibliothek/autoren//autor
  where starts-with($y, $nachname)
      and $x/@autorId = $y/@id
  order by $x/ausgabe
  return
  &lt;buch ausgabe="{$x/ausgabe}"&gt;
    {$x/titel}
  &lt;/buch&gt;
}
&lt;/buecher&gt;</verbatim>
                     <p id="998102ca-7388-47ce-bb9d-0c6676f3788dd6e49">Speichert man dieses Schnippsel in einer Datei [[code:buecher.xquery]] ab,
so kann man mit der folgenden Kommandozeile auf einer [[code:buecher.xml]] Datei als Eingabe suchen:</p>
                     <verbatim>java -cp usr/lib/saxon/saxon.jar net.sf.saxon.Query -t -s:buecher.xml 
                                                       -q:buecher.xquery 
                                                       -o:ergebnis.xml 
                                                       nachname=grass</verbatim>
                  </content>
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="188bbf60-b618-401b-8e47-be36a013c7b7d6e57">
                  <content>
                     <title id="188bbf60-b618-401b-8e47-be36a013c7b7d6e57">
                        <title id="72199b87-ef45-4bac-93aa-a03892a63e12d6e54">Document Projection</title>
                     </title>
                     <p id="4b856b14-5e37-4b3f-97aa-35d140f8c43bd6e55">[[link]]Document Projection[[fn:http://www.saxonica.com/documentation/#!sourcedocs/projection*Verstecktes Saxon Feature: Dokument Projektion bei einer XQuery Abfrage]][[xe1:Tipps und Tricks;xe2:Document Projection]]  ist ein verstecktes Saxon XQuery Feature. Es funktioniert nur für eine einzige Abfrage.
Das kann schon recht hilfreich sein, wenn man ein mehrere 100MB großes Dokument durchsuchen
will.</p>
                     <p id="ac58c0ea-28fd-4c0f-9ecc-722bb1233a6ad6e57">Ohne Projection würde das Beispiel von oben so verarbeitet:</p>
                     <verbatim>java -cp usr/lib/saxon/saxon.jar net.sf.saxon.Query -t 
     -s:buecher.xml 
     -q:buecher.xquery 
     -o:ergebnis.xml 
     -projection:off 
     nachname=grass
Saxon-EE 9.7.0.20J from Saxonica
Java version 1.8.0_60
Using license serial number V005095
Analyzing query from Desktop/buecher.xquery
Generating byte code...
Analysis time: 201.10095 milliseconds
Processing file:/Users/Alex/buecher.xml
Using parser com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser
Building tree for file:/Users/Alex/buecher.xml 
using class net.sf.saxon.tree.tiny.TinyBuilder
Tree built in 3.482278ms
Tree size: 46 nodes, 58 characters, 6 attributes
Execution time: 27.137589ms
Memory used: 67031664</verbatim>
                     <p id="f182025a-4c60-479e-a19f-5927645b8a2ed6e61">Mit der Option [[code:-projection:on]] verändert sich die Ausführungszeit signifikant:</p>
                     <verbatim>[...]

Document projection for file:/Users/Alex/buecher.xml
-- Input nodes 50; output nodes 27; reduction = 46%
Tree built in 3.80615ms
Tree size: 26 nodes, 58 characters, 3 attributes
Execution time: 15.83463ms
Memory used: 64339064</verbatim>
                  </content>
               </chapter>
            </block>
         </content>
         <chapter hyphenation="yes" chapterpage="no" id="98665bd9-d40d-4fc7-ab7a-e340be6190a6"
                  ismodule="no">
            <content>
               <title id="06abe1b7-21be-4794-bec6-c28732cf6cbf">
                  <title id="8c5a4500-d080-4910-b4cd-529caeb12ae3">XQuery als Programmiersprache</title>
               </title>
               <block>
                  <p id="1e9a3c95-15bd-4eb0-89b8-59c8784a5425">Erste Schritte in XQuery gehen sehr schön  
mit der Query Konsole auf dem Marklogic Server (Port 8000).
Hat man parallel auch noch oXygen offen, kann man die Testergbnisse aus der Konsole direkt in ein XQuery Server Skript packen.</p>
                  <p id="8d8cb926-923a-458c-909f-85a071780f3bd6e18">wqdqwd</p>
                  <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                           id="1cba86ea-2760-4a82-b5d7-349bfa73e49fd6e8">
                     <content>
                        <title id="1cba86ea-2760-4a82-b5d7-349bfa73e49fd6e8">
                           <title id="fa1956ff-e468-4fb8-99dc-1a7a8f773707d6e7">Schleifen</title>
                        </title>
                        <p id="5fdff6dd-6c8a-467c-880d-33c88f7de0ded6e9">Die ersten 10 Dokumente auf dem Server bekommt man z.B. mit:[[xe1:Programmierkonstrukte;xe2:Schleifen - for]]</p>
                        <verbatim>(doc())[position() lt 11]</verbatim>
                        <p id="b3785b18-f654-4483-85a6-bdbb21caa0e1d6e13">Die Zahlen von 1 bis 100 mit:</p>
                        <verbatim>(for $i in (1 to 100) return $i)</verbatim>
                        <p id="7558c943-b4af-4b14-acf0-fc84efcebb90d6e17">Wenn man diese beide Anweisungen untereinander in die Konsole
schreibt bekommt man einen Fehler. Trennt man sie mit einem 
Komma - ein Tupel wird erzeugt - dann klappt es.</p>
                     </content>
                  </chapter>
                  <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                           id="19cc7202-f7bb-4cb1-ad46-9c7465c3d3b3d6e21">
                     <content>
                        <title id="19cc7202-f7bb-4cb1-ad46-9c7465c3d3b3d6e21">
                           <title id="0bbb962d-b38e-431a-855a-294425a5a016d6e20">Dokumente in der DB anlegen</title>
                        </title>
                        <p id="68e15e0c-efc5-472f-87fe-4d2dd4352485d6e22">Der Befehl zum Anlegen eines Dokuments in der Marklogic DB sieht
folgendermassen aus [[link]](Doku)[[fn:https://docs.marklogic.com/xdmp:document-insert*Doku zu xdmp:documen-insert Funktion auf den MarkLogic Webseiten]]:[[xe1:Programmierkonstrukte;xe2:DB insert]]</p>
                        <verbatim>xdmp:document-insert(
  "/alex-test/example-alex.xml",
  &lt;root&gt;Hier steht der Content&lt;/root&gt;, 
  &lt;options xmlns="xdmp:document-insert"&gt;  
    &lt;metadata&gt;{
      map:map() =&gt; map:with("valid-start", "2014-06-03T14:13:05.472585-07:00")
      =&gt; map:with("valid-end", "9999-12-31T11:59:59Z")
      }&lt;/metadata&gt;
  &lt;/options&gt;)</verbatim>
                        <p id="0db3e46f-54fa-4858-b85d-ad36ded2bf2ad6e26">Packt man diese Instruktion in die for-Schleife oben, dann sieht das Konstrukt so aus:</p>
                        <verbatim>(for $i in (1 to 10) return 
  xdmp:document-insert(
  concat("/alex-test/example-alex-",$i,".xml"),
  &lt;root&gt;Hier steht der Content {$i}&lt;/root&gt;, 
  &lt;options xmlns="xdmp:document-insert"&gt;  
    &lt;metadata&gt;{
      map:map() =&gt; map:with("valid-start", "2014-06-03T14:13:05.472585-07:00")
      =&gt; map:with("valid-end", "9999-12-31T11:59:59Z")
      }&lt;/metadata&gt;
  &lt;/options&gt;)
)</verbatim>
                        <p id="ccd162ef-82c4-45f2-8a4d-a72e51647514d6e30">Dokumente kann man einer Collection[[xe1:Programmierkonstrukte;xe2:DB Collection]] zuweisen, um sie leichter finden und auswerten
zu können. Das geht mit dem folgenden Befehl [[link]](Doku)[[fn:https://docs.marklogic.com/xdmp:document-add-collections*Dokumentation zur xdmp:document-add-collections Funktion auf den MarkLogic Webseiten]] und diesem Schnippsel:</p>
                        <verbatim>let $root :=
&lt;mein-test&gt;
   &lt;id&gt;{$id}&lt;/id&gt;
   &lt;content&gt;Hallo Welt!&lt;/content&gt;
&lt;/mein-test&gt;,
$options :=
&lt;options xmlns="xdmp:document-insert"&gt;  
  &lt;permissions&gt;{xdmp:default-permissions()}&lt;/permissions&gt;
  &lt;collections&gt;
    &lt;collection&gt;/alex-test&lt;/collection&gt;
  &lt;/collections&gt;
&lt;/options&gt;,
$fname := concat('/',$id,'_','.xml'),
$td := xdmp:document-insert($fname,$root,$options)
return 
  [...]</verbatim>
                        <p id="089d273b-a358-45a2-857e-181948135159d6e34">Die Dokumente, die mit der Collection alex-test getaggt wurden, kann man sich mit der folgenden Schleife ausgeben lassen:</p>
                        <verbatim>for $x in collection("/alex-test")
  return
    fn:document-uri($x)</verbatim>
                     </content>
                  </chapter>
               </block>
            </content>
            <chapter hyphenation="yes" chapterpage="no" id="3630ee02-616b-4bbc-8655-9064d57bf945"
                     ismodule="no">
               <content>
                  <title id="51a4584a-9a43-4f8f-ad89-d1c2d88ab6e6">
                     <title id="9c13d213-40d3-4e74-b343-23cc42779c6d">Funktionen und Module</title>
                  </title>
                  <block>
                     <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                              id="6388d720-5add-45c0-aea2-4fd40ba5b64fd6e4">
                        <content>
                           <title id="6388d720-5add-45c0-aea2-4fd40ba5b64fd6e4">
                              <title id="2b09a4f1-af09-482e-b220-bbaa5e4f0897d6e5">Funktionen</title>
                           </title>
                           <p id="5de561e1-87c3-4f46-b36e-c5db56d9ae27d6e7">Um bestimmte Abschnitte des XQuery Programm wiederverwendbar zu machen, stehen Funktionsdeklarationen[[xe1:Programmierkonstrukte;xe2:Funktionen]] zur verfügung. Eine einfache Funktion wäre z.B. diese hier:</p>
                           <verbatim>declare function local:wrap-header($json) {
  xdmp:add-response-header("Pragma", "no-cache"),
  xdmp:add-response-header("Cache-Control", "no-cache"),
  xdmp:add-response-header("Expires", "0"),
  xdmp:set-response-content-type('text/json; charset=utf-8'),
  $json
};</verbatim>
                           <p id="285caf33-98eb-4945-acad-961bc509ce0cd6e11">Sie wickelt um einen JSON String eine passende Header Information.</p>
                           <p id="df24cc6b-17ff-486d-827c-9cec00d4a33bd6e13">Damit die Funktion eingebunden werden kann, muss ein passender Namespace[[xe1:XML Konstrukte;xe2:Namespaces]] deklariert werden:</p>
                           <verbatim>declare namespace local = 'local:';</verbatim>
                           <p id="bc7c92a6-2eae-47e2-973b-904415f3fc0ed6e17">Nicht nur bzgl. Wiederverwendbarkeit sind Funktionen praktisch, sondern auch
um ganz elementare Konstrukte, wie [[code:while...do]][[xe1:Programmierkonstrukte;xe2:Schleifen - while..do]] Schleifen, zu realisieren.</p>
                           <p id="6ec7b350-f2e7-4922-9e96-9c12fd07957ad6e19">Dazu nutzt man, wie in der funktionalen Programmierung üblich, die Rekursion:</p>
                           <verbatim>declare function local:ist-letzter-wert-in-kette($glied) {
  let $wert := local:komplizierte-berechnung($glied),
    $naechstes-glied := local:komplizierte-berechnung-der-position($glied),
  return
    if ($naechstes-glied and not($wert = 'foobar')) then
      local:durchlaufe-kette($naechstes-glied)
    else
      $wert = 'foobar'
};</verbatim>
                           <p id="844b5256-5000-436c-bca3-c8f1c31f3ffed6e23">In diesem kleinen Schnippsel sind schon einige Besonderheiten von 
XQuery zu sehen. Variablenzuweisungen geschehen mit einem Doppelpunkt,
Vergleiche dagegen nur mit einem einfachen "=". Statements werden mit einem
Komma getrennt.</p>
                        </content>
                     </chapter>
                     <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                              id="9924b5ed-d340-4e18-8580-c728182f2babd6e25">
                        <content>
                           <title id="9924b5ed-d340-4e18-8580-c728182f2babd6e25">
                              <title id="dab65cd2-0eb9-4487-99e0-07422d3c3759d6e26">Module</title>
                           </title>
                           <p id="2cc3effd-16fe-42c0-9fbd-bfa92cb6d10bd6e28">Um eine XQuery Anwendung zu modularisieren[[xe1:Programmierkonstrukte;xe2:Module]], können einzelne Skripte in
Module ausgelagert werden. Ein Modul, z.B. common.xqy, wird dabei über einen eigenen
Namespace deklariert:</p>
                           <verbatim>module namespace common = "https://www.tekturcms.de/common";</verbatim>
                           <p id="86f1276d-3550-4da6-887d-58012231ea7cd6e32">Dieses Modul kann dann in anderen Skripten eingebunden werden:</p>
                           <verbatim>import module namespace common = "https://www.tekturcms.de/common" at "common.xqy";</verbatim>
                           <p id="d3d6ab20-364a-45c0-b0fa-e2e4578331bcd6e36">Funktionen und Variablen werden dann mir dem Namespace[[xe1:XML Konstrukte;xe2:Namespaces]] geprefixt aufgerufen:</p>
                           <verbatim>Funktionsaufruf: common:wrap-response-header(...)
Variablenauswertung: $common:collection-books</verbatim>
                        </content>
                     </chapter>
                  </block>
               </content>
            </chapter>
            <chapter hyphenation="yes" chapterpage="no" id="d9cd641f-29f4-485d-8e67-32519d422b08"
                     ismodule="no">
               <content>
                  <title id="7f9615d0-3d92-4ec1-813b-db4b788b6efd">
                     <title id="86a66f53-eb4a-4cc0-b14c-12d5c2bb84bd">[[code:if..then..else]] Ausdrücke</title>
                  </title>
                  <block>
                     <p id="31bf12f5-ecec-4ada-965f-cb4e1539afc6">In nicht-funktionalen Programmiersprachen sind die Schlüsselwörter [[code:if]] und [[code:then]][[xe1:Programmierkonstrukte;xe2:Bedingte Anweisung - if..then..else]] dazu da, um dem Compiler oder Interpreter mitzuteilen, dass eine bedingte Anweisung ausgewertet werden soll.</p>
                     <p id="c9ab5b21-d799-4bb6-a020-d7ab5750146ed6e12">Was für den Nicht-funktionalen Programmierer etwas befremdlich erscheint, ist der Umstand, dass in XQuery [[code:if..then]] als Ausdrücke ausgewertet werden.</p>
                     <p id="e4d038c8-39fe-4f47-a81c-4a7d16a10c3ed6e17">Das ist einerseits sehr praktisch, weil es richtig angewandt den Code verkürzt und damit das Wesentliche herausstellt, kann aber auch weiter zur allg. Verwirrung bzgl. des kryptischen XQuery Codes beitragen.</p>
                     <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                              id="bf2d599f-40b0-4106-ab38-0ddce2a24febd6e10">
                        <content>
                           <title id="bf2d599f-40b0-4106-ab38-0ddce2a24febd6e10">
                              <title id="b0df228c-1f72-4a12-9302-805fa0022b03d6e11">Beispiel: Konditionale Server App</title>
                           </title>
                           <p id="2d0364b2-f8b1-47fa-996e-0f9ceba95e4fd6e13">Betrachten wir ein einfaches Beispiel: Wir generieren auf einer Marklogic-Webapp eine JSON Response. Da wir diesen Mechanismus an mehreren Stellen im Code einsetzen, empfiehlt es sich das Rendern des Headers in eine Funktion auszulagern.</p>
                           <verbatim>declare function common:wrap-response($json)
{
  xdmp:add-response-header("Pragma", "no-cache"),
  xdmp:add-response-header("Cache-Control", "no-cache"),
  xdmp:add-response-header("Expires", "0"),
  xdmp:set-response-content-type('text/json; charset=utf-8'),
  $json
};</verbatim>
                           <p id="9c2999c6-968d-4719-9036-fd0664b5bd57d6e19">In unserem Request-Handler wird je nach Auswertung einer Variablen eine 
bedingte Anweisung ausgeführt, diese sieht bspw. so aus:</p>
                           <verbatim>let $name := xdmp:get-request-field('name'),
    $is-afternoon := xs:time(current-dateTime()) gt xs:time('12:00:00')
return 
  if ($is-afternoon) then 
   common:wrap-response(xdmp:unquote(concat('{"greeting":"Good Afternoon! ',$name,'!"}')))
  else
   common:wrap-response(xdmp:unquote(concat('{"greeting":"Good Morning! ',$name,'!"}')))</verbatim>
                           <p id="7795845c-ea88-42f8-8adf-ab4d0b5404fcd6e23">Als prozeduraler Programmierer wäre ich mit diesem Switch voll und ganz zufrieden, 
der funktionale Programmier erkennt abaer sofort einen Optimierungsbedarf.</p>
                           <p id="a553de2e-d73c-4a97-a1b1-5283220ffef3d6e25">Da es sich bei der bedingten Anweisung auch um einen Ausdruck handelt, der [[code:true}} oder [[code:false}} zurückgibt, können wir die gleichen Funktionsaufrufe herausziehen:</p>
                           <verbatim>ommon:wrap-response(xdmp:unquote(
    let $is-afternoon := xs:time(current-dateTime()) gt xs:time('12:00:00')
        return 
            if ($is-afternoon) then concat('{"greeting":"Good Afternoon! ',$name,'!"}') 
            else concat('{"greeting":"Good Morning! ',$name,'!"}')
)</verbatim>
                           <p id="c1d6576a-56e3-4dda-bc18-342e7e458553d6e29">Hier wird der abstrakt denkende Programmierer aber einwenden, dass eine abstrakte
Logik nicht in eine Low-Level Funktion, wie [code:xsdmp:unquote] gewrapped werden sollte.</p>
                           <p id="a935a64f-2ed6-4682-84cb-3243f9dcbb49d6e31">Das stimmt - und mehr noch, die Maskierung mit [[code:xsdmp:unquote]] sollte auch noch in unsere 
Funktion gepackt werden. So dass der Code schliesslich so aussehen würde:</p>
                           <verbatim>declare function common:render-response($json)
{
  xdmp:add-response-header("Pragma", "no-cache"),
  xdmp:add-response-header("Cache-Control", "no-cache"),
  xdmp:add-response-header("Expires", "0"),
  xdmp:set-response-content-type('text/json; charset=utf-8'),
  xdmp:unquote($json)
};

common:render-response(
    let $is-afternoon := xs:time(current-dateTime()) gt xs:time('12:00:00')
        return 
            if ($is-afternoon) then concat('{"greeting":"Good Afternoon! ',$name,'!"}') 
            else concat('{"greeting":"Good Morning! ',$name,'!"}')
)</verbatim>
                           <p id="0a519a5c-c908-4d55-a9e8-d8ad9a4e7a81d6e36">Sicherlich lässt sich darüber streiten, ob nun der funktionale Ansatz besser lesbar ist als
der prozedurale ganz oben.</p>
                           <p id="175752a8-d929-4081-83cf-c74b67da7d35d6e38">Ich denke jeder Programmierer hat hier seinen eigenen, individuellen
und bewährten Programmierstil entwickelt, den er auch beibehalten sollte.</p>
                        </content>
                     </chapter>
                  </block>
               </content>
            </chapter>
         </chapter>
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="3337f433-44bf-430d-a809-73fd1de5ba6c"
               ismodule="no">
         <content>
            <title id="44b03330-885f-4eee-a90b-3235d56161e7">
               <title id="b49f74f7-6d65-4672-beef-5fd92c877526">XML Datenbanken</title>
            </title>
            <block>
               <p id="23b4fccd-51f9-4064-b7df-46252a40211d">XML Datenbanken konzentrieren sich im Gegensatz zu den verbreiteten relationalen 
Datenbanken auf die Struktur eines Dokuments, die abstrakt gesehen einen Baum darstellt, und weniger auf die Beziehungen zwischen Objekten, die eher einen Graphen aufspannen.</p>
               <p id="01eaca65-7909-46d8-9223-3de00eed2606d6e6">Natürlich ist auch jeder Baum ein Graph ohne Kreise, und sicherlich kann man auch Bäume
in einer relationalen Datenbank abspeichern. Eine XML Datenbank ist aber für diese Struktur optimiert. </p>
               <p id="b8e45351-2764-4e0f-9d4a-c78d2e149bced6e8">Es gibt gegenwärtig vier reine XML Datenbanken und einige Erweiterungen für konventionelle SQL Datenbanken:[[xe1:XML Datenbank;xe2:eXist]][[xe1:XML Datenbank;xe2:BaseX]][[xe1:XML Datenbank;xe2:MarkLogic]][[xe1:XML Datenbank;xe2:Berkely XML DB]]</p>
               <table type="dl">
                  <tgroup>
                     <colspec colwidth="100"/>
                     <colspec colwidth="300"/>
                     <tbody>
                        <row>
                           <entry>
                              <b>Datenbank</b>
                           </entry>
                           <entry>
                              <b>Besonderheiten</b>
                           </entry>
                        </row>
                        <row>
                           <entry>[[link]]eXist DB[[fn:EX;http://exist-db.org/exist/apps/homepage/index.html*Homepage zur eXist XML Datenbank]]</entry>
                           <entry>
                              <p id="3a5173f3-5cdb-4aff-b6ea-23fd95f7f1b9d6e20">eXist DB ist ein Open Source Projekt. Neben der Datenbank umfasst diese Software eine komplette Entwicklungsumgebung für Webapplikationen. Für diese DB xistiert ein 1-Klick Installer in Form eines Java Jars. eXist ist im Bereich Digital Humanities (ein Fachbereich der Geschichts- und Kulturwissenschaften) sehr verbreitet.</p>
                           </entry>
                        </row>
                        <row>
                           <entry>[[link]]BaseX[[fn:BX;http://basex.org/*Homepage zur BaseX XML Datenbank]]</entry>
                           <entry>
                              <p id="15075d1b-a56d-4be2-9b93-c5f50f833f6ad6e26">BaseX ist ebenfalls OpenSource und die Homepage macht einen ordentlichen Eindruck. Bisher bin ich noch nicht dazugekommen, BaseX zu evaluieren. Unter meiner Java 10 Installation lief erst einmal nichts - weshalb die erste Kontaktaufnahme scheiterte. </p>
                           </entry>
                        </row>
                        <row>
                           <entry>[[link]]MarkLogic[[fn:ML;https://www.marklogic.com/*Homepage zur XML Datenbank MarkLogic]]</entry>
                           <entry>
                              <p id="c7c02152-da2a-42a9-b1d0-333d01700ff0d6e32">MarkLogic ist der Platzhirsch unter den kommerziellen Anbietern. Hier ist alles "Enterprise"... die Funktionalität, der Support und auch der Preis. Obwohl ML viele Erweiterungen für XQuery bietet, ist der XQuery 3.0 Standard noch nicht umgesetzt.</p>
                           </entry>
                        </row>
                        <row>
                           <entry>[[link]]Berkely DB XML Datenbank[[fn:BD;https://www.oracle.com/database/berkeley-db/xml.html*Website zur Berkeley DB XML Datenbank auf den Seiten von Oracle]]</entry>
                           <entry>
                              <p id="131dcb3d-0963-4c7c-a545-f4752f376746d6e38">Die gute alte Berkely DB war der Key-Value Unterbau für viele andere Datenbanken, wie auch MySQL. Sicherlich hat auch die XML Variante einiges in Petto.</p>
                           </entry>
                        </row>
                     </tbody>
                  </tgroup>
               </table>
               <p id="c326937e-0037-4363-9e58-c6f75e5a1b41d6e40">Da ich zur Zeit beruflich mit MarkLogic zu tun habe, lasse ich mir die Gelegenheit nicht nehmen, meine Erfahrungen und Erkenntnisse dazu in diesem Kapitel zu beschreiben. Es gibt auch eine [[link]]Developer License[[fn:DL;https://developer.marklogic.com/free-developer*MarkLogic Developer Lizenzvereinbarung]] mit der man die Software ausprobieren kann. Für alle langfristigen XQuery Spielereien ist die eXist DB wohl die erste Wahl, da hier auch der aktuelle XQuery 3.0 Standard umgesetzt ist.</p>
            </block>
         </content>
         <chapter hyphenation="yes" chapterpage="no" id="38f7a676-cbef-4a69-9ae9-d89bddde2719"
                  ismodule="no">
            <content>
               <title id="4f168aa8-64ed-487d-924c-92e68871b212">
                  <title id="d9ecd69d-0fbd-4931-8d5b-fe5bee02f362">Connector zu Marklogic in Oxygen Test</title>
               </title>
               <block>
                  <p id="71c18de7-b974-43c8-a4f5-1b9c3cca77ae">Marklogic[[xe1:Software;xe2:Marklogic]] bietet zwar auf Port 8000 per Default ein Query Console im Browser, mit der man bestimmte Sachen ausprobieren kann. Komfortabler arbeitet man aber mit einem Oxygen-Connector[[xe1:Tools;xe2:oXygen-Connector]]. Dazu öffnet man den <i id="69aba0a2-ccaa-4d60-bbf7-1fd62f608ca5d6e6">Data Source Explorer</i>: </p>
                  <p id="c4eeb7c1-21bc-47b7-a37b-772b65113af2d6e13">und konfiguriert eine neue Datenquelle:</p>
                  <figure pdfwidth="page">
                     <desc id="b41efc60-b68d-4e9a-b659-363ecbea1d66d6e12">oXygen Data Source Explorer View öffnen</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/d-source-explorer-1.png"/>
                  </figure>
                  <p id="eeb8e3dd-c1c6-4158-a88a-2157da375f78d6e19">Dazu muss man den [[link]]Marklogic Treiber installieren[[fn:https://www.oxygenxml.com/doc/versions/20.1/ug-editor/topics/configure-marklogic-datasource.html*MarkLogic Datenquelle in oXygen konfigurieren]] und diesen im folgenden Screen verfügbar machen.</p>
                  <figure pdfwidth="page">
                     <desc id="4ac1ff51-23a5-45c8-9044-89ffb6f8816cd6e18">Neue Datenquelle in oXygen konfigurieren</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/d-source-explorer-2.png"/>
                  </figure>
                  <caution>
                     <cause>Das Jar sollte an einem soliden Ort abgespeichert werden, da hier nur ein Verweis auf diesen Ort gesetzt wird.</cause>
                     <consequence/>
                  </caution>
                  <figure pdfwidth="page">
                     <desc id="9cb017ac-29d4-4449-a705-a48768bcca40d6e27">Marklogic Treiber auswählen</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/add-marklogic-jar.png"/>
                  </figure>
                  <p id="fafe35d0-f23a-4f74-9910-de34f4215c51d6e30">Natürlich ist auf der Serverseite auch eine Einstellung notwendig. Man wechselt als Admin in den Bereich <b>App Servers</b> und fügt einen neuen <b>WebDAV Server</b> [[xe1:Tools;xe2:Marklogic WebDAV Server]] hinzu. Ggf. muss man bei der Auswahl der Datenbank diese noch auf "automatische Directory Erzeugung" umstellen.</p>
                  <figure pdfwidth="page">
                     <desc id="3d85ad8f-310f-41a3-a5b0-c8758ffad484d6e39">Wechseln in die Marklogic App Server Verwaltung</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/appserver.png"/>
                  </figure>
                  <figure pdfwidth="page">
                     <desc id="a718f7dc-2ba9-4243-b9e3-afa1a7541143d6e43">WebDAV in Marklogic konfigurieren</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/marklogic-create-webdav.png"/>
                  </figure>
                  <p id="9c2a53f4-bd6e-42d5-b88c-9e23a3a52923d6e46">Hat man den WebDAV Server erzeugt und diesem eine bestehende oder neu angelegte Datenbank zugewiesen, dann kann man diese DB im Konfigurationsdialog der neuen WebDav Connection auswählen.</p>
                  <figure pdfwidth="page">
                     <desc id="6597d0b8-1ff1-4dd4-8c14-d99b5011aca5d6e50">Konfigurieren der WebDAV Connection Einstellungen in oXygen</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/cnfigure-database-connection.png"/>
                  </figure>
                  <p id="3a372d8e-d264-487c-be23-7c049f8f82ead6e53">Schliesslich hat man im Data Source Explorer in oXygen die neue Verbindung verfügbar und kann gefühlt wie im Dateisystem mit den Files auf dem Server arbeiten.</p>
                  <figure pdfwidth="page">
                     <desc id="902cb29c-0bfb-4708-aa7d-c3fbffb4c6d0d6e56">oXagen Data Source Explorer zeigt die WebDAV Verzeichnisse auf dem Marklogic Server</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/Data-Source_explorer.png"/>
                  </figure>
               </block>
            </content>
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="382bb96a-5a06-460c-8d69-4c4cd613297c"
                  ismodule="no">
            <content>
               <title id="4e59c114-46a9-4292-8c91-b346f9cde93f">
                  <title id="6dc3be8f-5b8c-407c-9853-0533fdbf8267">SQL Views in MarkLogic</title>
               </title>
               <block>
                  <p id="51cd2348-5ac3-401f-bfec-d6669662af27">Es macht nicht immer Sinn über eine Baumstruktur zu suchen. Obwohl das in einer 
XML Datenbank rasend schnell geht, weil jeder Knoten des Baums initial in einen Index
aufgenommen wird. So gibt es doch Anwendungsfälle bei denen man lieber eine relationale
Sicht auf die Daten hätte.</p>
                  <p id="fa6fb1a1-78b4-4a46-9b1e-ba2328fdd2f3d6e6">In MarkLogic heisst die Lösung dazu SQL Views.</p>
                  <p id="8029ae2f-5b5a-4df5-97c1-aad92ac65df2d6e8">Bspw. benötigt man eine relationale Sicht auf die Daten,
wenn über verschiedene Datensätze ein Report generiert werden soll.</p>
                  <p id="93e04ead-905f-488b-a0bc-d024c912fc35d6e10">Nehmen wir an es gibt im Datenbestand die folgenden Dokumente:</p>
                  <verbatim>&lt;k:kunde&gt;
  &lt;k:id&gt;1&lt;/k:id&gt;
  &lt;k:name&gt;Alex&lt;/k:name&gt;
  &lt;k:eMail&gt;tekturcms@gmail.com&lt;/k:eMail&gt;
&lt;/k:kunde&gt;

&lt;k:kunde&gt;
  &lt;k:id&gt;2&lt;/k:id&gt;
  &lt;k:name&gt;Horst&lt;/k:name&gt;
  &lt;k:eMail&gt;horst@horst.de&lt;/k:eMail&gt;
&lt;/k:kunde&gt;

&lt;k:kunde&gt;
  &lt;k:id&gt;3&lt;/k:id&gt;
  &lt;k:name&gt;Gundula&lt;/k:name&gt;
  &lt;k:eMail&gt;gundl@gundula.de&lt;/k:eMail&gt;
&lt;/k:kunde&gt;

&lt;b:bestellung&gt;
  &lt;b:id&gt;1&lt;/b:id&gt;
  &lt;b:datum&gt;02.01.2019&lt;/b:datum&gt;
  &lt;b:preis&gt;99.90&lt;/b:preis&gt;
  &lt;kunde-id&gt;2&lt;/kunde-id&gt;
&lt;/b:bestellung&gt;

&lt;b:bestellung&gt;
  &lt;b:id&gt;2&lt;/b:id&gt;
  &lt;b:datum&gt;03.01.2019&lt;/b:datum&gt;
  &lt;b:preis&gt;68.90&lt;/b:preis&gt;
  &lt;b:kunde-id&gt;1&lt;/b:kunde-id&gt;
&lt;/b:bestellung&gt;</verbatim>
                  <p id="2328ace1-a84c-4d9b-839c-e81962bff15ed6e14">Will man sich alle Kunden anzeigen lassen, die eine Bestellung 
abgegeben haben - das sind Alex und Horst - so würde man bei
einem relationalen Ansatz einen JOIN verwenden, so wie:</p>
                  <verbatim>SELECT name, datum, preis
FROM kunden k
INNER JOIN bestellungen b
ON k.id = b.kunde_id</verbatim>
                  <p id="634aa470-0b4d-4ef9-ad31-e23e72e82857d6e18">In einer relationalen Sicht würde uns das dann die folgende Tabelle liefern:</p>
                  <verbatim>name, datum, preis
Alex, 03.01.2019, 68.90
Horst, 02.01.2019, 99.90</verbatim>
                  <p id="32221bf5-8e13-4057-90ab-06577e278a90d6e22">Um für MarkLogic eine SQL View zu definieren verwendet man einen Mechanismus,
der da heisst: [[link]]Template Driven Extraction[[fn:https://docs.marklogic.com/guide/app-dev/TDE*Template Driven Extraction wird verwendet um in MarkLogic eine relationale Sicht auf die baumstrukturierten Daten zu setzen]]</p>
                  <p id="300d1425-14e5-4fe0-b486-327254ed8cf0d6e24">Dazu werden Templates in XML deklariert und in die Template Collection eingefügt. Für unser obiges Beispiel
würden wir zwei Templates brauchen, die so aussehen:</p>
                  <verbatim>xquery version "1.0-ml";

import module namespace tde = "http://marklogic.com/xdmp/tde" 
                            at "/MarkLogic/tde.xqy";

let $sql-view-name := 'kunden-view.xml'
let $sql-view := &lt;template xmlns="http://marklogic.com/xdmp/tde"&gt;
   &lt;path-namespaces&gt;
      &lt;path-namespace&gt;
         &lt;prefix&gt;k&lt;/prefix&gt;
         &lt;namespace-uri&gt;https://tekturcms.de/schema/kunde/1.0&lt;/namespace-uri&gt;
      &lt;/path-namespace&gt;
   &lt;/path-namespaces&gt;
   &lt;context&gt;/k:kunde&lt;/context&gt;
   &lt;collections&gt;
      &lt;collections-and&gt;
         &lt;collection&gt;/kunden&lt;/collection&gt;
      &lt;/collections-and&gt;
   &lt;/collections&gt;
   &lt;rows&gt;
      &lt;row&gt;
         &lt;schema-name&gt;kunden_schema&lt;/schema-name&gt;
         &lt;view-name&gt;kunden_view&lt;/view-name&gt;
         &lt;columns&gt;
            &lt;column&gt;
               &lt;name&gt;id&lt;/name&gt;
               &lt;scalar-type&gt;string&lt;/scalar-type&gt;
               &lt;val&gt;k:id&lt;/val&gt;
               &lt;nullable&gt;true&lt;/nullable&gt;
            &lt;/column&gt;
            &lt;column&gt;
               &lt;name&gt;datum&lt;/name&gt;
               &lt;scalar-type&gt;string&lt;/scalar-type&gt;
               &lt;val&gt;k:datum&lt;/val&gt;
               &lt;nullable&gt;true&lt;/nullable&gt;
            &lt;/column&gt;
            &lt;column&gt;
               &lt;name&gt;eMail&lt;/name&gt;
               &lt;scalar-type&gt;string&lt;/scalar-type&gt;
               &lt;val&gt;k:eMail&lt;/val&gt;
               &lt;nullable&gt;true&lt;/nullable&gt;
            &lt;/column&gt;
         &lt;/columns&gt;
      &lt;/row&gt;
   &lt;/rows&gt;
&lt;/template&gt;
return(
  tde:template-insert(concat('/templates/', $sql-view-name), 
                      $sql-view, xdmp:default-permissions())
)</verbatim>
                  <p id="1b5ad441-b64a-48a5-beaf-fcb03b693c17d6e29">und analog für die Bestellungen:</p>
                  <verbatim>[...]
   &lt;rows&gt;
      &lt;row&gt;
         &lt;schema-name&gt;bestellungen_schema&lt;/schema-name&gt;
         &lt;view-name&gt;bestellungen_view&lt;/view-name&gt;
         &lt;columns&gt;
            &lt;column&gt;
               &lt;name&gt;id&lt;/name&gt;
               &lt;scalar-type&gt;string&lt;/scalar-type&gt;
               &lt;val&gt;b:id&lt;/val&gt;
            &lt;/column&gt;
            &lt;column&gt;
               &lt;name&gt;datum&lt;/name&gt;
               &lt;scalar-type&gt;string&lt;/scalar-type&gt;
               &lt;val&gt;b:datum&lt;/val&gt;
            &lt;/column&gt;
            &lt;column&gt;
               &lt;name&gt;preis&lt;/name&gt;
               &lt;scalar-type&gt;string&lt;/scalar-type&gt;
               &lt;val&gt;b:preis&lt;/val&gt;
            &lt;/column&gt;
            &lt;column&gt;
               &lt;name&gt;kunde_id&lt;/name&gt;
               &lt;scalar-type&gt;string&lt;/scalar-type&gt;
               &lt;val&gt;b:kunde-id&lt;/val&gt;
            &lt;/column&gt;
         &lt;/columns&gt;
      &lt;/row&gt;
[...]</verbatim>
                  <p id="beda4ca5-f41c-4fbd-834a-6a375127725dd6e33">In XQuery eingebunden könnte man dann die definierten SQL Views mit dem folgenden Befehl abfragen:</p>
                  <verbatim>xdmp:sql("SELECT name, datum, preis FROM kunden_view k 
          INNER JOIN bestellungen_view b ON k.id = b.kunde_id")</verbatim>
                  <p id="30ca1f15-55f4-4eba-9f9f-eff3c661f764d6e37">Folgende ist das komplette Beispiel für eine MarkLogic XQuery Konsolensitzung abgebildet ...</p>
                  <verbatim>xquery version "1.0-ml";

declare namespace k = 'http://www.tekturcms.de/kunden';
declare namespace b = 'http://www.tekturcms.de/bestellungen';

import module namespace tde = "http://marklogic.com/xdmp/tde" at "/MarkLogic/tde.xqy";

declare function local:loadKunde($id, $name, $eMail)
{
  let $root :=
  &lt;k:kunde&gt;
    &lt;k:id&gt;{ $id }&lt;/k:id&gt;
    &lt;k:name&gt;{ $name }&lt;/k:name&gt;
    &lt;k:eMail&gt;{ $eMail }&lt;/k:eMail&gt;
  &lt;/k:kunde&gt;,
  $options :=
  &lt;options xmlns="xdmp:document-insert"&gt;  
    &lt;permissions&gt;{ xdmp:default-permissions() }&lt;/permissions&gt;
    &lt;collections&gt;
      &lt;collection&gt;/kunden&lt;/collection&gt;
    &lt;/collections&gt;
  &lt;/options&gt;,
  $fname := concat('/kunden/',$id,".xml")
  return xdmp:document-insert($fname,$root,$options)
};

declare function local:loadBestellung($id, $datum, $preis, $kunde-id)
{
  let $root :=
  &lt;b:bestellung&gt;
    &lt;b:id&gt;{ $id }&lt;/b:id&gt;
    &lt;b:datum&gt;{ $datum }&lt;/b:datum&gt;
    &lt;b:preis&gt;{ $preis }&lt;/b:preis&gt;
    &lt;b:kunde-id&gt;{ $kunde-id }&lt;/b:kunde-id&gt;
  &lt;/b:bestellung&gt;,
  $options :=
  &lt;options xmlns="xdmp:document-insert"&gt;  
    &lt;permissions&gt;{ xdmp:default-permissions() }&lt;/permissions&gt;
    &lt;collections&gt;
      &lt;collection&gt;/bestellungen&lt;/collection&gt;
    &lt;/collections&gt;
  &lt;/options&gt;,
  $fname := concat('/bestellungen/',$id,".xml")
  return xdmp:document-insert($fname,$root,$options)
};

declare function local:insertKundenSchema()
{
  let $sql-view-name := 'kunden-view.xml',
      $sql-view := &lt;template xmlns="http://marklogic.com/xdmp/tde"&gt;
    &lt;path-namespaces&gt;
      &lt;path-namespace&gt;
        &lt;prefix&gt;k&lt;/prefix&gt;
        &lt;namespace-uri&gt;http://www.tekturcms.de/kunden&lt;/namespace-uri&gt;
       &lt;/path-namespace&gt;
    &lt;/path-namespaces&gt;
    &lt;context&gt;/k:kunde&lt;/context&gt;
     &lt;collections&gt;
       &lt;collections-and&gt;
         &lt;collection&gt;/kunden&lt;/collection&gt;
      &lt;/collections-and&gt;
     &lt;/collections&gt;
     &lt;rows&gt;
       &lt;row&gt;
         &lt;schema-name&gt;kunden_schema&lt;/schema-name&gt;
         &lt;view-name&gt;kunden_view&lt;/view-name&gt;
         &lt;columns&gt;
            &lt;column&gt;
               &lt;name&gt;id&lt;/name&gt;
               &lt;scalar-type&gt;string&lt;/scalar-type&gt;
               &lt;val&gt;k:id&lt;/val&gt;
            &lt;/column&gt;
            &lt;column&gt;
               &lt;name&gt;name&lt;/name&gt;
               &lt;scalar-type&gt;string&lt;/scalar-type&gt;
               &lt;val&gt;k:name&lt;/val&gt;
            &lt;/column&gt;
          &lt;column&gt;
             &lt;name&gt;eMail&lt;/name&gt;
             &lt;scalar-type&gt;string&lt;/scalar-type&gt;
             &lt;val&gt;k:eMail&lt;/val&gt;
          &lt;/column&gt;
        &lt;/columns&gt;
      &lt;/row&gt;
    &lt;/rows&gt;
  &lt;/template&gt;
  return
    tde:template-insert(concat('/templates/', 
                        $sql-view-name), $sql-view, xdmp:default-permissions())
};

declare function local:insertBestellungenSchema()
{
  let $sql-view-name := 'bestellungen-view.xml',
      $sql-view := &lt;template xmlns="http://marklogic.com/xdmp/tde"&gt;
    &lt;path-namespaces&gt;
      &lt;path-namespace&gt;
        &lt;prefix&gt;b&lt;/prefix&gt;
        &lt;namespace-uri&gt;http://www.tekturcms.de/bestellungen&lt;/namespace-uri&gt;
       &lt;/path-namespace&gt;
    &lt;/path-namespaces&gt;
    &lt;context&gt;/b:bestellung&lt;/context&gt;
     &lt;collections&gt;
       &lt;collections-and&gt;
         &lt;collection&gt;/bestellungen&lt;/collection&gt;
      &lt;/collections-and&gt;
     &lt;/collections&gt;
     &lt;rows&gt;
       &lt;row&gt;
         &lt;schema-name&gt;bestellungen_schema&lt;/schema-name&gt;
         &lt;view-name&gt;bestellungen_view&lt;/view-name&gt;
         &lt;columns&gt;
            &lt;column&gt;
               &lt;name&gt;id&lt;/name&gt;
               &lt;scalar-type&gt;string&lt;/scalar-type&gt;
               &lt;val&gt;b:id&lt;/val&gt;
            &lt;/column&gt;
            &lt;column&gt;
               &lt;name&gt;datum&lt;/name&gt;
               &lt;scalar-type&gt;string&lt;/scalar-type&gt;
               &lt;val&gt;b:datum&lt;/val&gt;
            &lt;/column&gt;
          &lt;column&gt;
             &lt;name&gt;preis&lt;/name&gt;
             &lt;scalar-type&gt;string&lt;/scalar-type&gt;
             &lt;val&gt;b:preis&lt;/val&gt;
          &lt;/column&gt;
          &lt;column&gt;
             &lt;name&gt;kunde_id&lt;/name&gt;
             &lt;scalar-type&gt;string&lt;/scalar-type&gt;
             &lt;val&gt;b:kunde-id&lt;/val&gt;
          &lt;/column&gt;
        &lt;/columns&gt;
      &lt;/row&gt;
    &lt;/rows&gt;
  &lt;/template&gt;
  return
    tde:template-insert(concat('/templates/', 
                        $sql-view-name), $sql-view, xdmp:default-permissions())
};


local:loadKunde("1","Alex","tekturcms@gmail.com"),

local:loadKunde("2","Horst","horst@horst.de"),

local:loadKunde("3","Gundula","gundl@gundula.de"),

local:loadBestellung("1","02.01.2019","99.90","2"),

local:loadBestellung("2","03.01.2019","68.90","1"),

local:insertKundenSchema(),

local:insertBestellungenSchema(),

xdmp:sql("SELECT name, datum, preis FROM kunden_view k INNER JOIN 
          bestellungen_view b ON k.id = b.kunde_id")</verbatim>
                  <p id="af0bb509-8735-46fb-8e48-918f1d3f8f15d6e41">... mit einer schönen tabellarischen Ausgabe im unteren Panel der Query Konsole - oder als JSON:</p>
                  <verbatim>[
  [
    "k.name", 
    "b.datum", 
    "b.preis"
  ], 
  [
    "Alex", 
    "03.01.2019", 
    "68.90"
  ], 
  [
    "Horst", 
    "02.01.2019", 
    "99.90"
  ]
]</verbatim>
               </block>
            </content>
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="ef2b4070-c3cf-4d73-968e-e25f6dc1eef0"
                  ismodule="no">
            <content>
               <title id="7ca48bd5-7f2e-44cd-aacd-c15f7618b43e">
                  <title id="ba9dfb96-d3dd-49c8-9008-8476c0e59728">Bi-Temporale Dokumente</title>
               </title>
               <block>
                  <p id="fd257336-1ea5-47eb-8795-ac4f22576a8e">Wenn wir zwischen der Zeit in der das Dokument, bspw. ein Vetrag 
in der DB angelegt wird, und der Zeit in der ein Vetrag zwischen zwei 
Vetragspartnern abgeschlossen wird unterscheiden, dann betrachten
wir zwei Zeitachsen.[[xe1:Konzepte;xe2:Bi-Temporale Dokumente]]</p>
                  <ul>
                     <li>
                        <p id="46d3aa4f-711a-488f-bf81-077849243208d6e8">die gültige Zeit (Valid Time)</p>
                     </li>
                     <li>
                        <p id="4163702b-b6e9-40ec-b389-2a8af0afae33d6e11">die Systemzeit (System Time)</p>
                     </li>
                  </ul>
                  <p id="fab57861-93d5-47d3-8046-7b0d2c180b5cd6e13">Für die Vetragspartner ist nur die gültige Zeit relevant. Das Zeitfenster
zwischen gültiger Zeit und Systemzeit ist jedoch in manchen Fällen
ausschlaggebend.</p>
                  <p id="50e4e500-a66d-4744-9730-1e4da489e1f8d6e15">
                     <i id="e607c6b2-4d9a-4652-b8d8-26fc098c3bd7d6e16">Bsp: Kürzlich wurde
meine Geldbörse mit meinem Perso geklaut. Beim Austellen eines vorläufigen
Ausweises wurde ich schriftlich darauf hingewiesen, dass nun mein Perso
bei Interpol zur Fahndung ausgeschrieben ist.</i>
                  </p>
                  <p id="93133dc8-bb02-4da9-b779-64955be86d07d6e17">
                     <i id="96689113-3ef6-49b3-9c2c-dab8e0489a27d6e19">Kurze Zeit später fand ein netter Herr die Geldbörse (ohne Geld aber 
mit allen Papieren) in seinem Garten. Bei einer anschliessenden Busfahrt mit einem
Fernbus, wurde ich bei einer Zollkontrolle festgehalten, da das System der Polizei noch nicht aktualisiert war.</i>
                  </p>
                  <p id="1fee1c3d-dd8b-4649-85ce-5b3d23ecec18d6e19">Ich nehme an, dass nach meiner Unschuldsbekundung der Vorgang auch
auf Seiten des Polizeicomputers aktualisiert wurde. Nun könnte man zwei Fragen
stellen:</p>
                  <procedure type="ol">
                     <step>
                        <action>
                           <p id="5664c21f-b0b1-4c4f-a8f1-251415142a7cd6e23">Ist das Festhalten seitens der Zollbeamten rechtens?</p>
                        </action>
                     </step>
                     <step>
                        <action>
                           <p id="94fb012d-2fbb-4d68-b285-c05ccb98f507d6e26">Habe ich mich durch ein verspätetes Anzeigen des Funds schuldig gemacht?</p>
                        </action>
                     </step>
                  </procedure>
                  <note>
                     <consequence>
                        <p id="f93b1ee9-1f0e-4d60-a375-7e32300f4d41d6e29">Beachte, dass man diese Fragen auch noch nach 10 Jahren stellen
könnte und das - bei meinem Pech in diesen Angelegenheiten - so ein Vorfall auch noch öfters passieren könnte...</p>
                     </consequence>
                  </note>
                  <p id="19976305-dbf8-447b-bf4e-b0e849b7e741d6e31">Um diese Fragen zu beantworten, müsste unsere Datenbank in der Lage sein,
eine [[link]]bitemporale Query[[fn:https://en.wikipedia.org/wiki/Temporal_database*Wikipedia Eintrag zum Thema Temporal Databases mit einer Begriffserklärung]] auszuführen. Zunächst registerieren wir den Vorgang
des Persoverlustes in unserer Marklogic Datenbank:</p>
                  <note>
                     <consequence>
                        <p id="bc4e68d9-d093-46bc-bf26-de40abdc0486d6e34">Da wir hier auf einer XML Datenbank arbeiten, sprechen wir von einem Dokument,
wenn wir einen Datensatz meinen. </p>
                        <p id="e5e49287-034d-456c-bc49-d3e82236edb7d6e38">Der Datensatz bzw. das Dokument wird nicht aktualisiert, sondern stattdessen das Dokument mit den aktualisierten Daten in einer neuen Version angelegt. </p>
                        <p id="e5af2997-aab7-463b-824b-f4de4f4d15f2d6e40">Auf diese Weise bleibt die Änderungshistorie erhalten.</p>
                     </consequence>
                  </note>
                  <verbatim>xquery version "1.0-ml";
import module namespace temporal = 
       "http://marklogic.com/xdmp/temporal" at "/MarkLogic/temporal.xqy";   
let $root :=    
  &lt;vorgang&gt;     
    &lt;perso-id&gt;XYZ&lt;/perso-id&gt;    
    &lt;name&gt;Alex Düsel&lt;/name&gt;   
    &lt;status&gt;gestohlen&lt;/status&gt;
  &lt;/vorgang&gt;
let $options :=   
  &lt;options xmlns="xdmp:document-insert"&gt;     
    &lt;metadata&gt;        
      &lt;map:map xmlns:map="http://marklogic.com/xdmp/map"&gt;          
        &lt;map:entry key="validStart"&gt;            
	  &lt;map:value&gt;2019-02-01T08:23:11&lt;/map:value&gt;          
	&lt;/map:entry&gt;          
	&lt;map:entry key="validEnd"&gt;            
	  &lt;map:value&gt;9999-12-31T11:59:59Z&lt;/map:value&gt;          
	&lt;/map:entry&gt;         
      &lt;/map:map&gt;    
    &lt;/metadata&gt;  

return  temporal:document-insert("/perso-verluste", 
                                 "duesel_alex_270774.xml", 
                                 $root, $options)</verbatim>
                  <p id="34c9ed87-b6df-4fde-bda2-1b868aac4838d6e39">Unser Enddatum liegt in ferner Zukunft sicherzustellen, dass der Vorgang auf unbestimmte Zeit
im System bleibt.</p>
                  <p id="500405f5-6396-4071-8349-1d9f6d39049dd6e41">Drei Tage später hatte ich meinen Ausweis wieder und der Vorgang wurde vier Tage später,
mit dem Status "gefunden" im Polizeicomputer aktualisiert:</p>
                  <verbatim>xquery version "1.0-ml";
import module namespace temporal = 
       "http://marklogic.com/xdmp/temporal" at "/MarkLogic/temporal.xqy";   
let $root :=    
  &lt;vorgang&gt;     
    &lt;perso-id&gt;XYZ&lt;/perso-id&gt;    
    &lt;name&gt;Alex Düsel&lt;/name&gt;   
    &lt;status&gt;<b>gefunden</b>&lt;/status&gt;
  &lt;/vorgang&gt;
let $options :=   
  &lt;options xmlns="xdmp:document-insert"&gt;     
    &lt;metadata&gt;        
      &lt;map:map xmlns:map="http://marklogic.com/xdmp/map"&gt;          
        &lt;map:entry key="validStart"&gt;            
	  &lt;map:value&gt;2019-02-06T08:00:00&lt;map:value&gt;          
	&lt;/map:entry&gt;          
	&lt;map:entry key="validEnd"&gt;            
	  &lt;map:value&gt;9999-12-31T11:59:59Z&lt;/map:value&gt;          
	&lt;/map:entry&gt;         
      &lt;/map:map&gt;    
    &lt;/metadata&gt;  

return  temporal:document-insert("/perso-verluste", 
                                 "duesel_alex_270774.xml", 
                                 $root, $options)</verbatim>
                  <p id="7dbc517d-b5b4-4c1b-b691-7d20f6c61c12d6e48">Nach der Aktualisierung enthält unsere Datenbank logisch gesehen drei Dokumente zu diesem Vorgang, 
die über eine Query gesucht werden können:</p>
                  <procedure type="ol">
                     <step>
                        <action>
                           <p id="d112decc-3611-40d4-b9ca-0a55258e223ed6e52">Das Originaldokument, es ist vom 1.2.2019 bis zum 5.2.2019 im System aktiv</p>
                        </action>
                     </step>
                     <step>
                        <action>
                           <p id="3a23cb95-2f16-4254-8245-c0bf90780a1bd6e55">Die Aktualisierung, sie ist ab dem 6.2.2019 aktiv</p>
                        </action>
                     </step>
                     <step>
                        <action>
                           <p id="9d2d4a7b-bdf2-42e8-a024-cb053a126324d6e58">Ein "Split"-Dokument[[xe1:Split-Dokument]], das aus der verspäteten Aktualisierung resultiert. Es ist ab dem 6.2.2019 im System aktiv, 
und zeigt den Zeitraum über einen Tag, vom 4.2.2019 bis 5.2.2019 - in dem ich ohne Perso registriert war, ihn aber tatsächlich
schon wieder hatte.</p>
                        </action>
                     </step>
                  </procedure>
                  <p id="6dc19f9e-db12-4a7c-83cd-42bb430d2c07d6e60">Im Gegensatz zu einer herkömmlichen Datenhaltung, bei der ein Datensatz aktualisiert wird - ggf. noch eine neue
Version angelegt wird - wird beim Dokument-basierten Ansatz mit bi-temporaler Datenhaltung jede Transaktion separat
abgespeichert. </p>
                  <p id="e1401c45-9a9f-41ec-a7a5-59721215ab2ed6e62">Das ist vergleichbar mit einer Simulation des tatsächlichen Papierverkehrs bei buchhalterischen Tätigkeiten.</p>
                  <p id="b2db7425-9d5b-4429-9ca6-51a67a0a34d0d6e62">Die Abfrage so einer Datenbank ist dadurch nicht einfacher. Drei Queries, die jeweils eines dieser drei
Dokumente zurückgeben, könnten bspw. so aussehen:</p>
                  <p id="acdf48e7-7718-42be-89b9-e04b3860a7a0d6e72">[[subtitle:Rückgabe des Originals]]</p>
                  <verbatim>xquery version "1.0-ml";
cts:search(fn:doc(), cts:period-range-query(
  "system",     
  "ISO_CONTAINS",     
  cts:period(xs:dateTime("2019-02-02T00:00:00"),                
             xs:dateTime("2019-02-03T23:59:59")) )</verbatim>
                  <p id="6d72130d-963a-4908-ac29-70e5fd445d16d6e76">Hier wird geprüft, ob ein Dokument im System aktiv war, dass den Zeitraum vom 2.3. bis zum 3.3. umfasste ([[code:ISO_CONTAINS]]). Diese Query ist erfolgreich und gibt das Original-Dokument des Vorgangs zurück: In diesem Zeitraum war ich also mit gestohlenem Perso registriert.</p>
                  <p id="326f277b-22dc-4247-ac43-a1245718a13ed6e79">[[subtitle:Rückgabe des Split-Dokuments]]</p>
                  <verbatim>xquery version "1.0-ml";
cts:search(fn:doc(), cts:period-range-query(
   "valid",
   "ALN_FINISHES",
   cts:period(xs:dateTime("2019-02-06T08:00:00"),
              xs:dateTime("2019-02-06T08:00:00")) ))</verbatim>
                  <p id="3922ce91-3c33-48c6-8400-666039dec485d6e83">Bei dieser Query wird geprüft, ob es ein Dokument gibt, dass zu einem bestimmten Datum auf inaktiv gesetzt wurde ([[code:ALN_FINISHES]]) - Das Split-Dokument wird automatisch auf inaktiv gesetzt, wenn die neue Version angelegt wird. Unser Suchdatum wäre also folgendes [[code:2019-02-06T08:00:00]].</p>
                  <p id="6d071bab-832d-44ca-862f-cdacf2b3c395d6e85">[[subtitle:Rückgabe von Split und neuer Version]]</p>
                  <verbatim>xquery version "1.0-ml";
cts:search(fn:doc(), cts:period-range-query(
   "system",
   "ALN_AFTER",
   cts:period(xs:dateTime("2019-02-05T11:00:00"),
              xs:dateTime("2019-02-05T11:20:00")) ))</verbatim>
                  <p id="a28b9e0d-50c7-4d25-93f6-092f892cfaf0d6e89">Hier wird geprüft ob es Dokumente gibt, die nach einer bestimmten Zeitspanne im System aktiv waren. Man beachte hier, dass eine Periode angegeben ist, obwohl nur ein Datum notwendig wäre. Der Vergleichsoperator hierzu heisst [[code:ALN_AFTER]].</p>
                  <p id="9a383d4c-8c64-4a96-a7e9-b44018451dc2d6e91">[[subtitle:Rückgabe von aktueller Version]]</p>
                  <verbatim>xquery version "1.0-ml";
cts:search(fn:doc(), cts:period-compare-query(
   "system",
   "ISO_CONTAINS",
   "valid" ))</verbatim>
                  <p id="fd41504a-bbd5-4a2c-b30b-e900a2fc5bbed6e95">Die aktuelle Version kann in Erfahrung gebracht werden, indem geprüft wird, welche gültigen Dokumente innerhalb der Systemzeitspanne liegen. Das kann nur die aktuelle Version sein. Frühere gültige Versionen und Split-Dokumente wären vor der Systemzeit-Spanne.</p>
                  <p id="4f2dcc2f-b93d-4e30-b5e0-b19426c49d74d6e97">Die letzte Version eines Dokuments kann aber auch einfach über ein [[code:latest]] flag in Erfahrung gebracht werden:</p>
                  <verbatim>xquery version "1.0-ml";
cts:search(fn:doc(), cts:and-query((
    cts:collection-query(("koolorder.xml")),
    cts:collection-query(("latest")))))</verbatim>
                  <p id="8a06ef70-7819-46ee-bfb8-8b3d7199f66ad6e102">[[subtitle:Weiterführende Links]]</p>
                  <ul>
                     <li>
                        <p id="3eebe4b0-500c-4caf-a6ef-ec0fb3e6f692d6e110">[[link]]Temporal Developer's Guide auf den MarkLogic Doku-Seiten[[fn:https://docs.marklogic.com/guide/temporal*Quickstart Dokumentation, Understanding, Managing and Searching Temporal Documents]]</p>
                     </li>
                     <li>
                        <p id="5277160a-a715-4227-b2ae-96d9e230a775d6e113">[[link]]A Deep Dive into Bitemporal[[fn:https://www.marklogic.com/blog/bitemporal/*Weiterführender Link zum Thema Bitemporale Dokumente in MarkLogic]]</p>
                     </li>
                     <li>
                        <p id="45286919-c6bc-41e6-841b-dcd6b85d4b05d6e113">[[link]]Temporale Datenhaltung in der Praxis mit Java[[fn:https://www.heise.de/developer/artikel/Temporale-Datenhaltung-in-der-Praxis-mit-Java-2100268.html?seite=all*Temporale Datenhaltung in der Praxis mit Java]]</p>
                     </li>
                  </ul>
               </block>
            </content>
            <chapter hyphenation="yes" chapterpage="no" id="7c58baac-7b83-41b9-adf6-12f63539cbb6"
                     ismodule="no">
               <content>
                  <title id="61bcaead-35e5-4f94-b719-e7708391915f">
                     <title id="a1776d29-3de4-4aeb-9f82-1718bfdb333e">Anlegen des Testszenarios auf der ML Konsole</title>
                  </title>
                  <block>
                     <p id="2104ae8b-6b06-4e0c-902d-b3dcaca2482b">Die Codefragmente aus dem vorherigen Kapitel sind folgend für eine ML Konsolensitzung aufbereitet:</p>
                     <ul>
                        <li>
                           <p id="a626e0cb-bd49-489b-8765-cdb123a70a52d6e10">Anlegen der temporalen Properties: [[code:validStart]], [[code:validEnd]], [[code:systemStart]], [[code:systemEnd]]</p>
                        </li>
                        <li>
                           <p id="7690410f-a848-48ac-9ac1-d2b0c3a7cbf5d6e13">Anlegen der Indizes zum Suchen über Zeitbereiche: [[code:database-range-field-index("dateTime", "systemStart",...]]</p>
                        </li>
                        <li>
                           <p id="8659af6f-9564-4553-a739-941223db12d0d6e16">Anlegen der zwei Zeitachsen [[code:system]] und [[code:valid]][[xe1:Temporale Zeitachsen]]</p>
                        </li>
                        <li>
                           <p id="fc9beb7e-9542-46c0-ae1b-b797b1b3df50d6e19">Anlegen der temporalen Collection [[code:/perso-verluste]]</p>
                        </li>
                        <li>
                           <p id="f7340d19-8dc9-4530-a6b8-40eab7f87459d6e20">Anlegen des Originals am 1.2.2019</p>
                        </li>
                        <li>
                           <p id="ded7a86f-a732-45dd-841d-ad7155ce16dad6e23">Aktualisierung am 6.2.2019</p>
                        </li>
                     </ul>
                     <verbatim>xquery version "1.0-ml";

import module namespace admin = 
  "http://marklogic.com/xdmp/admin" at "/MarkLogic/admin.xqy";
import module namespace temporal = 
  "http://marklogic.com/xdmp/temporal" at "/MarkLogic/temporal.xqy";

declare namespace local = 'local:';
declare variable $db := "alex-test";

declare function local:create-temporal-fields()
{
  let $config := admin:get-configuration(),
      $dbid := xdmp:database($db)
  return 
    try {
      admin:save-configuration(
        admin:database-add-field($config, $dbid, 
        admin:database-metadata-field("validStart"))),
      admin:save-configuration(
        admin:database-add-field($config, $dbid, 
        admin:database-metadata-field("validEnd"))),
      admin:save-configuration(
        admin:database-add-field($config, $dbid, 
        admin:database-metadata-field("systemStart"))),
      admin:save-configuration(
        admin:database-add-field($config, $dbid, 
        admin:database-metadata-field("systemEnd")))
    } catch ($err) {}
};

declare function local:create-range-index-fields() 
{
  let $config := admin:get-configuration(),
      $dbid := xdmp:database($db)
  return
    try {
      admin:save-configuration(
        admin:database-add-range-field-index($config, $dbid, 
        admin:database-range-field-index("dateTime", "validStart", "", fn:true()))),
      admin:save-configuration(
        admin:database-add-range-field-index($config, $dbid, 
        admin:database-range-field-index("dateTime", "validEnd", "", fn:true()))),
      admin:save-configuration(
        admin:database-add-range-field-index($config, $dbid, 
        admin:database-range-field-index("dateTime", "systemStart", "", fn:true()))),
      admin:save-configuration(
        admin:database-add-range-field-index($config, $dbid, 
        admin:database-range-field-index("dateTime", "systemEnd", "", fn:true())))
    } catch ($err) {}  
};

declare function local:create-axes()
{
  try {
    let $t1 := temporal:axis-create(
          "valid",
          cts:field-reference("validStart", "type=dateTime"),
          cts:field-reference("validEnd", "type=dateTime")),
        $t2 := temporal:axis-create(
          "system",
          cts:field-reference("systemStart", "type=dateTime"),
          cts:field-reference("systemEnd", "type=dateTime"))
     return ()
   } catch ($err) {}
};

declare function local:create-temporal-collection() 
{
  try {
    let $t:= temporal:collection-create("/perso-verluste", "system", "valid")
    return ()
  } catch ($err) {}
};

declare function local:insert-original()
{
  let $root := 
    &lt;vorgang&gt;     
      &lt;perso-id&gt;XYZ&lt;/perso-id&gt;    
      &lt;name&gt;Alex Düsel&lt;/name&gt;   
      &lt;status&gt;gestohlen&lt;/status&gt;
    &lt;/vorgang&gt;,
     $options :=   
    &lt;options xmlns="xdmp:document-insert"&gt;     
      &lt;metadata&gt;        
        &lt;map:map xmlns:map="http://marklogic.com/xdmp/map"&gt;          
          &lt;map:entry key="validStart"&gt;            
	          &lt;map:value&gt;2019-02-01T08:23:11&lt;/map:value&gt;          
	        &lt;/map:entry&gt;          
	        &lt;map:entry key="validEnd"&gt;            
	          &lt;map:value&gt;9999-12-31T11:59:59Z&lt;/map:value&gt;          
	        &lt;/map:entry&gt;         
         &lt;/map:map&gt;    
      &lt;/metadata&gt;  
    &lt;/options&gt;
  return  temporal:document-insert("/perso-verluste", 
                                   "duesel_alex_270774.xml", 
                                   $root, $options)
};

declare function local:insert-update()
{
  let $root :=    
    &lt;vorgang&gt;     
      &lt;perso-id&gt;XYZ&lt;/perso-id&gt;    
      &lt;name&gt;Alex Düsel&lt;/name&gt;   
      &lt;status&gt;gefunden&lt;/status&gt;
    &lt;/vorgang&gt;,
    $options :=   
    &lt;options xmlns="xdmp:document-insert"&gt;     
      &lt;metadata&gt;        
        &lt;map:map xmlns:map="http://marklogic.com/xdmp/map"&gt;          
          &lt;map:entry key="validStart"&gt;            
	          &lt;map:value&gt;2019-02-06T08:00:00&lt;/map:value&gt;          
	        &lt;/map:entry&gt;          
	        &lt;map:entry key="validEnd"&gt;            
	          &lt;map:value&gt;9999-12-31T11:59:59Z&lt;/map:value&gt;          
	        &lt;/map:entry&gt;         
         &lt;/map:map&gt;    
      &lt;/metadata&gt;  
    &lt;/options&gt;
  return  temporal:document-insert("/perso-verluste", 
                                   "duesel_alex_270774.xml", 
                                   $root, $options)
};

( xdmp:invoke-function(local:create-temporal-fields#0),
  xdmp:invoke-function(local:create-range-index-fields#0),
  xdmp:invoke-function(local:create-axes#0),
  xdmp:invoke-function(local:create-temporal-collection#0),
  xdmp:invoke-function(local:insert-original#0),
  xdmp:invoke-function(local:insert-update#0))</verbatim>
                     <note>
                        <consequence>
                           <p id="5a2c0418-3a17-42dc-a27e-78dda31bc7f6d6e35">Beachtenswert ist hier,</p>
                           <procedure type="ol">
                              <step>
                                 <action>
                                    <p id="0d69c9fe-a968-4023-919f-a333ec8d1b7dd6e32">dass die einzelnen Schritte als Funktion über [[code:xdmp:invoke-function]] aufgerufen werden. Dieses Konstrukt wird normalerweise benutzt um eine Funktion [[link]]anonym[[fn:https://de.wikipedia.org/wiki/Anonyme_Funktion*Wikipedia Artikel zum Begriff Anonyme Funktion]] zu deklarieren und als Transaktion[[xe1:Transaktionen]] aufzurufen. Marklogic bietet [[link]]weitere Möglichkeiten[[fn:https://docs.marklogic.com/guide/app-dev/transactions*Arbeiten mit Transaktionen in MarkLogic Server]] transaktional zu arbeiten.</p>
                                 </action>
                              </step>
                              <step>
                                 <action>
                                    <p id="da016534-d98c-4116-addc-a8933d7b4e5cd6e35">Um die 5 Tage zwiachen Verlustmeldung und Wiederauffinden zu simulieren, wurde zwischem dem Anlegen der Dokumente ein [[code:xdmp:sleep]] Statement eingefügt.</p>
                                 </action>
                              </step>
                           </procedure>
                        </consequence>
                     </note>
                     <p id="48ff0142-18b5-4135-986c-b4f3baf3550ed6e37">Lassen wir diese Query auf einer frischen Datenbank laufen, so erhalten wir die folgendes Ergebnis:</p>
                     <figure pdfwidth="page">
                        <desc id="5147b2e9-3422-401c-920f-997b9f592d46d6e40">Nach der Ausführung obiger Query gibt es in der DB drei Dokumente, das Orginal, das Split-Dokument und die Aktualisierung. Das Split-Dokuments und das Originals sind als Vorgänger mit Suffix gekennzeichnet.</desc>
                        <img src="./client/data/7c58baac-7b83-41b9-adf6-12f63539cbb6/temporal-documents.png"/>
                     </figure>
                  </block>
               </content>
            </chapter>
            <chapter hyphenation="yes" chapterpage="no" id="62faa067-ecd5-4053-8388-e7e151f04542"
                     ismodule="no">
               <content>
                  <title id="c25b36c1-64f0-4fff-8445-8dc096e98096">
                     <title id="877dafce-2dfe-4a6f-9483-cfe566858b83">Ausführen einiger Beispiel-Queries</title>
                  </title>
                  <block>
                     <p id="2459f527-8e4e-4230-9966-7c387208de9b">Wie im vorherigen Kapitel beschrieben, muss in der Konsolensitzung zwischen Anlegen der Originalversion und der Aktualisierung eine Verzögerung eingebaut werden, um irgendwie das "Zeitloch" zu simulieren, in dem - wenn wir bei dem vorherigen Beispiel bleiben -  der Personalausweis als Verlust gemeldet war, aber tatsächlich schon wieder in meinem Besitz war.</p>
                     <p id="699e7bf9-bd79-4a39-be86-f018583ec67dd6e6">Ohne jetzt groß [[code:validStart]] und [[code:validEnd]] anzupassen, habe ich das Beispiel mit einer Verzögerung von 50 Sekunden lassen:</p>
                     <verbatim>( xdmp:invoke-function(local:create-temporal-fields#0),
  xdmp:invoke-function(local:create-range-index-fields#0),
  xdmp:invoke-function(local:create-axes#0),
  xdmp:invoke-function(local:create-temporal-collection#0),
  xdmp:invoke-function(local:insert-original#0),
  <b>xdmp:sleep(50000),</b>
  xdmp:invoke-function(local:insert-update#0))</verbatim>
                     <p id="16e38ef6-1840-4045-a53b-c4fcf6103b4ad6e10">Und bekomme folgendes Ergebnis:</p>
                     <table pdfwidth="page" id="c4bd0531-72dc-4551-9712-58a21abef158d6e12" pgwide="1"
                            frame="all"
                            scale="50"
                            status="changed">
                        <desc id="8e8cca9e-d53d-42f0-879c-8d992b402763d6e16">Diese Daten wurde aus der Exploreransicht der Konsolensitzung entnommen. </desc>
                        <tgroup id="adec2654-1ba0-479c-a8f8-b4c2a3d8d10cd6e18" cols="5">
                           <colspec id="516f50a0-b221-419d-b2d6-09c0cc26d341d6e19" colwidth="187" colname="col0"/>
                           <colspec id="7df46056-37a7-40a1-9cf2-32ed3da8e445d6e20" colwidth="220" colname="col1"/>
                           <colspec id="cfa176cf-2c4e-422c-bbf6-263b889e6542d6e21" colwidth="222" colname="col2"/>
                           <colspec id="63a9b8ae-ef6d-4707-b250-d1d6fb6a13e2d6e22" colwidth="211" colname="col3"/>
                           <colspec id="3c77a56e-6b50-4f64-9aa5-5309aeb1b00cd6e23" colwidth="225" colname="col4"/>
                           <thead id="ab086331-5232-43ea-a396-539c84043411d6e24">
                              <row id="c703b676-ceea-4337-8bc3-0be503d9eff0d6e25">
                                 <entry id="a38c831e-2b41-43fc-841f-2541260f4362d6e26" colname="col0" width="187px">
                                    <p id="3b858260-3132-4744-822a-388757bf1ca7d6e22">Document</p>
                                 </entry>
                                 <entry id="a798d863-da02-4ce1-9318-b6b28cc38156d6e29" colname="col1" width="220px">
                                    <p id="96fa723c-32d1-4215-8ea6-34f4c4e8d4e0d6e28">validStart</p>
                                 </entry>
                                 <entry id="924879d8-9aa8-4248-b749-547e4fc7262ad6e32" colname="col2" width="222px">
                                    <p id="f3f4d9b2-d393-47f7-88f9-f0bd49c13be2d6e34">validEnd</p>
                                 </entry>
                                 <entry id="367201cd-7123-4686-94f5-8667a546e1aed6e35" colname="col3" width="211px">
                                    <p id="6738e10e-4028-4824-bd5a-2f31fc7276a9d6e37">systemStart</p>
                                 </entry>
                                 <entry id="7be5e796-36a8-4902-8edd-be417d386360d6e38" colname="col4" width="225px">
                                    <p id="abe482e7-7fea-4484-a3bc-7838a551a318d6e40">systemEnd</p>
                                 </entry>
                              </row>
                           </thead>
                           <tbody id="48f8662f-0205-4a49-9839-8df16e624f8cd6e41">
                              <row id="cb9da5ab-4ded-44f3-aae7-88c9c650c9cad6e42">
                                 <entry id="52a166f9-c411-49b9-b6f9-87eddba135d9d6e43" colname="col0" width="187px">
                                    <p id="1c29ef78-25db-4140-b0cf-2434fe62501fd6e33">duesel_alex_270774.2462380991258156208.xml</p>
                                 </entry>
                                 <entry id="0e568e16-fe65-49bf-b44c-51220db80abbd6e46" colname="col1" width="220px">
                                    <p id="05c544a3-7bd5-4253-b5ee-67dabcabfbf4d6e51">2019-03-19T14:17:00</p>
                                 </entry>
                                 <entry id="8fcdd883-5f3f-4462-a4d5-594537b5a3ddd6e49" colname="col2" width="222px">
                                    <p id="7b570410-dfd1-48dc-a64c-5ff7ee9f84d1d6e54">
                                       <b>unendlich</b>
                                    </p>
                                 </entry>
                                 <entry id="b1d0fd29-4485-46ad-9789-766bea1a93c1d6e53" colname="col3" width="211px">
                                    <p id="f84359ce-723b-4894-9c92-ffcea49f4624d6e58">2019-03-19T13:18:28</p>
                                 </entry>
                                 <entry id="91a9cf5b-d17c-41be-b747-04669777faa0d6e56" colname="col4" width="225px">
                                    <p id="093daa5f-3d5f-4d81-beb6-e196c438fcd5d6e61">2019-03-19T13:19:18</p>
                                 </entry>
                              </row>
                              <row id="ba857e5f-8079-4abb-a958-32eeb9be117fd6e59">
                                 <entry id="215d8f42-8e8f-4f3d-be01-817415e4ed25d6e60" colname="col0" width="187px">
                                    <p id="80b154da-dd44-41e9-9478-c6902e4b4bb1d6e41">duesel_alex_270774.819911042637597172.xml</p>
                                 </entry>
                                 <entry id="334978f7-c122-4c7c-aec0-19f4c406f547d6e63" colname="col1" width="220px">
                                    <p id="865093ca-d4e5-4225-a791-45f80ad8fb7ed6e71">2019-03-19T14:17:00</p>
                                 </entry>
                                 <entry id="ec4ac83b-2f17-42a2-9281-1c65af95536cd6e66" colname="col2" width="222px">
                                    <p id="b274b678-7150-4874-a037-23b792835749d6e74">2019-03-19T14:18:00</p>
                                 </entry>
                                 <entry id="45975819-503b-4505-a411-d0a88e810563d6e69" colname="col3" width="211px">
                                    <p id="c41e2883-6169-491b-a011-982003d98c89d6e77">2019-03-19T13:19:18</p>
                                 </entry>
                                 <entry id="93460c01-00fc-411d-b548-cbab125c6150d6e72" colname="col4" width="225px">
                                    <p id="604a1931-45e7-48e9-879c-325749779335d6e80">
                                       <b>unendlich</b>
                                    </p>
                                 </entry>
                              </row>
                              <row id="6e6980c7-5e8e-4c96-b5ba-05037bf540c8d6e76">
                                 <entry id="c5aa1f64-8049-4604-aa7d-2b33e729e72fd6e77" colname="col0" width="187px">
                                    <p id="1a49c7fb-9c2d-420d-aaf7-12f4c3c8c11dd6e49">duesel_alex_270774.xml</p>
                                 </entry>
                                 <entry id="8725032e-d846-4bec-8225-0fb5c0ae5e4ed6e80" colname="col1" width="220px">
                                    <p id="2d55653f-3aff-4633-ab66-6de296a620f7d6e91">2019-03-19T14:18:00</p>
                                 </entry>
                                 <entry id="ee51ec45-cdc3-491a-9cee-ac03bdcbe570d6e83" colname="col2" width="222px">
                                    <p id="59329648-b091-46a1-8e6a-6247f0c7c617d6e94">
                                       <b>unendlich</b>
                                    </p>
                                 </entry>
                                 <entry id="dd806e49-47d1-4e96-a119-22ad01339defd6e87" colname="col3" width="211px">
                                    <p id="22c74575-6baf-4a2b-9da6-1fb880a2b15ed6e97">2019-03-19T13:19:18</p>
                                 </entry>
                                 <entry id="c4ed66d7-2c2e-4ffe-b831-5ad172a41df4d6e90" colname="col4" width="225px">
                                    <p id="79110572-309b-4067-8121-9f9a456f8e1cd6e100">
                                       <b>unendlich</b>
                                    </p>
                                 </entry>
                              </row>
                           </tbody>
                        </tgroup>
                     </table>
                     <p/>
                     <p id="ab1286fb-98c0-432c-bf1f-60bf116968a2d6e90">Wie man sieht, müsste sich jetzt das Zeitloch von 50 Sekunden der Systemzeiten innerhalb der gültigen Zeiten befinden, um das Beispiel mit dem verlorenen Ausweis zumindest für die Zeitspanne von 50 Sekunden simulieren zu können. </p>
                     <p id="6bea37b1-3981-4fda-8afb-6d40e27b4838d6e96">Das korrekte Setup bleibt an dieser Stelle dem geneigten Leser selbst überlassen.</p>
                     <p id="059b400f-b00a-4a79-944c-c54a2cbec2b0d6e93">Zwei Queries, die die Werte in der Tabelle illustriere sind bspw. folgende:</p>
                     <figure pdfwidth="page">
                        <desc id="d1dc83a3-b951-44f1-bf70-e02d7bdc8e75d6e101">Bei dieser Query werden alle Dokumente gesucht, deren gültiger Zeitraum, den Zeitraum zwischen 14:17 Uhr und 14:18 Uhr umfasst. Das sind das Split-Dokument und das Original-Dokument. Beide mit dem Status "gestolen", da erst um 14:18 Uhr der Fund bekannt gegeben wurde.</desc>
                        <img src="./client/data/62faa067-ecd5-4053-8388-e7e151f04542/result1.png"/>
                     </figure>
                     <figure pdfwidth="page">
                        <desc id="9ea26146-dd61-40a8-aa39-a0f51e71ad92d6e105">Verändert man den Zeitraum nach 18:00 Uhr, so wird das Original - wie erwartet - durch das Update verdrängt.</desc>
                        <img src="./client/data/62faa067-ecd5-4053-8388-e7e151f04542/result2.png"/>
                     </figure>
                     <figure pdfwidth="page">
                        <desc id="d1432d45-67a8-4d05-84a2-c51dafb76443d6e109">Die aktuelle Version des temporal verwalteten Dokuments ist in der Collection "<i id="5fb358f2-9a8a-48ce-b92e-2732bb8a695dd6e111">latest</i>" gespeichert.</desc>
                        <img src="./client/data/62faa067-ecd5-4053-8388-e7e151f04542/result_3.png"/>
                     </figure>
                     <p id="b609d2ea-c4d2-4b17-839e-3fc77a984064d6e116">Wie man sie kann man - ausreichend Lösungsphantasie vorausgesetzt - einiges mit diesen Queries anstellen. Hilfreich ist sicherlich auch die umfangreiche Liste der Vergleichsoperatoren, die MarkLogic zum Vergleichen von Zeiträumen bereitstellt: [[link]]ISO Operator[[fn:https://docs.marklogic.com/guide/temporal/searching#id_92200*ISO normierte Operatoren in MarkLogic zum Vergleichen von Zeiträumen]] und [[link]]ALLEN Operators[[fn:https://docs.marklogic.com/guide/temporal/searching#id_98704*Allen (ALN) Vergleichsoperatoren für Zeiträume]].</p>
                  </block>
               </content>
            </chapter>
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="ff0c6d9b-57f8-4463-a65d-58dbfec8d2dc"
                  ismodule="no">
            <content>
               <title id="aaf86c32-9113-4007-a352-4f0fde370520">
                  <title id="be53f14b-df1f-438f-bed4-5b62d0659c1c">MarkLogic Tools</title>
               </title>
               <block>
                  <p id="389da682-4511-40f2-b942-5272545d3bc8">MarkLogic bringt out-of-the-box schon eine Vielzahl an Ansichten und Tools mit. Da aber ein produktiver Applicatione Server nicht auch noch Entwicklerwerkzeuge bündeln sollte, bzw. verhindern sollte, dass irgendwelche halbfertigen Sachen produktiv laufen, das System ggf. verlangsamen und Hintertüren eröffnen, ist es nicht verwunderlich, dass einige interessante Ansichten fehlen, wie z.B. ein Datenbrowser[[xe1:Tools für MarkLogic;xe2:Datenbrowser]] mit Syntaxhighlighting der XML Strukturen.</p>
                  <p id="37e60b8f-6994-45ef-8352-1ff289f3ea8cd6e6">[[chaptertoc]]</p>
               </block>
            </content>
            <chapter hyphenation="yes" chapterpage="no" id="8f729755-73c7-4234-a5b2-77d2ca38a5be"
                     ismodule="no">
               <content>
                  <title id="a94334c5-6336-4fd4-ac7f-3df55368ade8">
                     <title id="b90f365f-bab3-4baa-b39a-bc95ef410819">mlproj - Project and Environment Manager</title>
                  </title>
                  <block>
                     <p id="9cd5cde4-fd3e-4b5b-a90c-beca0cb24a2e">bla bla</p>
                  </block>
               </content>
            </chapter>
            <chapter hyphenation="yes" chapterpage="no" id="7fd62b3e-5e73-4470-ae83-318570ddcb44"
                     ismodule="no">
               <content>
                  <title id="8e2deac6-e32d-4fd3-8478-05002d53efad">
                     <title id="e2dd6fa8-c3ba-4e13-a7c9-e7818b117c97">EXPath Konsole</title>
                  </title>
                  <block>
                     <p id="89198b6a-b14b-4a4d-8128-4953fe8ed0ec">Die [[link]]MarkLogic EXPath Konsole[[fn:https://github.com/fgeorges/expath-ml-console*ML EXPath Konsole auf GitHub]]o ist eine Webanwendung, die ausserhalb des MarkLgic Servers verschiedene Ansichten auf die Daten bereitstellt. Sie umfasst auch einige praktische Tools, wie:</p>
                     <ul>
                        <li>
                           <p id="a37b104e-37e8-4c57-b6d8-abef1270c682d6e8">Package Manager[[xe1:Tools für MarkLogic;xe2:Package Manager]]</p>
                        </li>
                        <li>
                           <p id="3494bd34-a601-4a2f-ae1b-913c799a429cd6e11">Browser (Für Dokumente und Tripel)</p>
                        </li>
                        <li>
                           <p id="e5afcc48-90bf-4459-b24d-6a1ff16079b7d6e14">Document Manager[[xe1:Tools für MarkLogic;xe2:Document Manager]]</p>
                        </li>
                        <li>
                           <p id="ea26454a-867b-41d8-ae97-f7d3510a0ddfd6e17">XQuery Profiler[[xe1:Tools für MarkLogic;xe2:XQuery Profiler]]</p>
                        </li>
                     </ul>
                     <p id="cd92c6f4-820e-4500-bc47-9e172f26ba2ad6e19">Im Rahmen dieser Lektüre wird vorrsusichtlich nur der Browser Answendung finden, weil man damit unkompliziert die Daten sichten kann. Diese werden in einem Editorfenster mit Syntaxhighlightiung dargestellt. Die Anwendung sollte nicht produktiv eingesetzt werden, sondern ist für Entwicklungszwecke gedacht.</p>
                  </block>
               </content>
            </chapter>
            <chapter hyphenation="yes" chapterpage="no" id="632fc504-f5b6-4bed-8f08-5fa0aa26a5bb"
                     ismodule="no">
               <content>
                  <title id="6f1d988d-2a6f-4ce7-82ab-8d7857e00610">
                     <title id="8ab127a1-f7fa-4113-8ab7-9e0d00b2ccdd">mlcp - Content Pump</title>
                  </title>
                  <block>
                     <p id="0bfad7a9-ed2d-4700-bf0f-dc1618b6fe0a">bl abl </p>
                  </block>
               </content>
            </chapter>
         </chapter>
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="b3eba8f1-fb04-4ab5-ac92-5f52c80d1936"
               ismodule="no">
         <content>
            <title id="ba5023e4-3ff9-48e4-a374-1012493b75c2">
               <title id="05ed1e37-8006-4bb7-ba6a-7c143ff22106">Testing</title>
            </title>
            <block>
               <p id="2523e9e2-9c65-4cde-bc30-c4f38cab8d31">In diese Kapitel werden einige ausgewählte Themen zum Testing von XSLT und XQuery Programmen dargestellt. Dabei geht es weder um Vollständigkeit noch um die beste/eleganteste Lösung, sondern eher um die Vorstellung eines Anwendungsszenarios mit einem potentiellen Lösungsansatz.</p>
            </block>
         </content>
         <chapter hyphenation="yes" chapterpage="no" id="6fd7b270-9d1f-4f8e-996f-13b5862956a9"
                  ismodule="no">
            <content>
               <title id="9d32e957-a332-40f5-bcbd-52fd6ed7f7da">
                  <title id="a693fc99-5e16-4788-95a0-958870aa845a">Validierung mit Schematron</title>
               </title>
               <block>
                  <p id="4e6cde2f-795e-42a2-97a3-67b0c72db22a">Um die Korrektheit einer XML Instanz zu prüfen, gib es verschiedene Schemata, wie XSD, RNG oder DTD[[xe1:Schemata]], welche der Parser beim Aufbau des DOM Baums heranzieht. Eine Validierung[[xe1:Verarbeitungsmethoden;xe2:Validierung]] mit Apache Xerces könnte beispielsweise als Java Code[[xe1:Programmiersprachen;xe2:Java]] folgendermaßen angestossen werden:</p>
                  <verbatim>URL schemaFile = new URL("http://host:port/filename.xsd");
Source xmlFile = new StreamSource(new File("web.xml"));
SchemaFactory schemaFactory = SchemaFactory
    .newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
try {
  Schema schema = schemaFactory.newSchema(schemaFile);
  Validator validator = schema.newValidator();
  validator.validate(xmlFile);
  System.out.println(xmlFile.getSystemId() + " is valid");
} catch (SAXException e) {
  System.out.println(xmlFile.getSystemId() + " is NOT valid reason:" + e);
} catch (IOException e) {</verbatim>
                  <p id="e0f8f3a8-ac48-4040-aa61-6d98bf685133d6e8">Schema Dateien können aber auch in XML Editoren eingebunden werden, um schon während der Eingabe der XML Instanz die Korrektheit zu überprüfen. </p>
                  <p id="3920a1e6-ddfe-499f-997b-33b7b330ae55d6e10">Das geht einerseits über die Angabe des Doctypes in der XML Instanz, anderseits bieten auch alle Editoren die Möglichkeit ein bestimmtes Schema explizit auszuwählen, um gegen dieses auf Anforderung zu validieren.</p>
                  <p id="0c8bf04d-6ef7-4b2b-9e36-3c115fdf5657d6e10">Gilt es komplexere Businessregeln zu überprüfen, die über Syntax-, Konsistenz- und einfache Korrektheitschecks hinausgehen, empfiehlt sich eine Validierung mit Schematron Regeln.</p>
                  <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                           id="a99e14e5-6fc7-44a9-9692-cdf9799bf8bcd6e14">
                     <content>
                        <title id="a99e14e5-6fc7-44a9-9692-cdf9799bf8bcd6e14">
                           <title id="c802dd14-5953-4c24-8637-f7552d107e57d6e13">Schematron ist XSLT</title>
                        </title>
                        <p id="c7d6f54a-c183-4238-8fcd-65258833ebd9d6e15">Bei einer Schematron Validierung wird eine XML Instanz mit Hilfe eines automatisch generierten XSLT Stylesheets überprüft. Dieses kontextabhängige Stylesheet wird aus einer in der Schematron Syntax vom Autor verfassten Regelbasis, die wiederum in XML vorliegt, über ein zweites XSLT Stylesheet generiert - Dieses zweite XSLT Stylesheet ist sozusagen das eigentliche Schematron Programm. </p>
                        <p id="ca8d184a-924b-4ea6-bdab-3340c1bde072d6e19">Das folgende Diagramm veranschaulicht die Vorgehensweise anhand eines Filter-Szenarios[[xe1:Verarbeitungsmethoden;xe2:Filter-Szenario]], bei dem ein XML Dokument mit einigen ungültigen Passagen in eine gefilterte Darstellung überführt wird.</p>
                        <figure pdfwidth="page">
                           <subtitle id="993d666e-3e17-4923-ba3a-6fb018a7c01ad6e23">Schematron Validierung mit Filter</subtitle>
                           <desc id="d65d8a95-ace6-4cbd-9511-7c1401841a92d6e25">Einfacher Batch-Prozess zur Validierung mit Schematron und anschliessendem Filtern der Ergebnisse</desc>
                           <img src="./client/data/6fd7b270-9d1f-4f8e-996f-13b5862956a9/schematron.svg"/>
                        </figure>
                        <p id="4e1ec9a6-9a1a-470b-9e86-2708788be97bd6e19">Zu finden ist das [[link]]Schematron Repo auf Github[[fn:https://github.com/Schematron/schematron*Schematron auf GitHub]]. Dieses Repo ist etwas unübersichtlich. Der relevante Teil des Sourcecodes befindet sich unter: [[code:schematron/code]]</p>
                     </content>
                  </chapter>
                  <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                           id="2b2ab092-e67f-4ed4-bbed-89270aead234d6e30">
                     <content>
                        <title id="2b2ab092-e67f-4ed4-bbed-89270aead234d6e30">
                           <title id="0cc5ca05-4506-44eb-981b-f74a156e6da0d6e20">CLI Verwendung</title>
                        </title>
                        <p id="3f68c067-cd95-4b41-b51b-c594057af29fd6e22">Um die Schematron XSLT Skripte in eine eigene XSLT Anwendung per Kommandozeile einzubinden, könnte man folgendermassen vorgehen: </p>
                        <ul>
                           <li>
                              <p id="59142162-ceef-41df-a800-9a82f41eaff6d6e30">Im eigenen GIT Projekt das Schematron Projekt als Submodule referenzieren.</p>
                           </li>
                           <li>
                              <p id="8a62a1b3-7fee-435a-bf97-c1948afb372ed6e33">Eine Regelbasis anlegen, beispielsweise [[code:$project_name.sch]].</p>
                           </li>
                           <li>
                              <p id="eab4b247-bdc0-4465-bc93-a032e7705a07d6e39">Zwei Batch-Skripte anlegen, beispielsweise [[code:generate_schema.sh]] und [[code:validate.sh]].</p>
                           </li>
                        </ul>
                        <p id="998bb486-7c42-4af2-8e5b-0e85e56dc38ad6e50">Mittels des Skripts [[code:generate_schema.sh]] wird aus der Schematron Regelbasis das Schematron XSLT Stylesheet generiert. Der Inhalt dieser Batchdatei könnte zum Beispiel so aussehen:</p>
                        <verbatim>saxon $script_dir/$project_name_validation.sch $script_dir/schematron/iso_dsdl_include.xsl
 | \ saxon -s:- $script_dir/schematron/iso_abstract_expand.xsl | \
saxon -s:- $script_dir/schematron/iso_svrl_for_xslt2.xsl \
  <b>generate-fired-rule</b>=false &gt; $script_dir/$project_name_validation.xsl</verbatim>
                        <p id="7be99f5c-fe71-459c-8ddf-9f08385e9169d6e54">Der Prozess zum Erzeugen des projektspezifischen Validerungs-XSLT-Skripts ist dreistufig und wird über die folgenden XSLT Schritte abgearbeitet.</p>
                        <ul>
                           <li>
                              <p id="eb1a9bae-260a-4106-b5c9-b6851fdd2ba1d6e58">iso_dsdl_include.xsl</p>
                           </li>
                           <li>
                              <p id="a82297e3-5906-4320-99eb-713788e3b883d6e61">iso_abstract_expand.xsl</p>
                           </li>
                           <li>
                              <p id="cab1d34a-07d6-4707-8cfd-1a22273d0703d6e64">iso_svrl_for_xslt2.xsl</p>
                           </li>
                        </ul>
                        <p id="315b3655-c795-42e1-908a-769f2ca0b68cd6e66">Herauszufinden, was in diesen Skripten passiert, sei dem geneigten Leser selbst überlassen. Uns interessiert an dieser Stelle nur das Resultat, nämlich das XSLT Stylesheet [[code:$project_name_validation.xsl]].</p>
                        <p id="a226a2f6-4408-401b-b164-9ee358f8bd09d6e76">Dieses Skript wird in der Batchdatei [[code:validate.sh]] aufgerufen:</p>
                        <verbatim>saxon $xml_instance_to_check.xml $script_dir/$project_name_validation.xsl \
  &gt; $validation-result.xml</verbatim>
                        <p id="bd569a63-55f0-4524-bb53-0d3eeb1bdb59d6e83">Die Ausgabe dieses Prüfprozesses ist eine XML Datei mit den Fehlern in der Eingabe-XML-Instanz, die weiterverarbeitet werden kann, beispielsweise als Filterkriterium für einen nachfolgenden Prozessschritt. Ihr Inhalt dieser Datei sieht z.B. wie folgt aus:</p>
                        <verbatim>&lt;svrl:schematron-output xmlns:svrl="http://purl.oclc.org/dsdl/svrl" [...]
  &lt;svrl:active-pattern document="file:/Users/alex/xml_instance_to_check.xml" 
   id="default" name="default"/&gt;
  &lt;svrl:failed-assert test="count(key('unique-ids', current()))=1"&gt;
    &lt;svrl:text&gt;ID is not unique!&lt;/svrl:text&gt;
    &lt;svrl:diagnostic-reference diagnostic="default"&gt;
      &lt;bk:id xmlns:bk="http://tekturcms/namespaces/book"&gt;1234-5678-9&lt;/my:id&gt;
    &lt;/svrl:diagnostic-reference&gt;
  &lt;/svrl:failed-assert&gt;
  [...]</verbatim>
                        <p id="62973ac6-dca8-47cf-b4aa-8e5b6c4242a6d6e88">Neben den [[code:svrl:failed-assert]] Elementen, die angeben, was bei der überprüften XML-Instanz fehlgeschlagen ist, gibt es auch die Möglichkeit sich positive Ergebnisse anzeigen zu lassen - über das Element [[code:svrl:successful-report]].</p>
                        <p id="a939cc7b-99b0-401a-8bc5-5b0c0f41882cd6e100">Konkret bedeutet das obige XML Schnipsel, dass unsere [[code:id]] mit dem Wert [[code:1234-5688-9]] im geprüften XML Dokument nicht eindeutig ist. Die Schematron Regelbasis, die wir zur Überprüfung angegebenen haben, sieht so aus:</p>
                        <verbatim>&lt;schema xmlns:sch="http://purl.oclc.org/dsdl/schematron" [...]
  &lt;xsl:key name="unique-ids" match="bk:id" use="."/&gt;
  &lt;sch:let name="date-regex" value="'^((19|2[0-9])[0-9]{2})-(0[1-9]|1[012])
                                     -(0[1-9]|[12][0-9]|3[01])$'"/&gt;
  &lt;sch:pattern id="default"&gt;
    &lt;sch:rule context="book"&gt;
      &lt;sch:assert id="check-book-id" role="error" test="count(key('unique-ids', bk:id))=1" 
                  diagnostics="default"&gt;ID is not unique!&lt;/sch:assert&gt;
      &lt;sch:assert id="check-book-published" role="error" 
                  test="matches(bk:published,$date-regex)
    &lt;/sch:rule&gt;
    [...]
  &lt;/sch:pattern&gt;
  &lt;sch:diagnostics&gt;
    &lt;sch:diagnostic id="default"&gt;
      &lt;xsl:element name="bk:id"&gt;
        &lt;xsl:value-of select="bk:id"/&gt;
      &lt;/xsl:element&gt;
    &lt;/sch:diagnostic&gt;
  &lt;/sch:diagnostics&gt;</verbatim>
                        <p id="86e8f330-f639-42dd-98da-7eebba76fb51d6e108">Neben der "successful" und "failed" Regeln ist auch die Deklaration von Funktionen und Variablen im Body der Regelbasis erlaubt. Dies ermöglicht komplexe Bedingungen, bespw. durch das Nachschlagen in einer Lookup-Tabelle abzuprüfen. </p>
                     </content>
                  </chapter>
               </block>
            </content>
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="cc183707-5352-4c9c-9c31-68047a882d0f"
                  ismodule="no">
            <content>
               <title id="821f8271-e9a1-43e8-ba9a-b1e8aa0ce4f4">
                  <title id="9b1e7086-25cc-4bdf-ba77-6adfb503603b">Erste Schritte mit Xspec</title>
               </title>
               <block>
                  <p id="eef21ef4-793e-4fef-9f1e-a22ecf24b64c">XSpec[[xe1:Tools;xe2:XSpec]] ist ein [[link]]Test-Framework[[fn:https://github.com/xspec*XSpec auf GitHub]][[xe1:Test-Framework]] für XSLT, XQuery und Schematron. 
Um beispielsweise komplexe Schematron Regeln zu testen, hinterlegt man in einem <b>Test-Szenario</b> 
Erwartungswerte für positive und negative Testfälle in Form von XML Schnippseln.</p>
                  <verbatim>&lt;test-szenario&gt;
  &lt;testfall&gt;
    &lt;personen&gt;
      &lt;person&gt;
        &lt;vorname&gt;Horst&lt;/vorname&gt;
        &lt;nachname&gt;Schlämmer&lt;/nachname&gt;
        &lt;gewicht&gt;100&lt;/gewicht&gt;
      &lt;/person&gt;
      &lt;person&gt;
        &lt;vorname&gt;Gundula&lt;/vorname&gt;
        &lt;nachname&gt;&lt;/nachname&gt;
        &lt;gewicht&gt;60&lt;/gewicht&gt;
      &lt;/person&gt;
    &lt;/personen&gt;
  &lt;/testfall&gt;
&lt;/test-szenario&gt;</verbatim>
                  <p id="a495ec01-4794-4e28-b47f-0313ab934100d6e26">in einer XSpec Datei *. werden <b>Assert- und Not-Assert-Methoden</b> [[xe1:Assert- und Not-Assert]]deklariert:</p>
                  <verbatim>&lt;x:description xslt-version="2.0" xmlns:x="http://www.jenitennison.com/xslt/xspec" 
               schematron="test.sch"&gt;
  &lt;x:scenario label="ALL"&gt;
    &lt;x:context href="test.xml"/&gt;
    &lt;x:expect-not-assert id="person-nachname-rule" location="//person[1]/nachname"/&gt;
    &lt;x:expect-assert id="person-nachname-rule" location="//person[2]/nachname"/&gt;
  &lt;/x:scenario&gt;
&lt;/x:description&gt;</verbatim>
                  <p id="9aac4097-bb50-44d5-8827-bd1775ce18fcd6e39">Grds. bdeutet ein Assert, dass das Mapping zwischen tatsächlichem Wert und Erwartungswert des
Testfalls[[xe1:Testfall]] positiv erfüllt ist. Beim Not-Assert ist das Gegenteil der Fall. Im obigen Beispiel
reichen zwei Regeln, um den Testfall vollständig abzudecken.</p>
                  <p id="350b086a-a78e-47cc-9a3e-4f8c596fadf4d6e41">Wenn man Schematron[[xe1:Tools;xe2:Schematron]] Regeln mit Hilfe von XSpec testen will, dann muss man ein bisschen um 
die Ecke denken. Denn auch diese Regeln werden mittels Assert und Not-Assert modelliert.</p>
                  <verbatim>&lt;sch:schema xmlns:sch="http://purl.oclc.org/dsdl/schematron" 
            xmlns:xsl="http://www.w3.org/1999/XSL/Transform" queryBinding="xslt2"&gt;
  &lt;sch:pattern id="main"&gt;
    &lt;sch:rule context="nachname"&gt;
      &lt;sch:assert id="person-nachname-rule" role="error" test="normalize-space(.)"&gt;
        Der Nachname der Person mit ID: &lt;sch:value-of select="@id"/&gt; fehlt! 
      &lt;/sch:assert&gt;
    &lt;/sch:rule&gt;
  &lt;/sch:pattern&gt;
&lt;/sch:schema&gt;</verbatim>
                  <p id="5da4afab-3eda-4027-956a-1e72b6dd19b3d6e48">In der Schematron-Regel wird zugesichert (Assert), dass jede Person einen Nachnamen hat.</p>
                  <p id="6d2dba49-cecd-4315-8956-4beb19e4af08d6e50">Hat sie keinen Nachnamen so wird der Bericht zum Fehlerfall in die Schematron Ergebnisdatei
geschrieben. Diese Datei wertet nun Xspec aus.</p>
                  <note>
                     <consequence>
                        <p id="611d787d-7b54-46dd-9548-158dd6db0bfcd6e53">Erscheint ein Fehler (= das Feld <b>nachname</b> ist leer), so greift bei Xspec die Assert-Regel! Das ist die umgekehrte Logik zu den Schematron Regeln.</p>
                     </consequence>
                  </note>
                  <p id="1ed9b5fd-88c2-4a6b-998b-6eac55854ec7d6e58">Als Eselsbrücke kann man
ein Assert in der Xspec Datei gleichsetzen mit <b>Appear</b> und ein Not-Assert mit
<b>Not-Appear</b>. [[xe1:Tipps und Tricks;xe2:Appear- und Not-Appear]]</p>
                  <p id="5f9a44b2-0d88-4bf3-81f2-d93a28301049d6e67">Ein Assert sichert also zu, dass sich ein Fehlerbericht in der
Schematron Ergebnisdatei zum Testfall befindet. Ein Not-Assert sichert zu, dass
sich kein Fehlerbericht befindet. </p>
                  <p id="23ee0dc1-c910-43f7-a86b-442562947535d6e69"> Wie man sich leicht vorstellen kann, sind Assert-Regeln in diesem Fall leicht zu finden,
dazu muss man nur die Schematron Testregeln ins Leere zeigen lassen. Alles ist grün
und alles ist gut - dem Augenschein nach.</p>
               </block>
            </content>
         </chapter>
      </chapter>
   </chapter>
   <chapter hyphenation="yes" chapterpage="no" id="f606e9c6-3d46-48f3-8de4-46e13dc7d055"
            ismodule="no">
      <content>
         <title id="47df7a71-2ba1-4bde-bbc0-3ec379ec6ac5">
            <title id="e4c14d2b-d2df-4a76-ac0c-4ecebfe223ae">Zusätzliches Know-How</title>
         </title>
         <block>
            <p id="07696fff-994c-406a-8d47-cb3b1aa0ef48">Unsortierte Notizen, die für jeden XSLT-Programmierer interessant sein könnten.</p>
            <p id="707b4c12-c8dd-4192-8514-34dbeeb39e2fd6e6">[[chaptertoc]]</p>
         </block>
      </content>
      <chapter hyphenation="yes" chapterpage="no" id="7dbb15ce-bbc5-4d91-b977-ed7e8117730e"
               ismodule="no">
         <content>
            <title id="b1719307-52da-4e1d-9aee-a3a6bb139d92">
               <title id="5d677796-4ebf-49b1-85ba-45315312a0e4">GIT Einmaleins </title>
            </title>
            <block>
               <p id="c2e52685-e1e6-417d-8e94-2d5367436ccb">Im Fachbereich Technische Dokumentation wird neue Technologie ein bisschen langsamer adaptiert, als in anderen Disziplinen der IT - schliesslich muss ja erst alles dokumentiert werden ...</p>
               <p id="24285d0d-c75e-44d5-82a9-c7c4153549e7d6e6">Bei Versionsverwaltungssystemen ist das nicht anders. Doch inzwischen hat auch GIT[[xe1:Tools;xe2:GIT]] in manchen Entwicklerbüros Einzug gehalten und verdrängt Subversion.</p>
               <p id="9b7be9ab-cc3d-46ae-adeb-c0b506eda947d6e8">Ein Grund an dieser Stelle einmal zumindest die wichtigsten Befehle aufzulisten - Note to self:</p>
               <verbatim>GIT COMMANDS

CLONE
=====
git clone https://github.com/libgit2/libgit2
SIMPLE
======
git init
git add *
git commit -m "Form validation added”
[changes]
git add [changed files] or git commit -a
git diff —cached
git branch experimental
git checkout experimental
git commit -a -m "only in the experimental branch”
git checkout master
git merge experimental
git branch -d experimental

COLLABORATION
=============
push new branch git push -u origin newLocalBranch
bob$ git clone /home/alice/project myrepo
(edit files)
bob$ git commit -a
alice$ cd /home/alice/project
alice$ git pull /home/bob/myrepo master  (fetch &amp; merge)
(fetch and not merge)
alice$ git fetch /home/bob/myrepo master
alice$ git log -p HEAD..FETCH_HEAD
(visualization only)
gitk HEAD..FETCH_HEAD
gitk HEAD…FETCH_HEAD
—
git log
git show ea14 (firs chars is enough)
git grep "headline_font_size” v2.5

PULL REQUESTS
=============
(checkout branch)
git pull origin simple-examples
(changes)
git push origin simple-examples
Create a pull request using the form on the Github page and assign it to a Reviewer

MERGE CONFLICTS
===============
git pull origin master
=&gt; merga conflicts

TROUBLE SHOOTING
=================
git reset --hard origin/master
git tree
git status
git checkout 118886ee3f06738b53f089433078d35f4d70a8f9 vendor/error-report.xsl
git log --diff-filter=D --summary</verbatim>
            </block>
         </content>
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="4100d43a-5b71-43ba-a05f-1063fcee8679"
               ismodule="no">
         <content>
            <title id="24e125c5-f411-4698-9e68-19ab7ba0f302">
               <title id="46cfa469-01ec-434d-ab13-e24ce0b06467">XML Editoren </title>
            </title>
            <block>
               <p id="d64ff6f9-5ce2-4143-9cde-da10e57ac3e0">Der XSLT Styesheet-Entwickler wird sich  gewöhnlich mit Eingabedaten beschäftigen, die entweder automatisch mittels irgendeines Prozesses erzeugt wurden, oder die durch einen menschlichen Autor mit einem XML Editor[[xe1:Tools;xe2:XML Editor]] eingegeben wurden.</p>
               <p id="e047af65-643f-4cc0-8bd5-36f99fb92872d6e6">Aus diesem Grund ist es ganz nützlich, die wichtigsten Editoren zu kennen. Wir unterscheiden zwischen Desktopapplikationen und Webanwendungen. Ausserdem unterscheiden wir noch ob der Editor WYSIWIG (<b>W</b>hat <b>Y</b>ou <b>S</b>ee <b>I</b>s <b>W</b>hat <b>Y</b>ou <b>G</b>et) oder WYSIWYM (<b>W</b>hat <b>Y</b>ou <b>S</b>ee <b>I</b>s <b>W</b>hat <b>Y</b>ou <b>M</b>ean) [[xe1:WYSIWYG und WYSIWYM]] unterstützt oder eine Mischung aus beidem darstellt.</p>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="45392571-40bf-42cc-91a8-73db7cc25bced6e52">
                  <content>
                     <title id="45392571-40bf-42cc-91a8-73db7cc25bced6e52">
                        <title id="346853d6-4d45-42f4-a7b8-77af38d96151d6e9">WYSIWYM Desktop</title>
                     </title>
                     <table type="dl">
                        <tgroup>
                           <colspec colwidth="100"/>
                           <colspec colwidth="300"/>
                           <tbody>
                              <row>
                                 <entry>
                                    <b>Editor</b>
                                 </entry>
                                 <entry>
                                    <b>Beschreibung</b>
                                 </entry>
                              </row>
                              <row>
                                 <entry>[[link]]XMetal[[fn:XM;https://xmetal.com/*Homepage des Desktop XML Editors XMetal]]</entry>
                                 <entry>
                                    <p id="cb6834ed-7af9-4195-81e1-e2a73a38c6fdd6e21">XMetal ist wahrscheinlich der am weitesten verbreitete reine WYSIWYM Editor. Er hat Schnittstellen zu COM und Java und kann daher in eigene CMS integriert werden.</p>
                                 </entry>
                              </row>
                              <row>
                                 <entry>[[link]]Arbortext XML Editor[[fn:EP;https://www.ptc.com/en/products/service-lifecycle-management/arbortext/editor*Website zum Arbortext XML Editor]]</entry>
                                 <entry>
                                    <p id="5585d7ce-8de9-4306-bdfe-6ac2941a7ac8d6e27">Arbortext XML Editor, früher bekannt als EPIC ist sehr betagt. Ich hatte damit im Bereich Luftfahrt/Verteidigung zu tun. Bekanntermassen ist sein Tabelleneditor etwas buggy.</p>
                                 </entry>
                              </row>
                           </tbody>
                        </tgroup>
                     </table>
                  </content>
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="31915e1f-7aa0-4ad3-b409-699f176fb8b9d6e73">
                  <content>
                     <title id="31915e1f-7aa0-4ad3-b409-699f176fb8b9d6e73">
                        <title id="4c42f7f1-6d2a-482d-8d84-2c500fb35927d6e74">WYSIWYG Desktop</title>
                     </title>
                     <p id="fb2fd093-aad8-48f0-9a96-343cee2e42bdd6e76">XMetal kann so konfiguriert werden, dass bei einer einfachen DTD der Content Bereich wie Word aussieht. Auch Code Editoren, wie OxygenXML[[xe1:Tools;xe2:oXygen XML Editor]] bieten diese Möglichkeit. Das Key-Handling bei dieser Variante zeigt aber schnell, dass die UX noch weit von herkömmlichen Textverarbeitungssystem, wie Word oder OpenOffice entfernt ist.  </p>
                  </content>
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                        id="b919f7f3-3120-40b9-8c25-d2879cf6fa4fd6e78">
                  <content>
                     <title id="b919f7f3-3120-40b9-8c25-d2879cf6fa4fd6e78">
                        <title id="092992f0-ac89-4bd8-bba5-a1d685135135d6e79">WYSIWYM Online</title>
                     </title>
                     <table type="dl">
                        <tgroup>
                           <colspec colwidth="100"/>
                           <colspec colwidth="300"/>
                           <tbody>
                              <row>
                                 <entry>
                                    <b>Editor</b>
                                 </entry>
                                 <entry>
                                    <b>Beschreibung</b>
                                 </entry>
                              </row>
                              <row>
                                 <entry>[[link]]Oxygen XML WebAuthor[[fn:OX;https://www.oxygenxml.com/oxygen-xml-web-author/app/oxygen.html*Der oXygen XML Web Editor im Web]]</entry>
                                 <entry>
                                    <p id="0b6ae152-3e48-4709-8073-28938196c41ad6e91">Dieser Online-Editor verwendet auf der Serverseite dieselbe Logik, wie das Desktop Programm des Herstellers. Das führt dazu, dass bei jedem Tastendruck eine Verbindung zum Server aufgebaut wird, und die Verarbeitung langsam werden kann. Zum Betrieb und bzgl. Customizing ist einschlägiges Java-Know-How erforderlich.</p>
                                 </entry>
                              </row>
                              <row>
                                 <entry>[[link]]FontoXML[[fn:FX;https://www.fontoxml.com/*FontoXML Webeditor]]</entry>
                                 <entry>
                                    <p id="1cf21f71-5f4d-46bb-a306-73d15aaef7ddd6e97">FontoXML sieht schon fast aus wie Word. Neben der WYSWYG/M Darstellung, kann auch die XML Struktur in einem Seitenpanel angezeigt werden.</p>
                                 </entry>
                              </row>
                              <row>
                                 <entry>[[link]]XEditor[[fn:XE;http://www.xeditor.com/portal*Homepage des webbasierten XEditors]]</entry>
                                 <entry>
                                    <p id="d4aab4c9-ab75-497f-86c0-e573c4cd30efd6e103">Xeditor benutzt XSLT Transformationen, um aus der Eingabe die Editoransicht zu generieren. Beim Abspeichern wird der umgekehrte Weg bestritten. Das mag zwar auf den ersten Blick etwas holprig erscheinen, wie aber auch Tektur beweist, funktioniert das ganze recht gut und schnell.</p>
                                 </entry>
                              </row>
                              <row>
                                 <entry>[[link]]Xopus[[fn:XO;http://xopusfiddle.net/VT7T/3/*Homepage des veralteten Xopus XML Editors]]</entry>
                                 <entry>
                                    <p id="d22b2f1a-87dc-4572-8f73-c46dd27025ccd6e109">Xopus ist wohl der älteste web-basierte XML Editor. Ich hatte damit schon 2008 zu tun, als er für ein Redaktionssystem evaluiert wurde. Wir haben uns dann für eine eigene nicht-generische Lösung basierend auf dem Webeditor CKEditor entschieden.</p>
                                 </entry>
                              </row>
                           </tbody>
                        </tgroup>
                     </table>
                     <p id="aea8f9ce-93a4-43c5-9625-30d47a1d71b1d6e111">Das Customizing dieser Editoren erfordert einen sehr hohen Aufwand. Es müssen diverse Ressourcen angepasst werden, wie XSLT Skripte, XSD Schemas, CSS und Javascript. Das Schema wird meist über Kommandozeilentools in eine JS Repräsentation überführt. </p>
                     <p id="7e90f1c7-bbc5-47b2-b1f3-1bc5422286b1d6e113">Aus diesem Grund bieten einige Hersteller spezielle Schulungen an, wo man die Bedienung erlernen kann. Aus meiner Sicht ist das Problem "Webbasierter XML Editor" weltweit noch nicht ausreichend gelöst.</p>
                     <p id="bc2730d6-95a5-4f11-9eed-0d14ca6bf767d6e115">Die Kosten für den Betrieb rangieren um die 1000 EUR monatl. für ein 20 Benutzer-Setup.</p>
                  </content>
               </chapter>
            </block>
         </content>
      </chapter>
   </chapter>
   <chapter hyphenation="yes" chapterpage="no" id="3dfad2c2-2299-461a-9d80-42237bbb5e89"
            ismodule="no">
      <content>
         <title id="c1678e74-d15c-42a1-9fd0-912fced210ef">
            <title id="fab91e1c-40b2-4fa4-8137-87e27882221d">[[glossary]]</title>
         </title>
         <block>
            <table type="dl">
               <tgroup>
                  <colspec colwidth="100"/>
                  <colspec colwidth="300"/>
                  <tbody>
                     <row>
                        <entry>
                           <b>Begriff</b>
                        </entry>
                        <entry>
                           <b>Beschreibung</b>
                        </entry>
                     </row>
                     <row>
                        <entry>Core-Stylesheet</entry>
                        <entry>
                           <p id="f9c16370-65fa-43ba-bd9b-b5e720ee11a0d6e14">In einem Stylesheet-Projekt bezeichnet das Core-Stylesheet eine bereits ausgiebig getestete Variante, die mittels Sub-Stylesheet unter Ausnutzung der XSLT Import Präzedenz überschrieben wird.</p>
                        </entry>
                     </row>
                     <row>
                        <entry>Sub-Stylesheet</entry>
                        <entry>
                           <p id="83fe0f23-8fb2-48e5-b6c5-e882aadbe51ed6e20">Ein Sub-Stylesheet spezialisiert das Core-Stylesheet, damit Redundanz vermieden wird und somit die Wartbarkeit gewährleistet werden kann.</p>
                        </entry>
                     </row>
                     <row>
                        <entry>Parameterisierung</entry>
                        <entry>
                           <p id="3164dd67-7751-43e2-b3be-0fcf81d4465bd6e26">Bei der Parameterisierung wird ein bestehendes Stylesheet mit Parametern versehen, um für möglichst viele Produktvarianten und Ausgabeformate die gleiche Codebasis wiederverwenden zu können. Dadurch soll Redundanz eingespart werden und der Aufruf vereinfacht werden.</p>
                        </entry>
                     </row>
                     <row>
                        <entry>Topic Based Authoring</entry>
                        <entry>
                           <p id="7acb0827-bd9f-420e-85ad-9a55d6676669d6e32">Beim Topic Based Authoring steht nicht das gesamte Buch im Vordergrund, sondern der Inhalt wird in wiederverwendbare Topics aufgeteilt, die dann in verschiedenen Publikationen wiederverwendet werden können. </p>
                        </entry>
                     </row>
                     <row>
                        <entry>DITA</entry>
                        <entry>
                           <p id="26870915-35a0-46d2-b209-3033c421d628d6e38">DITA ist ein Informationsmodell für die Technische Dokumentation.</p>
                        </entry>
                     </row>
                     <row>
                        <entry>SGML</entry>
                        <entry>
                           <p id="1b3d05e6-f3c3-4d3f-9e84-40105bb8a907d6e44">SGML ist der Vorläufer von XML.</p>
                        </entry>
                     </row>
                     <row>
                        <entry>TIOBE Index</entry>
                        <entry>
                           <p id="34b180ff-1755-4e48-93cb-68d1e780f287d6e50">Im TIOBE Index wird jährlich die Beliebtheit von Programmiersprachen erfasst.</p>
                        </entry>
                     </row>
                     <row>
                        <entry>Single Source Publishing</entry>
                        <entry>
                           <p id="43cf62a5-8f20-4bbe-b1e4-211aba79f19fd6e56">Beim Single Source Publishing wird aus einer XML Quelle eine Vielzahl von Ausgabeformaten erzeugt</p>
                        </entry>
                     </row>
                     <row>
                        <entry>Structured Content Authoring</entry>
                        <entry>
                           <p id="0e9b7c24-dca3-43e0-853a-e86a52c6a0c9d6e62">Der Content wird hierbei semantisch mittels XML Tags ausgezeichnet. Bei einem WYSIWYG Ansatz sind die meisten Tags nur optional sichtbar.</p>
                        </entry>
                     </row>
                     <row>
                        <entry>XML Datenbanken</entry>
                        <entry>
                           <p id="ac77e56f-29c2-4023-af1b-1621f29a0634d6e68">XML Datenbanken sind NoSQL Datenbanken, d.h. "Not only SQL" oder auch tatsächlich "No SQL" wird unterstützt. Die Spezialisierung erfolgt auf XML Daten. Wie sich aber zeigt, ist eine relationale Sicht auf die Daten meistens auch notwendig, so dass DB wie Marklogic diese Funktionalität mittels Erweiterungen unterstützt. </p>
                        </entry>
                     </row>
                  </tbody>
               </tgroup>
            </table>
         </block>
      </content>
   </chapter>
   <chapter hyphenation="yes" chapterpage="no" id="dac12b19-ef37-4e41-b88c-6f0ce7becbb8"
            ismodule="no">
      <content>
         <title id="d3d7b9b9-8712-4844-bf96-9444ac5bb171">
            <title id="3701e56d-cbbf-4125-bce3-cffcd3b10b4f">Tektur CCMS</title>
         </title>
         <block>
            <p id="37aa8a92-5d62-431a-a248-92f4c263fec7d6e4">Tekur CCMS[[xe1:Tektur CCMS]] ist ein web-basiertes Component Content Management System und befindet sich noch in der Entwicklung. Blog: <b>www.tekturcms.de</b>
            </p>
            <p id="38143bbb-a376-4cea-8186-45b1df3cf3fdd6e8">Hier sind einige Random Features:</p>
            <ul>
               <li>
                  <p id="7aefc38e-e464-4e9e-a29a-026663288c9ed6e12">Die Inhalte werden nach dem DITA Content Model eingegeben. Die Ausgabe erfolgt über ein automatisches Satzsystem.</p>
               </li>
               <li>
                  <p id="8094a52c-a82b-4bd1-a0ef-1542e91572d9d6e15">Grafiken können für die PDF-Ausgabe seitenbreit, spaltenbreit und in der Marginalie gesetzt werden.</p>
               </li>
               <li>
                  <p id="03d5536c-79b1-44d7-abff-baa6e2e58784d6e18">Die Breite der Marginalie ist stufenlos einstellbar; die PDF-Ausgabe ist bzgl. der Formatierung weitestgehend konfigurierbar.</p>
               </li>
               <li>
                  <p id="457849bf-4139-4402-952a-00ec5a8f62a3d6e21">Layoutoptionen bzgl. Papierformat, Bemassung und Schriftgrößen können über einen einfachen Dialog eingestellt werden.</p>
               </li>
               <li>
                  <p id="35dc9f79-95f2-42c1-a0a1-aff5f595230dd6e21">TOC und mehrstufige Register werden automatisch in der PDF-Ausgabe erzeugt.</p>
               </li>
               <li>
                  <p id="205f4efe-2336-48ed-84c3-b1789f734365d6e24">Die Zellenbreite von CALS Tabellen kann mit der Maus eingestellt werden; Funktionen auf Zellen sind weitestgehend implementiert.</p>
               </li>
               <li>
                  <p id="528ae63b-d6e7-44bc-92c4-17a10eaa2ec0d6e27">Copy 'n Paste funktioniert Element-weise und topic-übergreifend.</p>
               </li>
               <li>
                  <p id="4cb8d944-8dca-43e1-ad3e-119e25ea6214d6e33">Paras, Listitems und Sections können mit den Pfeilbuttons in der Toolbar nach oben und unten verschoben werden.</p>
               </li>
               <li>
                  <p id="789f4d8d-1d29-4ebb-88b8-e2a2a9e79984d6e30">Verlinkung auf andere Topics funktioniert über Referenzen und ein Linktext wird automatisch aktualisiert, wenn sich der Topic-Titel ändert.</p>
               </li>
               <li>
                  <p id="4c47333b-e4bd-4db3-8ad6-1ef26105a409d6e33">Die DITA-Map kann u.a. mittels Drag 'n Drop editiert werden; Im Topic Editor gibt es an jeder Stelle ein dynamisches Kontextmenü für weitere Optionen.</p>
               </li>
               <li>
                  <p id="b51d30aa-d035-4172-9b41-66aecf14b957d6e36">Valide DITA Strukturen können exportiert und importiert werden.</p>
               </li>
               <li>
                  <p id="8bae0b9a-3dea-4025-ae16-6e27eb8fb38bd6e46">Topics, Tasks und Maps können vom Autor an Reviewer und Approver für einen Kommentar- und Freigabeprozess überwiesen werden.</p>
               </li>
            </ul>
         </block>
      </content>
   </chapter>
</document>