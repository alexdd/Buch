<?xml version="1.0" encoding="utf-8"?>
<document>
   <title xmlns:tektur="http://www.stylesheet-entwicklung.de">Entwickler Handbuch</title>
   <meta xmlns:tektur="http://www.stylesheet-entwicklung.de">
      <owner>alex</owner>
      <date-of-creation>Tue Dec 25 2018 12:56:30 </date-of-creation>
      <date-of-last-change>Fri Jan 25 2019 14:31:03 </date-of-last-change>
      <language>de-DE</language>
      <status>34</status>
      <description>Short Description</description>
      <logo-image>././client/data/dec6632b-2b03-481e-924c-b05befd3f95b/logo.png</logo-image>
      <cover-image>././client/data/dec6632b-2b03-481e-924c-b05befd3f95b/cover.png</cover-image>
      <main-title>XSLT Hands-On</main-title>
      <subtitle>XML - XSLT - XQuery</subtitle>
      <cover-text>(c) Alex Düsel 2019
Creative Commons Namensnennung-Keine Bearbeitungen 4.0 International Public License
www.github.com/alexdd/Buch</cover-text>
      <structure>
         <format>UNDEFINED</format>
      </structure>
      <design>
         <layout>UNDEFINED</layout>
         <paper-format>UNDEFINED</paper-format>
         <page-margin>UNDEFINED</page-margin>
         <spaces>UNDEFINED</spaces>
         <header>UNDEFINED</header>
         <footer>UNDEFINED</footer>
         <look-and-feel>UNDEFINED</look-and-feel>
         <table-layout>UNDEFINED</table-layout>
      </design>
   </meta>
   <chapter hyphenation="yes" chapterpage="no" id="c15a8d5c-03bc-4ee9-a04a-a123e0ce5d88"
            ismodule="no">
      
         <title>
            <title id="67b2fea2-88ac-4cbc-9763-0e31cf89b469">Intro</title>
         </title>
         
            <figure pdfwidth="margin">
               <img src="./client/data/c15a8d5c-03bc-4ee9-a04a-a123e0ce5d88/dita-logo.jpg"/>
            </figure>
            <p>Dieses Buch wurde mit Tektur CCMS erstellt. Tektur ist ein einfach zu bedienender kollaborativer Editor um <b>DITA</b>
         <url xmlns:tektur="http://www.stylesheet-entwicklung.de"
              address="https://de.wikipedia.org/wiki/Darwin_Information_Typing_Architecture">
            <sup>↗↗</sup>
         </url> Inhalte erstellen, als PDF ausgeben und pflegen zu können. Die Eingabe erfolgt dabei per <b>WYSIWYG</b>
         <url xmlns:tektur="http://www.stylesheet-entwicklung.de"
              address="https://de.wikipedia.org/wiki/WYSIWYG">
            <sup>↗↗</sup>
         </url> mit geführter Benutzerinteraktion. Die Inhalte werden als einzelne Topics verwaltet, die in verschiedenen Maps referenziert werden können; Stichwort: <b>Topic Based Authoring</b>
         <url xmlns:tektur="http://www.stylesheet-entwicklung.de"
              address="https://en.wikipedia.org/wiki/Topic-based_authoring">
            <sup>↗↗</sup>
         </url>.</p>
            <p>Sonstige Features: Rechte- und Rollensystem, Versionskontrolle, konfigurerierbarer Workflow mit Review &amp; Approval Fuktionen. Auf dem Entwicklerblog<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
              address="http://www.tekturcms.de">
            <sup>↗↗</sup>
         </url> kann man sich über den Fortschritt informieren.</p>
            <note>
               <consequence>
                  <p>Dieses Buch ist <b>WORK IN PROGRESS</b> und dient in erster Linie als Test für Tektur CCMS. Der Feinschliff kommt noch! Momentan schreibe ich alles was mir irgendwie interessant erscheint - je nach zeitlicher Möglichkeit mehr oder weniger umfangreich - auf und binde die Topics in eine Map ein, um ein PDF erzeugen zu können.</p>
                  <p>Wie schliesslich Struktur und Inhalt genau aussehen sollen, werde ich mir zu einem späteren Zeitpunkt noch genau überlegen :-]</p>
               </consequence>
            </note>
         
      
   </chapter>
   <chapter hyphenation="yes" chapterpage="no" id="792c9845-7c63-4a18-8aee-1878763200b5"
            ismodule="no">
      
         <title>
            <title id="a01d7a84-023f-4c62-ab06-1e8e8b069bed">Anwendungsgebiete</title>
         </title>
         
            <p>
               <b>XML,</b>
               <b>XSLT</b>, <b>XPATH</b>, <b>XSL-FO</b> und <b>XQuery</b> sind Techniken um baumstrukturierte Daten - im Vergleich zu relationalen Daten - aus verschiedenen Quellen ineinader zu überführen, abzuspeichern, zu versenden, darzustellen und auszuwerten. Einfach gesprochen geht es um die Weiterverarbeitung solcher Daten - das XML kann dabei sowohl die Nutzdaten als auch die Steuerdaten tragen.</p>
            <p>Vom Aussehen her sind XML Daten im Prinzip Textdaten. Sie können sehr einfach mit einem Texteditor erstellt werden. Im Gegensatz zu Multimedia-Daten sind keine komplexen Tools, wie z.B. ein Grafikeditor, erforderlich.</p>
            <p>Auch relationale Daten können in Form von Tabellen, als Excel Tabelle oder bspw. als kommaseparierte Textdatei, aus einem System ausgespult und weiterverarbeitet werden. XML erlaubt es jedoch die Daten semantisch auszuzeichnen. Das geschieht durch das Klammern semantisch zusammengehöriger Elemente mittels Klammer-Tags und weiterer Kategorisierung dieser Informationseinheiten mittels weiterer Properties (Attribute) an diesen Tags. Durch das Verschachteln dieser geklammerten Komponenten entsteht ein Baum, der die Hierarchische Ordnung der Daten widerspiegeln sollte.</p>
            <p>Diese Baumstrukturen sind maschinell lesbar und die Daten können, bevor sie von einem Versender zu einem Empfänger gehen, mittels eines automatischen Prozesses validiert werden. Dabei können sowohl der Inhalt als auch die Syntax anhand von definierten Regeln (Schemas) genau überprüft werden.</p>
            <p>Der XML Standard ist mittlerweile 20 Jahre alt. Zuvor gab es SGML, das zum Beispiel auch nicht abgeschlossene Tags erlaubt.</p>
            <p>Der Übergang von SGML zu XML hat die Sache ein bisschen vereinfacht, eine weitere Vereinfachung brachte JSON als Standard. JSON wird gerne im Webbereich eingesetzt um baumstrukturierte Daten zu verarbeiten. JSON ist jedoch nicht so gut maschinenlesbar und es gibt noch nicht so viele Werkzeuge wie z.B. Code Editoren dafür.</p>
            <p>Folgend eine kurze Erläuterung zu den eingangs erwähnten Schlüsselwörtern, um die es sich im weiteren Text drehen wird:</p>
            <ul>
               <li>
                  <p>
                     <b>XML</b> ist das Datenformat. Auf XML arbeiten die anderen Technologien. XML ist immer Input für diese Tools.</p>
               </li>
               <li>
                  <p>
                     <b>XSLT</b> transformiert eine XML Instanz in eine andere. Plain Text ist eine Aneinanderreihung von Text Knoten</p>
               </li>
               <li>
                  <p>
                     <b>XPATH</b> erlaubt es, bestimmte Knoten in einem XML Dokument über bedingte Pfadausdrücke zu selektieren.</p>
               </li>
               <li>
                  <p>
                     <b>XSL-FO</b> ist eine weitere XML basierte Auszeichnungssprache, die ein XSL-FO Prozessor einlesen kann, um daraus z.B. ein PDF zu generieren. </p>
               </li>
               <li>
                  <p>
                     <b>XQuery</b> ist eine Abfragesprache ählich zu SQL, jedoch werden damit nicht relationale Daten abgefragt sondern baumstrukturierte.</p>
               </li>
            </ul>
         
      
      <chapter hyphenation="yes" chapterpage="no" id="a264856d-c5d5-4d7b-993f-421bf222db76"
               ismodule="no">
         
            <title>
               <title id="1ea26780-291c-470f-9559-616cfb744574">Führende Technologie XSLT</title>
            </title>
            
               <p>Ausserhalb der XML Verarbeitung hat XSLT keinen Stellenwert. Im <b>TIOBE Index</b>
            <url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                 address="https://de.wikipedia.org/wiki/TIOBE-Index">
               <sup>↗↗</sup>
            </url> von 2003 rangierte XSLT einmal auf Platz 60 an letzter Stelle der Liste<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                 address="https://bit.ly/2ARgKCJ">
               <sup>↗↗</sup>
            </url>.</p>
               <p>Im Bereich XML würde aber ohne XSLT nicht viel gehen. Es gibt einige exotische Anwendungsgebiete in denen XML effizient 
mit <b>LISP</b> Dialekten verarbeitet wird, bspw. die Verarbeitung von, nach XML konvertierten, <b>EDI X12</b>
            <url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                 address="https://en.wikipedia.org/wiki/ASC_X12">
               <sup>↗↗</sup>
            </url> Nachrichten.</p>
               <p>Auch im Bereich Publishing in der Luftfahrt hat sich SGML als Vorreiter von XML im <b>S1000D</b> Standard<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                 address="https://en.wikipedia.org/wiki/S1000D">
               <sup>↗↗</sup>
            </url> wacker gehalten. Hier wird teilweise noch mit proprietäre Programmiersprachen, wie Metamorphosis gearbeitet.</p>
               <p>Alternativen zu XSLT finden sich im entsprechendem Wikipedia-Artikel<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                 address="https://de.wikipedia.org/wiki/XSL_Transformation">
               <sup>↗↗</sup>
            </url>.</p>
               <p>Wir konzentrieren uns hier also erst einmal auf XSLT und insbesondere XSL Stylesheets.</p>
               <p>Beispielsweise werden die Autohandbücher führender Hersteller mittels XSL gesetzt, deren Eingabedaten aufbereitet und zur Weiterverarbeitung transformiert.</p>
               <ul>
                  <li>
                     <p>XSLT hat gerade noch den Status "Programmiersprache", weil man damit eine Turing Maschine<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                       address="http://www.unidex.com/turing/utm.htm">
                     <sup>↗↗</sup>
                  </url> programmieren kann.</p>
                  </li>
                  <li>
                     <p>Mit HTML oder einer Templater Sprache (z.B. JSP) würde das nicht funktionieren.</p>
                  </li>
                  <li>
                     <p>XSLT benötigt normalerweise immer eine XML Eingabe. Zumindest ein XML Knoten muss verarbeitet werden. Es gibt aber auch den Spezialfall, dass bspw. mit dem XSLT Prozessor Saxon keine Eingabe notwendig ist, bzw. diese vom XSLT Stylesheet selbst erzeugt wird.</p>
                  </li>
                  <li>
                     <p>XSLT ist keine imperative Sprache, d.h es werden keine Anweisungen der Reihe nach abgearbeitet, sondern eine deklarative Sprache, d.h für jedes Ereignis (besser gesagt: für jeden durchlaufenen DOM Knoten) wird eine gefundene - und vom Programmierer deklarierte - Regel angewendet.</p>
                  </li>
                  <li>
                     <p>Ausserdem gibt es funktionale Anteile, um bspw. die deklarierten Regeln rekursiv anwenden zu können.</p>
                  </li>
                  <li>
                     <p>XSLT wird oft mit XSL gleichgesetzt. Aber XSL<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                       address="https://de.wikipedia.org/wiki/XSL_Transformation">
                     <sup>↗↗</sup>
                  </url> ist mehr:</p>
                     <ul>
                        <li>
                           <p>Zum einen kommt noch XPATH hinzu: XPATH erlaubt komplizierte Berechnungen und Selektionen auf den DOM Knoten eines XML Dokuments.</p>
                        </li>
                        <li>
                           <p>Zum anderen ist auch XSL-FO Bestandteil der XSL Spezifikation. XSL-FO Tags sind Anweisungen für einen XSL-FO Prozessor, der aus einem XSL-FO Dokument ein PDF Dokument generiert. Es sind auch andere Ausgabe-Formate, wie bspw. RTF möglich.</p>
                        </li>
                     </ul>
                  </li>
               </ul>
            
         
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="3c090c4b-2d46-459c-87ba-60a824bf5aa5"
               ismodule="no">
         
            <title>
               <title id="f19c130f-edfe-408f-a9e2-31b53d92bb4c">Einige aktuelle und vergangene Szenarien</title>
            </title>
            
               <p>Einige Beispiele - aktuell und aus vergangenen Tagen:</p>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                  id="90390e52-f584-4598-a9fa-3588b6e7d566d6e6">
                  
                     <title>
                        <title id="ab76273e-04a8-430a-9f91-9a1b68d9c981d6e7">XML Webseiten</title>
                     </title>
                     <p>Einen XSLT Prozessor hat jeder Browser eingebaut. Es gab mal eine Zeit, in der es sehr populär war, Webseiten vom Server als XML auszuliefern. XML erlaubt die semantische Auszeichung des Inhalts, und die strikte Trennung des Inhalts von Layout und Design. Wesentlich besser als dies mit HTML und CSS jemals möglich wäre. Ich denke, u.a. wegen des exzessiven Einsatzes von Javascript (auch inline), hat sich diese Idee nie vollständig durchgesetzt. Schliesslich wurde XHTML spezifiziert und jetzt gibt es HTML5.</p>
                     <p>Betrachten wir das folgende einfache XML Beispiel:</p>
                     <verbatim>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;document&gt;
&lt;title&gt;Das ultimative Zwei-Kapitel Dokument&lt;/title&gt;
  &lt;chapter&gt;
    &lt;title&gt;Kapitel 1&lt;/title&gt;
    &lt;intro&gt;In Kapitel 1 wird kurz gesagt was Sache ist.&lt;/intro&gt;
    &lt;content&gt;Um es kurz zu machen, wie der Hase läuft steht in Kapitel 2.&lt;/content&gt;
  &lt;/chapter&gt;
  &lt;chapter&gt;
    &lt;title&gt;Kapitel 2&lt;/title&gt;
    &lt;intro&gt;Hier wird erklärt, wie der Hase läuft.&lt;/intro&gt;
    &lt;content&gt;Im Prinzip ist es ganz einfach.&lt;/content&gt;
  &lt;/chapter&gt;
&lt;/document&gt;</verbatim>
                     <p>Ohne XSLT Stylesheet Zuweisung wird der Browser eine Datei mit diesem Inhalt als eingerücktes XML anzeigen - oder die Tags einfach ignorieren und den Textinhalt in einer Zeile darstellen. Fügt man eine Processing Instruction<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="https://de.wikipedia.org/wiki/Verarbeitungsanweisung">
                  <sup>↗↗</sup>
               </url> am Anfang ein, wird ein XSLT Stylesheet vom Browser herangezogen und vor der Darstellung im Browser wird die so deklarierte XML Transformation ausgeführt:</p>
                     <verbatim>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="formatiermich.xsl" ?&gt;
&lt;document&gt;
  &lt;title&gt;Das ultimative Zwei-Kapitel Dokument&lt;/title&gt;
  &lt;chapter&gt;
[...]</verbatim>
                     <p>Jetzt kann man das XML einfach im Browser öffnen und alles wird schön formatiert - je nachdem welche Regeln in formatiermich.xsl gesetzt sind - angezeigt:</p>
                     <verbatim>&#8232;&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="document"&gt;
  &lt;body&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/body&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="document/title"&gt;     
    &lt;h1&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/h1&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter"&gt;
    &lt;div class="chapter"&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/div&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter/title"&gt;
    &lt;h2&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/h2&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter/intro"&gt;
    &lt;div class="intro"&gt;
      &lt;i&gt;&lt;xsl:apply-templates/&gt;&lt;/i&gt;      
    &lt;/div&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter/content"&gt;
    &lt;p&gt;&lt;xsl:apply-templates/&gt;&lt;/p&gt;    
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</verbatim>
                     <p>Die Processing Instruction hat keinen Einfluss auf den XML Inhalt und wird in einer anderen Eingabeverarbeitung nicht herangezogen.</p>
                  
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                  id="dc878b8a-371f-4ae5-a53c-40e2bfc7f980d6e25">
                  
                     <title>
                        <title id="d1a0e576-5434-4f78-a143-0aba397514ddd6e33">Serverseitige Konvertierung</title>
                     </title>
                     <p>Auch eine serverseitige Konvertierung ist gebräuchlich. Ein Beispiel aus vergangenen Tagen - &#8232;WAP-Seiten<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="https://de.wikipedia.org/wiki/Wireless_Application_Protocol">
                  <sup>↗↗</sup>
               </url> für unterschiedliche Handy-Modelle.</p>
                     <p>Damals hatten die Handys sehr unterschiedliche Displaygrößen. Handybrowser konnten noch nicht ausreichend Javascript und die Skalierung der WAP-Seite für das jeweilige Handy passierte nicht im Handy, sondern vor der Auslieferung auf der Serverseite. Dazu wurde eine XML Quelle mittels verschiedener XSLT Stylesheets in unterschiedliche WML WAP Repräsentationen transformiert.</p>
                     <p>So würde das Zwei-Kapitel Beispiel von oben im WML Format aussehen (recht einfach gehalten):</p>
                     <verbatim>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.1//EN" "http://www.wap.org/DTD/wml_1.1.xml"&gt;
&lt;wml&gt;
  &lt;head&gt;
    &lt;meta name="title" content="Das ultimative Zwei-Kapitel Dokument"/&gt;   
  &lt;/head&gt; 
  &lt;card id="chapter1" title="Kapitel 1"&gt;
    &lt;p&gt;&lt;i&gt;In Kapitel 1 wird kurz gesagt was Sache ist.&lt;/i&gt;&lt;/p&gt;        
    &lt;p&gt;Um es kurz zu machen, wie der Hase läuft steht in Kapitel 2.&lt;/p&gt;  
  &lt;/card&gt;
  &lt;card id="chapter2" title="Kapitel 2"&gt;
    &lt;p&gt;&lt;i&gt;Hier wird erklärt, wie der Hase läuft.&lt;/i&gt;&lt;/p&gt;
    &lt;p&gt;Im Prinzip ist es ganz einfach.&lt;/p&gt;
  &lt;/card&gt;
&lt;/wml&gt;</verbatim>
                     <p>Eine XSLT Transformation, die die XML Daten von oben in diese WML Darstellung überführt, könnte z.B. so implementiert werden:</p>
                     <verbatim>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;

  &lt;xsl:output
    doctype-public="-//WAPFORUM//DTD WML 1.2//EN" 
    doctype-system="http://www.wapforum.org/DTD/wml12.dtd"
    indent="yes"/&gt;
    
  &lt;xsl:template match="document"&gt;
    &lt;wml&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/wml&gt;
  &lt;/xsl:template&gt;
    
  &lt;xsl:template match="document/title"&gt;
    &lt;head&gt;
      &lt;meta name="title"&gt;
        &lt;xsl:attribute name="content"&gt;
          &lt;xsl:value-of select="."/&gt;               
        &lt;/xsl:attribute&gt;
      &lt;/meta&gt;      
    &lt;/head&gt;
  &lt;/xsl:template&gt;
    
  &lt;xsl:template match="chapter"&gt;
    &lt;card id="{concat('chapter',count(preceding-sibling::chapter)+1)}"&gt;
      &lt;xsl:attribute name="title"&gt;
        &lt;xsl:value-of select="title"/&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:apply-templates select="*[not(self::title)]"/&gt;
    &lt;/card&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="node()|@*"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates select="node()|@*"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="processing-instruction()"/&gt;
  
  &lt;xsl:template match="intro"&gt;
    &lt;p&gt;&lt;i&gt;&lt;xsl:apply-templates/&gt;&lt;/i&gt;&lt;/p&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="content"&gt;
    &lt;p&gt;&lt;xsl:apply-templates/&gt;&lt;/p&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</verbatim>
                  
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                  id="e599f418-9160-473f-975b-42bf81bdcca2d6e40">
                  
                     <title>
                        <title id="fa0123f8-d2ab-48fe-a8a4-69c5ea6e5b29d6e48">Ausgabeformate</title>
                     </title>
                     <p>Aus einer XML Quelle können auch leicht weitere Format erzeugt werden, bspw. ePub. &#8232;EPUB<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="https://de.wikipedia.org/wiki/EPUB">
                  <sup>↗↗</sup>
               </url> ist das Standardformat für eBooks und neben Tags zur Formatierung für den Content, gibt es bspw. auch Anweisungen zum Erzeugen des Inhaltsverzeichnisses oder anderer Navigationsstrukturen.</p>
                     <p>Weitere gängige Formate sind neben dem oben gezeigten veralteten WML Format, elektronische Ausgabe-Formate wie: CHM<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="https://de.wikipedia.org/wiki/CHM_(Dateiformat)">
                  <sup>↗↗</sup>
               </url>, EclipseHelp<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="https://www.ibm.com/developerworks/library/os-echelp/index.html">
                  <sup>↗↗</sup>
               </url>, JavaHelp<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="https://en.wikipedia.org/wiki/JavaHelp">
                  <sup>↗↗</sup>
               </url>, ..., Print-Ausgabe Formate, wie PDF oder Adobe Framemaker<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="https://de.wikipedia.org/wiki/FrameMaker">
                  <sup>↗↗</sup>
               </url>,  oder XML Standard Austauschformate, wie DITA, S1000D<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="https://de.wikipedia.org/wiki/S1000D">
                  <sup>↗↗</sup>
               </url>, PI-MOD<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="https://www.i4icm.de/forschungstransfer/pi-mod/">
                  <sup>↗↗</sup>
               </url>, JATS<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="https://de.wikipedia.org/wiki/Journal_Article_Tag_Suite">
                  <sup>↗↗</sup>
               </url> oder TEI<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="https://de.wikipedia.org/wiki/Text_Encoding_Initiative">
                  <sup>↗↗</sup>
               </url>.</p>
                  
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                  id="a621b1ef-5e6a-40fd-aab7-35028eb28013d6e47">
                  
                     <title>
                        <title id="4135a624-a45f-433c-8d0b-18416fe3765fd6e55">Menschenlesbar machen</title>
                     </title>
                     <p>Kryptische XML Log-, Daten- oder Konfigurationsfiles können leicht mit XSLT menschenlesbar formatiert werden. &#8232;Ein Arbeitskollege im neuen Job kam kürzlich auf mich zu, ob ich um eine Möglichkeit wüsste, wie man sein kryptisches Datenfile für einen Übersetzungsdienst menschenlesbar formatieren könnte - XSLT to the Rescue:</p>
                     <verbatim>&lt;?xml version="1.0" encoding="UTF-8"?&gt;?&lt;?xml-stylesheet type="text/xsl" href="de.xsl"?&gt;
&lt;jcr:root xmlns:sling="http://sling.apache.org/jcr/sling/1.0"
  xmlns:jcr="http://www.jcp.org/jcr/1.0" 
  xmlns:mix="http://www.jcp.org/jcr/mix/1.0"
  xmlns:nt="http://www.jcp.org/jcr/nt/1.0"
  jcr:language="de"
  jcr:mixinTypes="[mix:language]"
  jcr:primaryType="sling:Folder"&gt;
&lt;b_manual 
  jcr:primaryType="sling:MessageEntry"
  sling:message="Bedienungsanleitung"/&gt;
  &lt;b_warning
    jcr:primaryType="sling:MessageEntry"
    sling:message="Warnung"/&gt;
  &lt;b_danger
    jcr:primaryType="sling:MessageEntry"
    sling:message="Vorsicht"/&gt;
  &lt;b_note
    jcr:primaryType="sling:MessageEntry"
    sling:message="Notiz"/&gt;
  &lt;b_notice
    jcr:primaryType="sling:MessageEntry"
    sling:message="Hinweis"/&gt;
  [...]</verbatim>
                     <p>Mit einem eingehängten XSLT Stylesheet de.xsl wird so ein XML Datenfile schön formatiert als Tabelle angezeigt:</p>
                     <verbatim>&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:jcr="http://www.jcp.org/jcr/1.0"
  xmlns:sling="http://sling.apache.org/jcr/sling/1.0"&gt;
  
  &lt;xsl:template match="jcr:root"&gt;
    &lt;html&gt;
      &lt;table border="1" cellpadding="5" cellspacing="5"&gt;
        &lt;xsl:apply-templates/&gt;
      &lt;/table&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="*"&gt;
    &lt;tr&gt;
      &lt;td&gt;
        &lt;xsl:value-of select="concat(count(preceding::*[@sling:message]) + 1,'.')"/&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;xsl:value-of select="name()"/&gt;
      &lt;/td&gt;
      &lt;td contenteditable="true"&gt;
        &lt;xsl:value-of select="@sling:message"/&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</verbatim>
                     <p>Hängt man an dieses Beispiel noch ein bisschen Javascript Logik und macht die Felder für die Übersetzungen mittels des HTML5 contenteditable Attributs editierbar, dann bräuchte man nur noch eine Rücktransformation HTML nach XML und hätte schon einen kleinen webbasierten XML Editor gebaut. Genau nach diesem Prinzip funktionieren einige aktuelle XML Editoren.</p>
                  
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                  id="7f07b358-45e4-4ee2-af6d-262591f9b945d6e60">
                  
                     <title>
                        <title id="5ab04d47-2964-42e4-8002-ba2b7828111bd6e68">Diagramme</title>
                     </title>
                     <p>Nachdem eine SVG Grafik im XML Format vorliegt kann diese auch direkt aus XML Daten mittels XSLT erzeugt werden.&#8232;Über das HTML5 &lt;svg&gt; Element kann so eine erzeugte Grafik inline in das ebenfalls durch das XSLT generierte HTML Dokument eingebunden werden.</p>
                     <p>Betrachten wir unser Beispiel von oben, erweitert um drei neue &lt;block&gt; Elemente:</p>
                     <verbatim>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="chart.xsl" ?&gt;
&lt;document&gt;
  &lt;title&gt;Das ultimative Zwei-Kapitel Dokument&lt;/title&gt;
  &lt;chapter&gt;
    &lt;title&gt;Kapitel 1&lt;/title&gt;
    &lt;intro&gt;In Kapitel 1 wird kurz gesagt was Sache ist.&lt;/intro&gt;
    &lt;content&gt;Um es kurz zu machen, wie der Hase läuft steht in Kapitel 2.&lt;/content&gt;
  &lt;/chapter&gt;
  &lt;chapter&gt;
    &lt;title&gt;Kapitel 2&lt;/title&gt;
    &lt;intro&gt;Hier wird erklärt, wie der Hase läuft.&lt;/intro&gt;
    &lt;content&gt;Im Prinzip ist es ganz einfach. Betrachten wir doch drei gelbe Blöcke:
    &lt;/content&gt;
    &lt;block/&gt;
    &lt;block/&gt;
    &lt;block/&gt;
  &lt;/chapter&gt;
&lt;/document&gt;</verbatim>
                     <p>Wenn wir das XSLT Stylesheet von oben noch um eine Regel für das neue &lt;block&gt; Element ergänzen, so wie hier:</p>
                     <verbatim>&lt;xsl:template match="block"&gt;
   &lt;svg style="background-color:yellow" width="30" height="30" 
     xmlns:xlink="http://www.w3.org/1999/xlink" 
     xmlns="http://www.w3.org/2000/svg"/&gt;
  &lt;br/&gt;
  &lt;br/&gt;
&lt;/xsl:template&gt;</verbatim>
                     <p>Dann erhalten wir drei schön formatierte gelbe SVG Blöcke.</p>
                     <p>
                        <b>Weiterführende Links:</b>
                     </p>
                     <ul>
                        <li>
                           <p>Client-side image generation with SVG and XSLT<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                          address="http://surguy.net/articles/client-side-svg.xml">
                        <sup>↗↗</sup>
                     </url>
                  </p>
                        </li>
                        <li>
                           <p>Knotentyp Visualisierung im Apache Jack Rabbit Projekt<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                          address="http://jackrabbit.apache.org/jcr/node-type-visualization.html">
                        <sup>↗↗</sup>
                     </url>
                  </p>
                        </li>
                     </ul>
                  
               </chapter>
            
         
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="151a9719-a32a-4fca-a55c-769b47a73b34"
               ismodule="no">
         
            <title>
               <title id="47f2fdc5-eca0-4e9b-bfc8-f2fbd76403d8">Professionelle XML Verarbeitung</title>
            </title>
            
               <p>Vom Single-Source Publishing bis zur Generierung von Java Code aus Klassendiagrammen.</p>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                  id="38e405fd-5315-4c0a-9876-632179869e7dd6e6">
                  
                     <title>
                        <title id="012db970-b72c-425a-a3ad-3e817e002282d6e7">Single Source Publishing</title>
                     </title>
                     <p>Gängige Formate in der Technischen Dokumentation sind elektronische Ausgabe-Formate wie: CHM, EclipseHelp, JavaHelp, ePub, ..., Print-Ausgabe Formate, wie PDF oder Adobe Framemaker, oder XML Standard Austauschformate, wie DITA, S1000D, PI-MOD oder TEI.
Vorteile:</p>
                     <ul>
                        <li>
                           <p>Bei einer Änderung in der XML Quelle werden auch automatisch alle anschließenden Formate aktualisiert.</p>
                        </li>
                        <li>
                           <p>Strikte Trennung von Content ( / Semantik) und Layout/Design.</p>
                        </li>
                        <li>
                           <p>Auf der XML Quelle sind XML Features möglich, wie:
	
		Modularisierung: Erlaubt die fein-granulare Wiederverwendung von Content-Bausteinen, sowie das Verlinken, Filtern, Suchen und Exportieren derselben.
		Generalisierung ist ein DITA Konzept, welches die Wiederverendung von angepassten Topics in anderen DITA Systemen ermöglicht.
		Gültigkeiten erlauben die bedingte Anwendung von Content-Bestandteilen auf Satz und Wort-Ebene.
		Versionierung und Diffing - Vergleich von Änderungen zwischen Versionen
		Intelligente Querverweise: Ein Link zwischen einzelnen XML Topics  bleibt versionstreu.
		Automatischer Satz, inkl. Zusamenhalte- und Trennregeln für Seiten, Absätze und Blöcke (Listen, Tabellen, etc).
	
	</p>
                        </li>
                        <li>
                           <p>Veraltete Formate können ausgetauscht werden, ohne dass der Content geändert werden muss oder verlorengeht.</p>
                        </li>
                        <li>
                           <p>Die XML Quelle kann ohne Aufbereitung in anderen Systemen wiederverwendet werden.</p>
                        </li>
                        <li>
                           <p>Es gibt weit verbreitete Standards zur Struktur der XML Quelle.</p>
                        </li>
                        <li>
                           <p>Nur das XML muss in der Datenhaltung persistiert werden</p>
                        </li>
                        <li>
                           <p>Es gibt spezialisierte XML Datenbanken, die besonders gut auf Baumstrukturen arbeiten. (Dokumente sind per se baum-strukturiert und sind eigentlich für eine relationale Datenbank ungeignet)</p>
                        </li>
                     </ul>
                     <p>Die Redaktionssysteme der Technischen Dokumentation der führenden Hersteller in Deutschland haben XML unter der Haube und setzen auf die Single-Source Strategie.</p>
                  
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                  id="b9424d73-54e3-4f5b-b353-5494435f08b3d6e38">
                  
                     <title>
                        <title id="c2ea4ffe-bfc9-4c96-b5d9-d793083fc510d6e39">Code Generierung</title>
                     </title>
                     <p>Nachdem man bei XSLT im Format der Ausgabe frei ist, kann auch direkt Plain-Text mit  XSLT Regeln generiert werden. Daher liegt es nahe sich jegliche Form von Quelltext aus einer XML Repräsentation erzeugen zu lassen.</p>
                     <p>Beispielsweise speichern gängige CASE Tools (Computer Aided Software Engineering) UML Diagramme im XML Format ab, so z.B. <b>ArgoUML</b>
               <url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="http://argouml.tigris.org">
                  <sup>↗↗</sup>
               </url>.</p>
                     <p>Diese Klassendiagramme lassen sich mittels XSLT direkt in Java-Code transformieren, wie z.B. in einem kleinen Open Source Projekt (aus vergangenen Tagen) :
<b>Butterfly Code Generator</b>
               <url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="http://butterflycode.sourceforge.net">
                  <sup>↗↗</sup>
               </url>
            </p>
                     <p>Es gibt aber auch einen schönen Artikel dazu im Java World Journal<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="https://www.javaworld.com/article/2073998/java-web-development/generate-javabean-classes-dynamically-with-xslt.html">
                  <sup>↗↗</sup>
               </url>.</p>
                  
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                  id="5202988f-8547-4e61-a585-654d8a111018d6e55">
                  
                     <title>
                        <title id="bd0e17e7-dce2-45a0-b5eb-90297e678e88d6e56">Migrationen und Konvertierungen</title>
                     </title>
                     <p>Für jede erdenkliche Art der Migration eines XML Datenbestands oder eines Datenbank-Dumps / -Exports im XML Format, zwischen Produktversionen oder zwischen Dienstleister- und Dienstnutzer-Systemen bietet sich XSLT als Mittel der Wahl zur schnellen und komplexen Transformation an.</p>
                     <p>Dabei ist zu beachten, dass XSLT besonders schnell und gut auf verschachtelten Strukturen arbeitet. Entartet ein Baum zur Liste und/oder sind nur geringe Strukturanpassungen notwendig, wird man sich mit einem schnellen SAX Parser leichter tun. 
Mittels der XSLT3.0 Streaming Option können auch sehr große XML Quellen (Big Data) verarbeitet werden. Saxon bietet bspw. diese Streaming Option<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="http://www.saxonica.com/html/documentation/sourcedocs/streaming/">
                  <sup>↗↗</sup>
               </url>.</p>
                  
               </chapter>
            
         
      </chapter>
   </chapter>
   <chapter hyphenation="yes" chapterpage="no" id="31a92dc0-959c-49a1-b06e-01e2369e050e"
            ismodule="no">
      
         <title>
            <title id="6a6d03c2-e2be-4b5f-b515-ed4ec3132dd1">Wichtige Konzepte</title>
         </title>
         
            <p>XSLT und XQuery erlauben es Probleme auf viele verschiedene Arten zu lösen. Sicherlich wird jeder Programmierer im Laufe der Zeit seinen eigenen Stil entwickeln. Das kommt nicht zuletzt daher, dass man als XSLT Entwickler in vielen Firmen eine Expertenrolle einnimmt.</p>
            <p>Umso wichtiger ist es, sich an allgemeine Konzepte, Muster und Best Practices zu halten, um einen schwer wartbaren Wildwuchs zu vermeiden.</p>
            <p>Auf den folgenden Seiten wird versucht einige dieser Konzepte zusammenzutragen und mit eigenen Erfahrungen und Ideen zu kombinieren.</p>
            <p>Es wird weder der Anspruch auf Vollständigkeit noch auf Korrektheit dieser Informationen erhoben. Das Kapitel soll vielmehr als Denkanstoß mit hoffentlich einigen verwertbaren Ideen dienen.</p>
         
      
      <chapter hyphenation="yes" chapterpage="no" id="5b73f348-0058-45e0-82f7-c3de72ec5d41"
               ismodule="no">
         
            <title>
               <title id="c16fd330-a145-443c-bf0a-2ca245527453">Push vs. Pull Stylesheets </title>
            </title>
            
               <p>XSLT ist eine ereignisgesteuerte, regelbasierte Umgebung zur Konvertierung von XML Daten. Gerade der Vorteil des regelbasierten Ansatzes ist vielen Entwicklern nicht bewusst, und es entsteht Quellcode der aussieht, wie mit XPath angereicherter PHP Code.</p>
               <p>Ich frage mich an dieser Stelle immer, wieso nimmt man dann überhaupt XSLT, wenn man keine Template-Match Regeln verwendet, oder nur spärlich verwendet?</p>
               <p>Um diesen Umstand aufzuklären ist ein bisschen Theorie notwendig:</p>
               <figure pdfwidth="page">
                  <subtitle>Pull Stylesheet</subtitle>
                  <desc id="9b276ccd-3607-44dc-a111-5a5981c182ebd6e13">Beim "Pull" werden Elemente in der Quellinstanz selektiert und an einer passenden Stelle in der Zielinstanz eingefügt. Diese Vorgehensweise ist vergleichbar mit derer von Template-Engines, wie JSP oder ASP. Das kann in mehreren Stufen erfolgen, bis schrittweise die Quellinstanz in die finale Zielinstanz überführt wurde.</desc>
                  <img src="./client/data/5b73f348-0058-45e0-82f7-c3de72ec5d41/pull.svg"/>
               </figure>
               <figure pdfwidth="page">
                  <subtitle>Push Stylesheet</subtitle>
                  <desc id="8e12fa0b-87a4-4ec6-aefc-4d0040437679d6e19">Beim "Push" werden die Quelldaten schrittweise in die Zieldaten konvertiert. Diese Vorgehensweise kann explorativ erfolgen und beim Transformieren in einen Zwischenschritt entstehen Erkenntnisse, die bei der Weiterverarbeitung nützlich sind. Merke: XSLT steht für eXtensible Stylesheet Transformation.</desc>
                  <img src="./client/data/5b73f348-0058-45e0-82f7-c3de72ec5d41/pusch.svg"/>
               </figure>
               <p>Das bisher Gesagte verdeutlicht zwar den "Pull" Ansatz, was genau aber ge"pusht" wird, ist vermutlich noch unklar. Betrachten wir XML in der Baumdarstellung.</p>
               <figure pdfwidth="page">
                  <subtitle>Transformation des Quellbaums in den Zielbaum</subtitle>
                  <desc id="d9aa7ef1-76e0-4ef2-983d-e34cfe5ee1fcd6e27">Der XSLT Prozessor unternimmt einen Tiefensuchlauf und überprüft bei jedem Knoten den er betritt, ob in seiner Regelbasis eine Regel existiert, die auf diesen Knoten "matched". Dabei gibt es drei grundsätzliche Möglichkeiten, wie die Knoten des Quellbaums in den Zielbaum kopiert - oder eben nicht kopiert - werden können.</desc>
                  <img src="./client/data/5b73f348-0058-45e0-82f7-c3de72ec5d41/push.svg"/>
                  <legend>
                     <leg-entry id="f9455559-67ce-4901-9444-ccdd01d21c56d6e43">
                        <leg-pos>
                           <p>Remove</p>
                        </leg-pos>
                        <leg-name>
                           <p>Beim Betreten einer leeren Match-Regel wird ein Teilbaum nicht kopiert</p>
                        </leg-name>
                     </leg-entry>
                     <leg-entry id="4f2540c3-a78f-49dc-a2b3-3e3d5c7d1c16d6e50">
                        <leg-pos>
                           <p>Bypass</p>
                        </leg-pos>
                        <leg-name>
                           <p>Beim Betreten einer Match-Regel ohne Kopieranweisung wird der Knoten übersprungen</p>
                        </leg-name>
                     </leg-entry>
                     <leg-entry id="f38f09a2-6878-42f6-bcfe-621ca2fc7fa5d6e57">
                        <leg-pos>
                           <p>Push</p>
                        </leg-pos>
                        <leg-name>
                           <p>Durch gezielte Auswahl einer Knotenmenge auf der Descendant-Achse wird der XSLT Prozessor in eine bestimmte Richtung ge"pusht".</p>
                        </leg-name>
                     </leg-entry>
                  </legend>
               </figure>
               <p>Pull-Stylesheets werden gewöhlich mit <b>for-each</b> Loops programmiert. Dieser Ansatz ist meiner Ansicht nach gebräuchlich, wenn keine großen DTD Änderungen zu erwarten sind, der XML Baum flach strukturiert ist und die Anforderungen an die  Knvertierung relativ einfach sind, bspw. beim Auswerten / Konvertieren von Konfigurationsdateien. In alles anderen Fällen sind Push-Stylesheets vorzuziehen, d.h. möglichst wenige <b>for-each</b> loops und möglichst viele <b>Template-Match</b> Regeln.</p>
            
         
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="db988919-f71e-437e-b699-b6fdd2a32cb9"
               ismodule="no">
         
            <title>
               <title id="b8539c31-c176-46bb-b028-e811b2decfbe">Eindeutigkeit der Regelbasis</title>
            </title>
            
               <p>Die Regelbasis der XSLT ereignisgesteuerten Laufzeitumgebung (Wir erinnern uns: Jedes Mal wenn der XSLT Prozessor einen Knoten betritt, wird ein Event ausgelöst) kann unendlich viele Regeln aufnehmen. Für die Vollständigkeit, Eindeutigkeit und Konsistenz der Regelbasis ist der Programmierer selbst verantwortlich.</p>
               <p>Um die Eindeutigkeit der Regeln zu gewährleisten,  gibt es verschiedene Mechanismen.</p>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                  id="130ae830-a663-4719-8cf1-57ecddbd49f5d6e8">
                  
                     <title>
                        <title id="e16576ad-fbf7-41d7-a23e-deb174c6b176d6e9">Reihenfolge der Match-Regeln</title>
                     </title>
                     <p>Im Normalfall sollte auf einen bestimmten Knoten in einem bestimmten Szenario genau eine Regel matchen. Falls es einen Konflikt gibt, wird zumindest bei Saxon diejenige Regel herangezogen, die im Stylesheet zuletzt deklariert wurde.</p>
                     <p>Diesen Umstand zu kennen, ist genau dann wichtig, wenn man einen bestehenden Stylesheet-Code übernehmen muss. Getreu dem Motto "Never change a running system" sollte man die Sache diesbzgl. sehr behutsam aufräumen.</p>
                  
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                  id="4ac489ad-a78b-4aa7-8245-bec2013ce7d5d6e15">
                  
                     <title>
                        <title id="c35ab440-7d81-4466-a34f-32545cec227ad6e14">Präzedenz der Auswertung</title>
                     </title>
                     <p>Match-Regeln werden gemäß ihrer Spezifität sortiert und diejenige, die auf einem Knoten in einem bestimmten Szenario am besten zutrifft wird zur Auswertung herangezogen. Grds. werden die Regeln anhand folgender Kriterien sortiert:</p>
                     <procedure type="ol">
                        <step>
                           <action>
                              <p>Importierte Template Regeln haben immer eine niedrigere Priorität als die Regeln des importierenden Stylesheets.</p>
                           </action>
                        </step>
                        <step>
                           <action>
                              <p>Templates mit einem höheren Priority Attribut haben Vorrang.</p>
                           </action>
                        </step>
                        <step>
                           <action>
                              <p>Templates ohne Priorität bekommen automatisch eine Default-Priorität. Die höchste Default-Priorität ist 0.5.</p>
                           </action>
                        </step>
                        <step>
                           <action>
                              <p>Diese Default Priorität errechnet sich anhand der Bedingungen oder Wildcards, die an einen Match-Regel geknüpft sind: </p>
                              <ul>
                                 <li>
                                    <p>Wenn mehrere Templates matchen, dann wird das am meisten spezifische zur Auswertung herangezogen.</p>
                                 </li>
                                 <li>
                                    <p>Das am meisten spezifische Template wird anhand der Prioritäten berechnet.</p>
                                 </li>
                                 <li>
                                    <p>Einfache Elementnamen (z.B. "para") haben Prio 0.</p>
                                 </li>
                                 <li>
                                    <p>Wildcards (z.B. *, @*) haben Priorität -0.25</p>
                                 </li>
                                 <li>
                                    <p>Knoten-Tests für andere Knoten (e.g. comment(), node(), etc. ) haben Priorität -0.5</p>
                                 </li>
                                 <li>
                                    <p>In allen anderen Fällen ist die Prio 0.5.</p>
                                 </li>
                              </ul>
                              <p>Beispiele:</p>
                              <ul>
                                 <li>
                                    <p>para -&gt; 0</p>
                                 </li>
                                 <li>
                                    <p>h:* -&gt; -0.25</p>
                                 </li>
                                 <li>
                                    <p>* -&gt; -0.25</p>
                                 </li>
                                 <li>
                                    <p>node() -&gt; -0.25</p>
                                 </li>
                                 <li>
                                    <p>contents/para -&gt; 0.5</p>
                                 </li>
                                 <li>
                                    <p>contents/* -&gt; 0.5</p>
                                 </li>
                              </ul>
                           </action>
                        </step>
                        <step>
                           <action>
                              <p>Mit einer Kommandozeilen-Option kann bei Saxon festgelegt werden, dass die Transformation abbricht, sobald es einen Konflikt bei der Regelauswertung gibt.</p>
                           </action>
                        </step>
                     </procedure>
                  
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                  id="7b982db3-d105-4be2-b306-349397ebccecd6e76">
                  
                     <title>
                        <title id="5b4364ca-516c-4edb-a9e8-3de574a18cc2d6e19">Import Präzendenz und Default-Regel</title>
                     </title>
                     <p>Wie in der obigen Sektion unter Punkt 1. angegeben, haben alle Regeln in einem importierten Stylesheet eine geringere Priorität als im importierenden Stylesheet. Diesen Umstand kann man sich zunutze machen, um eine Default-Regel einzubinden, bspw:</p>
                     <verbatim>&lt;xsl:template match="*" mode="#all"/&gt;</verbatim>
                     <p>Da sie sich in einem importierten Stylesheet befindet, hat sie geringere Priorität als alle anderen Regeln und greift nur dann, wenn für einen betretenen Knoten keine andere Match-Regel definiert ist.</p>
                     <p>Das ist z.B. praktisch, um nicht "gehandelte" Element zu identifizieren - dazu wäre die obige Regel nicht leer, sondern würde bspw. einen gelb markierten Warntext direkt in das Ausgabeformat schreiben.</p>
                     <p>Eine leere Default-Regel ist dagegen gut, wenn bspw. in einer XML-2-XML Migration automatisch Knoten im XML Baum abgetrennt werden sollen, für die keine Match-Regel existiert.</p>
                  
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                  id="b4f1ab16-ab78-435d-a9f4-8ac566145bedd6e89">
                  
                     <title>
                        <title id="be710deb-554e-4962-beb9-9de58d386c7fd6e24">Prioritäten</title>
                     </title>
                     <p>Wie oben schon verdeutlicht werden alle Match-Regeln mit einer Priorität ausgestattet. Der Stylesheet-Entwickler hat die Möglichkeit diese Priorität zu überschreiben. Dazu wird das Attribut @priority an der Match-Regel verwendet. Ein Use-Case für die Prioritäten wÃ¤re bspw. folgendes Szenario:</p>
                     <ul>
                        <li>
                           <p>Die Eingabeinstanz soll in einer Vorprozessierung gefiltert werden.</p>
                        </li>
                        <li>
                           <p>Dabei sollen Seminar-Elemente markiert werden, die nicht besonderen Bedingungen entsprechen:</p>
                           <ul>
                              <li>
                                 <p>Das Seminar-Element hat ein Feld "Ende-Datum" das abgelaufen ist.</p>
                              </li>
                              <li>
                                 <p>Am Seminar-Element sind mehrere Dozenten angestellt, obwohl das Seminar-Element vom Type "Single" ist.</p>
                              </li>
                              <li>
                                 <p>em Seminar-Element ist kein Dozent zugeordnet.</p>
                              </li>
                           </ul>
                        </li>
                        <li>
                           <p>Sicherlich kann es Seminar-Elemente geben, die alle drei Bedingungen erfüllen. Um das Error-Log aber nicht zu überfüllen, sollen die Filter nach ihren Prioritäten ausgeführt werden.</p>
                        </li>
                     </ul>
                     <p>In Templates überführt, könnte diese Anforderung so umgsetzt werden:</p>
                     <verbatim>&lt;xsl:template match="Seminar[Ende-Datum/xs:date(.) le current-date()]" 
              priority="30" mode="filter-network"&gt; 
  &lt;xsl:element name="Filtered-Seminar" namespace="{namespace-uri()}"&gt; 
    &lt;xsl:attribute name="reason"&gt;termed-seminar&lt;/xsl:attribute&gt; 
    &lt;xsl:apply-templates select="node()|@*" mode="filter-network"/&gt; 
  &lt;/xsl:element&gt; 
&lt;/xsl:template&gt; 

&lt;xsl:template match="Seminar[Type eq 'SINGLE' and count(dozenten/dozent) gt 1]"
              priority="20" mode="filter-network"&gt; 
  &lt;xsl:element name="filtered-Seminar" namespace="{namespace-uri()}"&gt; 
    &lt;xsl:attribute name="reason"&gt;dozenten-count&lt;/xsl:attribute&gt; 
    &lt;xsl:apply-templates select="node()|@*" mode="filter-network"/&gt; 
  &lt;/xsl:element&gt; 
&lt;/xsl:template&gt; 

&lt;xsl:template match="Seminar[not(dozenten/dozent)]" mode="filter-network"&gt; 
  &lt;xsl:element name="filtered-Seminar" namespace="{namespace-uri()}"&gt; 
    &lt;xsl:attribute name="reason"&gt;dozenten-missing&lt;/xsl:attribute&gt; 
    &lt;xsl:apply-templates select="node()|@*" mode="filter-network"/&gt; 
  &lt;/xsl:element&gt; 
&lt;/xsl:template&gt;</verbatim>
                  
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                  id="d81fef69-304b-4f38-962c-ceeef34defced6e118">
                  
                     <title>
                        <title id="8950e48f-85c8-4fc8-98f7-e1f7e42ed7d5d6e29">Modus Attribute</title>
                     </title>
                     <p>An allen Templates hat man die Möglichkeit einen selbst deklarierten Modus anzugeben. Wenn dann der XSLT Prozessor in eine bestimmte Richtung gepusht, vgl. <doclink class="5b73f348-0058-45e0-82f7-c3de72ec5d41"
                        id="5a4424c5-7875-412e-baae-e86b1db64e51">Push vs. Pull Stylesheets </doclink>, wird, werden nur diejenigen Regeln zur Auswertung herangezogen, die im selben Modus sind, wie der apply-templates Call.</p>
                     <p>Beispielsweise möchte man die Titel im Kapitel anders behandeln als die Kapitel im Inhaltsverzeichnis, denn im TOC sollen z.B. keine Fussnoten-Marker angezeigt werden. </p>
                     <p>In Templates formuliert würde diese Anweisung folgendermassen aussehen:</p>
                     <verbatim>&lt;xsl:template match="title" mode="toc"&gt;
  &lt;div class="toc-entry"&gt;
    &lt;xsl:apply-templates select="*[not(self::footnote)]"/&gt;
  &lt;/div&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="title"&gt;
  &lt;h1&gt;
    &lt;xsl:apply-templates/&gt;
  &lt;/h1&gt;
&lt;/xsl:template&gt;</verbatim>
                     <p>Die Generierung des TOC könnte dann folgendermassen ablaufen:</p>
                     <verbatim>&lt;xsl:for-each select="chapter"&gt;
  &lt;xsl:apply-templates select="title" mode="toc"&gt;
&lt;/xsl:for-each&gt;</verbatim>
                     <p>Bzgl. der Eindeutigkeit der Regelbasis kann man also auch noch anhand des Mode-Attributes Ausführungs-Gruppen bilden. Wie auch bei Angabe der Priorities kann man auf diese Weise Regeln setzen, die nie ausgeführt wurden, weil sie vllt. im Zuge einer Refactoring-Massnahme abgeklemmt und dann vergessen wurden.</p>
                     <p>Auch das mode-Attribut ist also mit Vorsicht zu geniessen und sparsam einzusetzen.</p>
                  
               </chapter>
            
         
      </chapter>
   </chapter>
   <chapter hyphenation="yes" chapterpage="no" id="f838f9be-97bf-44a4-ac63-2e813a87f2ea"
            ismodule="no">
      
         <title>
            <title id="e959b617-429c-4a40-9ba2-c55ac946a753">Ausgewählte Themen</title>
         </title>
         
            <p>Hands-on Materiel mit Beispielquelltexten.</p>
         
      
      <chapter hyphenation="yes" chapterpage="no" id="c20c1e01-1175-4664-a26a-71317760930f"
               ismodule="no">
         
            <title>
               <title id="81e11338-11b3-42c9-917d-d3f9d4bffb12">XSLT Uses Cases und Lösung</title>
            </title>
            
               <p>In diese Kapitel werden einige ausgewählte Themen zu XSLT dargestellt. Dabei geht es weder um Vollständigkeit noch um die beste/eleganteste Lösung, sondern eher um die Vorstellung eines Anwendungsszenarios mit einem potentiellen Lösungsansatz.</p>
            
         
         <chapter hyphenation="yes" chapterpage="no" id="ceed4546-a60b-4d5f-a625-6e79c180cc13"
                  ismodule="no">
            
               <title>
                  <title id="28a8c9ba-33b0-41ff-8681-da976df43b85">Vortransformationen </title>
               </title>
               
                  <p>Bei einer komplexen Transformation ist es ratsam und sogar manchmal unabdingbar die Konvertierung in einzelne Stufen aufzuteilen. Das hat folgende Vorteile:</p>
                  <ul>
                     <li>
                        <p>Der Prozess ist transparenter, da die einzelnen Stufen leichter überschaubar sind.</p>
                     </li>
                     <li>
                        <p>Die Zwischenergebnisse können für Debug-Zwecke ausgewertet werde oder dienen als Eingabe für andere Prozesse.</p>
                     </li>
                     <li>
                        <p>Nicht-relevante oder invalide Teilbäume können aus der Eingabeinstanz gefiltert werden, um so die weitere Verarbeitung zu beschleunigen.</p>
                     </li>
                     <li>
                        <p>Hilfskonstrukte können erzeugt werden. Diese erleichtern die weitere Verarbeitung.</p>
                     </li>
                  </ul>
                  <p>Es gibt zwei Möglichkeiten, wie eine Vortransformation eingebunden werden kann:</p>
                  <ul>
                     <li>
                        <p>In einem separaten File bzw. einer XML Instanz, die vom XSLT Prozessor vor der eigentlichen Transformation aufgerufen wird uns einen Zwischenstand produziert, der als Eingabe für den Haupttransformationsschritt dient.</p>
                     </li>
                     <li>
                        <p>Innerhalb des eigentlichen XSLT Stylesheets. Hier wird das Ergebnis der Vortransformation in einer Variablen erzeugt.</p>
                     </li>
                  </ul>
                  <p>Den zweiten Punkt möchte ich anhand einer Beispiel XSLT Skripts vorführen. Betrachten wir folgende Input Daten:</p>
                  <verbatim>&lt;education-system&gt;
  &lt;administrative-regions&gt;
    [...]
    &lt;dministrative-region id="31" name="Bavaria"&gt;
      &lt;shools&gt;
        &lt;school id="45"&gt;
          &lt;teachers&gt;
            &lt;teacher id="576"/&gt;
            &lt;teacher id="345"/&gt;
            &lt;teacher id="12"/&gt;
          &lt;/teachers&gt;
        &lt;/school&gt;
        &lt;school id="36"&gt;
          &lt;teachers&gt;
            &lt;teacher id="576"/&gt;
            &lt;teacher id="8"/&gt;
          &lt;/teachers&gt;
        &lt;/school&gt;
        [...]
      &lt;/shools&gt;
    &lt;/dministrative-region&gt;
    [...]
  &lt;/administrative-regions&gt;
&lt;/education-system&gt;</verbatim>
                  <p>Die erste Datei beinhaltet eine Zuordnung von Lehrern zu Schulen in verschiedenen Regierungsbezirken. Um die Daten zu den beiden referenzierten Objekten einzusehen müssen zwei weitere Dateien konsultiert werden. Die Datei, welche die Lehrer auflistet:</p>
                  <verbatim>&lt;teachers&gt;
  [...]
  &lt;teacher id="576"&gt;
    &lt;first-name&gt;Alfons&lt;/first-name&gt;
    &lt;last-name&gt;Blimetsrieder&lt;/last-name&gt;
    &lt;subjects&gt;
      &lt;subject&gt;Biology&lt;/subject&gt;
      &lt;subject&gt;Math&lt;/subject&gt;
      &lt;subject&gt;Sport&lt;/subject&gt;
    &lt;/subjects&gt;
    &lt;suspended&gt;2017-12-31&lt;/suspended&gt;
    [...]
  &lt;/teacher&gt;
  [...]
&lt;/teachers&gt;</verbatim>
                  <p>Und die Datei, welche die Schulen auflistet:</p>
                  <verbatim>&lt;schools&gt;
  [...]
  &lt;school id="45"&gt;
    &lt;name&gt;Gymnasium Bad Aibling&lt;/name&gt;
    &lt;type&gt;Oberschule&lt;/type&gt;
    [...]
  &lt;/school&gt;
  [...]
&lt;/schools&gt;</verbatim>
                  <p>Um diese Daten verarbeiten zu können ist es sinnvoll, die drei Dateien in einem ersten "Resolver" Schritt zusammenzuführen und ggf. irrelevante Strukturen zu entfernen. Lehrer aus obigem Beispiel können beispielsweise suspendiert worden sein. Das folgende Skript erledigt dies mittels einer zusätzlichen Transformation in eine Variable:</p>
                  <verbatim>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="2.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  exclude-result-prefixes="#all"&gt;
  
  &lt;xsl:output indent="yes" method="xml"/&gt;
  
  &lt;xsl:strip-space elements="*"/&gt;
  
  &lt;xsl:param name="file-1" required="yes"/&gt;
  &lt;xsl:param name="file-2" required="yes"/&gt;
  &lt;xsl:param name="file-3" required="yes"/&gt;
  
  &lt;xsl:variable name="files" select="(doc($file-1), doc($file-2), doc($file-3))"/&gt;
  &lt;xsl:variable name="bavaria-region-ids" select="(31, 58)"/&gt;
  
  &lt;xsl:key name="teachers" match="teacher" use="@id"/&gt;
  &lt;xsl:key name="schools" match="school" use="@id"/&gt;
  
  &lt;xsl:template name="main"&gt;
    &lt;xsl:variable name="resolve-result"&gt;
      &lt;xsl:apply-templates select="$files/administrative-regions" mode="resolve"/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:apply-templates select="$resolve-result/administrative-regions"/&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="administrative-region[not(@id = $bavaria-region-ids)]" 
                mode="resolve"/&gt;

  &lt;xsl:template match="school" mode="resolve"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:copy-of select="key('schools',@id, $files/schools[1]/root())/node()"/&gt;
      &lt;xsl:apply-templates select="node()|@*" mode="resolve"/&gt;      
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="teacher" mode="resolve"&gt;
    &lt;xsl:copy-of select="key('teachers',@id, $files/teachers[1]/root())/node()"/&gt;
  &lt;/xsl:template&gt;
    
  &lt;xsl:template match="teacher[suspended/xs:date(.) le current-date()]"/&gt;
  
  &lt;xsl:template match="node()|@*" mode="#all"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates mode="#current"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;
  
&lt;/xsl:stylesheet&gt;</verbatim>
                  <p>Im ersten Resolve-Schritt werden die Referenzen zu den Lehrer- und Schul-Objekten aufgelöst, d.h. die Attribute des Schul-Objekts werden in die Struktur aus der ersten Datei kopiert. Die Liste der Lehrer an diesen Schul-Objekten bleibt erhalten und wird mit dem Inhalt aus der zweiten Datei bestückt. </p>
                  <p>Zusätzlich werden alle Regierungsbezirke entfernt, die nicht zu Bayern gehören, was die weitere Verarbeitung wesentlich beschleunigen wird. Lehrer die suspendiert worden sind fliegen ebenfalls raus.</p>
               
            
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="888d37da-0dbe-4fae-bec9-2ad1e99f7818"
                  ismodule="no">
            
               <title>
                  <title id="d97b76dd-7b2b-48e3-9b9e-53a4197d41f8">Vererbung </title>
               </title>
               
                  <p>Mit XSLT kann man Konstrukte nachbilden, so wie sie in anderen Programmiersprachen auch vorhanden sind. Bspw. die Vererbung. Dabei wird in einer Spezialisierung eine schon bereits getätigte Implementierung übernommen und erweitert oder eingeschränkt.</p>
                  <p>Der Vorteil dabei ist, dass man nicht alles nochmal neu schreiben muss. Das verkleinert die Redundanz, führt zu einer besseren Wartbarkeit und einer geringeren Fehleranfälligkeit.</p>
                  <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                     id="8fab78d2-ad49-4d07-91a1-a757172fbe25d6e8">
                     
                        <title>
                           <title id="3e8c9912-e49a-4cf3-8836-4c6d59415fcdd6e9">Beispiel: Parameterisierung</title>
                        </title>
                        <p>Gewöhnlich implementiert man ein Stylsheet für ein bestimmtes Ausgabeformat und eine Produktvariante. Schrittweise werden dann weitere Varianten und Formate hinzugefügt.</p>
                        <p>Am komfortabelsten hat man es natürlich, wenn zu Beginn der Implementierung eine vollständige Spezifikation vorliegt... Das ist aber natürlich eher selten der Fall.</p>
                        <p>Aus diesem Grund ist es wichtig, sich eine gute Strategie zu überlegen, damit die Architektur nicht in Spagetthi-Code auswartet.</p>
                        <p>Eine gute Option wäre, die XSLT Import Präzedenz auszunutzen, vgl. Kapitel <doclink class="db988919-f71e-437e-b699-b6fdd2a32cb9"
                           id="ba4a6a74-bad9-4ea7-8917-529625d32b86">Eindeutigkeit der Regelbasis</doclink> .</p>
                        <p>Angenommen es geht darum zu einem späteren Zeitpunkt weitere Parameter einzuführen. Ein Switch, wie der folgende, müsste dann an mehreren Stellen im Code aktualisiert werden.</p>
                        <verbatim>&lt;xsl:choose&gt;
    &lt;xsl:when test="$myParameter='this_option'"&gt;
        &lt;!-- do this --&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="$myParameter='that_option'"&gt;
        &lt;!-- do that --&gt;
    &lt;/xsl:when&gt;
        [...]
&lt;/xsl:choose&gt;</verbatim>
                        <p>Besser ist es, wenn man ein Core-Stylesheet pflegt, das für ein Format und eine Produktvariante gut ausgetestet ist. Dieses Core-Stylesheet wird dann einfach für eine neue Variante importiert und relevante Teile werden für die neue "Spezialisierung" überschrieben. Beispielsweise könnte eine Regel zum Setzen des Headers auf jeder Seite so implementiert sein:</p>
                        <verbatim>&lt;xsl:template name="render-header"&gt;
    &lt;!-- print logo on the left side spanning two rows--&gt;
    &lt;!-- print some metadata right side first row --&gt;
    &lt;!-- print a running header right side second row --&gt;
&lt;/xsl:template&gt;</verbatim>
                        <p>Will man in einem neuen Format, bspw. A5, diese Logik austauschen und nur eine Zeile drucken, z.B. weil man nicht so viel Platz hat, so würde in einem "abgeleiteten" Stylesheet einfach die Regel noch einmal implementiert. </p>
                        <verbatim>&lt;xsl:choose&gt;
&lt;xsl:template name="render-header"&gt;
    &lt;!-- print a running header on left side --&gt;
    &lt;!-- print logo on right side --&gt;
&lt;/xsl:template&gt;</verbatim>
                        <p>Dieses Template hat nun Vorrang und wird zur Auswertung herangezogen, mit der Konsequenz, dass der Header nur einzeilig gedruckt wird. Das schöne an diesen "Named-Templates" ist auch, dass man sie innerhalb von Variablen verwenden kann:</p>
                        <verbatim>&lt;xsl:variable name="margin-width"&gt;
    &lt;xsl:call-template name="get-margin-width"/&gt;
&lt;/xsl:variable&gt;</verbatim>
                        <p>Das Template "get-margin-width" kann in einem "Sub"-Stylesheet überschrieben werden ohne dass die Variablen-Zugriffe im Core-Stylesheet angepasst werden müssten. Eine Zuweisung, wie:</p>
                        <verbatim>width="{$margin-width}"</verbatim>
                        <p>müsste nirgendwo im Code nochmal angefasst werden.</p>
                     
                  </chapter>
               
            
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="51bec5b9-1207-45cc-9bf2-b6ce3e300547"
                  ismodule="no">
            
               <title>
                  <title id="40515442-a67d-49f4-9945-0f9d227bd97e">XSLT Streaming</title>
               </title>
               
                  <p>Bei grossen flach strukturierten Datenmengen gibt es zwei Möglichkeiten:</p>
                  <procedure type="ol">
                     <step>
                        <action>
                           <p>Für einfache Sammel- und Auswertungsaufgaben schreibt man sich am besten einen kleinen Parser, z.B. mit der Python sgmllib<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                             address="https://docs.python.org/2/library/sgmllib.html">
                           <sup>↗↗</sup>
                        </url>.</p>
                        </action>
                     </step>
                     <step>
                        <action>
                           <p>Für komplexere Aufgaben, in denen man nicht an jeder Stelle über den ganzen XML Baum navigiert und sich die Werte zusammensuchen suchen muss, kann man die Streaming Funktion des Saxon XSLT Prozessors verwenden.</p>
                        </action>
                     </step>
                  </procedure>
                  <p>XSLT Streaming ist in der XSLT Version 3.0 neu hinzugekommen<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="https://www.saxonica.com/html/documentation/sourcedocs/streaming/xslt-streaming.html">
                  <sup>↗↗</sup>
               </url> und in der
kommerziellen Saxon-EE Löusug implementiert<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="https://www.saxonica.com/html/documentation/sourcedocs/streaming/">
                  <sup>↗↗</sup>
               </url>. Bei dieser Methode wird kein Eingabebaum im Speicher aufgebaut, was zu einer drastischen Performanzsteigerung führt.</p>
                  <p>Es gibt ein paar Regeln, die man bei der Verarbeitung großer Datenmengen über die Streaming Funktionen beachten sollte:</p>
                  <ul>
                     <li>
                        <p>Bei einer XPATH Auswertung sollte nur ein einfacher Ausdruck mit höchstens einer konsumierenden Selektion gegeben sein. Konsumieren heißt, dass vom Kontextknoten aus eine Knotenmenge abwärts selektiert wird. Dagegen bleibt die Information bzgl. der Ancestor-Achse erhalten.</p>
                     </li>
                     <li>
                        <p>Bei einer Selektion sollte man aber darauf achten nur atomarische Werte auszuwählen.</p>
                     </li>
                     <li>
                        <p>Knotenmengen, die über die Streaming Option eingelesen wurden, können nicht einer Funktion übergeben werden. Sie sind auch nicht einer Variablen zuweisbar.</p>
                     </li>
                     <li>
                        <p>"Crawler”-Ausdrücke, wie //section sind nicht nicht zu verwenden, ebenso ein rekursiver Abstieg mit Selektion, wie bspw. mit einem Apply-Templates Call.</p>
                     </li>
                  </ul>
                  <p>Zu Beginn der Streaming-Aktion kann man sich auf konventionelle Art und Weise Teilbäume, die nicht so performanzlastig aufgebaut werden, 
in einer Variablen abspeichern und im Verlauf der Streaming-Verarbeitung z.B. für einen Vergleich auswerten.</p>
                  <p>Ein einfaches Streaming Stylesheet könnte z.B. so aussehen:</p>
                  <verbatim>&lt;xsl:stylesheet version="3.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  exclude-result-prefixes="#all"&gt;
  
  &lt;xsl:output method="xml" indent="yes"/&gt;
  
  &lt;xsl:mode on-no-match="shallow-copy" use-accumulators="entry-count" streamable="true"/&gt;
  
  &lt;xsl:accumulator name="entry-count" as="xs:integer" initial-value="0" 
                   streamable="yes"&gt;
    &lt;xsl:accumulator-rule match="entry" select="$value + 1"/&gt;
  &lt;/xsl:accumulator&gt;
  
  &lt;xsl:template match="/"&gt;
    &lt;result&gt;
      &lt;xsl:apply-templates/&gt;
      &lt;count&gt;
        &lt;xsl:value-of select="accumulator-after('entry-count')"/&gt; 
      &lt;/count&gt;
    &lt;/result&gt;
  &lt;/xsl:template&gt;
  
&lt;/xsl:stylesheet&gt;</verbatim>
                  <p>Diese Stylesheet hat einige Besonderheiten:</p>
                  <p>Zum einen wird darin ein Default-Modus deklariert, der jeden Knoten der Eingabeinstanz über
eine implizite Identity-Transformation (shallow-copy)<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="https://www.saxonica.com/html/documentation/xsl-elements/mode.html">
                  <sup>↗↗</sup>
               </url> in die Ausgabeinstanz kopiert.</p>
                  <p>Auf herkömmlichem Weg würde man dafür ein Templates wie dieses verwenden:</p>
                  <verbatim>&lt;xsl:template match="node()|@*"
  &lt;xsl:copy&gt;
    &lt;xsl:apply-templates select="node()|@*"/&gt;
  &lt;/xsl:copy&gt;
&lt;/xsl:template&gt;</verbatim>
                  <p>Zum anderen wird ein Akkumulator verwendet. Normalerweise gibt es in XSLT keine Variablen,
sondern nur Konstanten, so wie das auch bei funktionalen Programmiersprachen der Fall ist.</p>
                  <p>Es gab zwar schon länger eine Saxon-Erweiterung, die die mehrmalige Zuweisung eines Wertes
an eine Variable erlaubte, im Normallfall braucht man diese Eigenschaft aber nicht.</p>
                  <p>Ber der Verarbeitung sehr großer Datemengen, ist es aber unumgänglich, denn sonst
würde der Laufzeitstapel schnell an seine Grenzen gelangen.</p>
                  <p>Ein Akkumulator akkumuliert Werte, wie der Name schon sagt. Das können atomare Typen sein,
wie im obigen Beispiel, aber auch Datenstrukturen können aufgebaut werden, wie 
bspw. das Abspeichern des gerade prozessierten Teilbaums in einem Dictionary zur 
späteren Auswertung bzw. Gruppierung der Key-Elemente.</p>
                  <p>Auch im Akkumulator muss das streamable="yes" Property gesetzt sein, wenn er im 
Streaming-Modus arbeiten soll. In diesem Modus kann der Akkumulatorwert erst ausgelesen werden,
wenn der untersuchte Baum vollständig durchlaufen wurde.</p>
                  <p>Um die Unterschiede zum "normalen" XSLT Betrieb festzustellen, können im obigen Beispiel 
einige offensichtlich korrekte Änderungen vorgenommen werden, die der Streaming 
Prozessor allerdings nicht akzeptiert.</p>
                  <verbatim>Cannot call accumulator-after except during the post-descent 
phase of a streaming template</verbatim>
                  <p>Diese Fehlermeldung erscheint, wenn man den Apply-Templates Call entfernt. Der Akkumulator
wird also nur befüllt, wenn der Baum auch explizit durchlaufen wurde. Dieser Durchlauf 
kann auch ein reines Kopieren sein, bspw. kann man den Apply-Templates Call auch durch ein</p>
                  <verbatim>&lt;xsl:copy-of select="."/&gt;</verbatim>
                  <p>ersetzen, was gleichbedeutend mit der Mode Einstellung</p>
                  <verbatim>on-no-match="deep-copy"</verbatim>
                  <p>wäre. Wie man sieht hat sich in XSLT 3.0 viel bzgl. der Handhabung verschiedener
Verarbeitungsmodi getan. Anstatt Default-Match Regeln zu schreiben, kann man ganz oben
am Stylesheet Modus Properties setzen, die den Baumdurchlauf auf verschiedene
Arten realisieren.</p>
                  <p>Die Verarbeitung großer Datenmenden ist aber mit Streaming etwas tricky und es sollte geprüft 
werden, ob ggf. konventionelles Performanz-optimiertes XSLT für den Answendungsfall ausreichen
würde.</p>
               
            
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="e3ccdc75-56e4-45b3-a2be-07a61a2dcd51"
                  ismodule="no">
            
               <title>
                  <title id="6e53fba3-c83c-4a92-8cea-170e5781324c">Identifikation mit generate-id()</title>
               </title>
               
                  <p>Die generate-id() Funktion gibt es in XSLT schon immer. Mit ihr kann eine Prüfsumme eines Knotens im Baum generiert werden.</p>
                  <p>Das funktioniert natürlich nur, wenn man bei der Auswertung dieses Wertes nicht den Kontext wechselt. D.h. z.B. dass ein Knoten in einem Baum,
der in einer Variablen gespeichert ist, eine andere Prüfsumme bekommt, als derselbe Knoten im Kontext-Baum.</p>
                  <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                     id="e8ec86c2-690d-4e7b-a0e5-be6d7297a7fad6e8">
                     
                        <title>
                           <title id="fc5861f4-cba9-4568-8ebe-a70d04f46a66d6e9">Beispiel Stückliste</title>
                        </title>
                        <p>Ein Anwendungszenario wäre bspw. die Generierung einer Target-ID für ein Bauteil in einer Stückliste. Das Bauteil ist nur einmal im 
System erfasst, hat also eine eindeutige ID, soll aber an mehreren Stellen in die Ausgabe (Eine Dokumentation für eine Maschine)
generiert werden.</p>
                        <p>Die Id an einem Element &lt;part id=“1234”&gt; würde somit mehrfach in die XML Eingabe für einen XSL-FO Prozessor erscheinen und ist 
für Referenzen unbrauchbar geworden.  Deshalb ist es ratsam beim Rendern der Bauteile eine neue Id zu vergeben, das kann z.B. 
mit den folgenden Templates (vereinfacht) passieren:</p>
                        <verbatim>&lt;xsl:key name="parts" match="part" use="@id"/&gt;
  
&lt;xsl:template match=“part” mode=“content"&gt;
  &lt;!-- Ausgabe des Bauteils im Content Bereich --&gt;
  &lt;fo:block id="{generate-id()}"&gt;
    &lt;fo:external-graphic xsl:use-attribute-sets="part.img"/&gt;  
  &lt;/fo:block&gt;
&lt;/xsl:template&gt;
    
&lt;xsl:template match=“part” mode=“part-list"&gt;
  &lt;!-- Ausgabe einer Liste mit allen Verweisen an unterschiedicher Stelle --&gt;
  &lt;fo:block&gt;
    &lt;xsl:for-each select="key('parts',@id)"&gt;
      &lt;fo:page-number-citation ref-id="{generate-id()}"/&gt;
    &lt;/xsl:for-each&gt;
  &lt;/fo:block&gt;
&lt;/xsl:template&gt;</verbatim>
                     
                  </chapter>
                  <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                     id="93c4b796-1c96-41a7-b9b4-1e80170d1cd6d6e17">
                     
                        <title>
                           <title id="90386d0e-7162-471c-8c09-8bb00da36da5d6e17">Beispiel Mantel Dokument</title>
                        </title>
                        <p>Im Bereich EDI Datenaustausch werden große XML Dateien versendet, die man auf einzelne Transmissions 
aufsplitten will, um sie in einer XML Datenbank abspeichern zu können. Die Struktur einer Datenübertragung
könnte folgendermassen aussehen:</p>
                        <verbatim>WRAPPER1
  SEQUENZ1
  SEQUENZ2
  SEQUENZ3
  WRAPPER2
    SEQUENZ1
    SEQUENZ2
    SEQUENZ3
    SEQUENZ4
    WRAPPER3
      SEQUENZ1
      SEQUENZ2
      CONTENT
        DATA1
        DATA2
        DATA3
        DATA4
        DATA5
      CONTENT
        DATA1
        DATA2
        DATA3
        DATA4
        DATA5
      WRAPPER4
        SEQUENZ1
      CONTENT
        DATA1
        DATA2
        DATA3
        DATA4
        DATA5
      [...]</verbatim>
                        <p>Jedes einzelne CONTENT Element soll nun einen Mantel erhalten und separat in einer Datei abgelegt werden.
Der "Umschlag" soll dabei alle Elemente des Rahmens der Transmission erhalten. Also alles auf der
Descendant-Achse bis zum Element WRAPPER3, ausserdem noch die Elemente SEQUENZ1 und SEQUENZ2,
sowie das Element WRAPPER4 mit Kind SEQUENZ1.Ohne groß auf die Performanz zu achten, könnte das recht einfach so realisiert werden:</p>
                        <verbatim>&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0"&gt;
    
  &lt;xsl:output method="xml" indent="yes"/&gt;
  &lt;xsl:strip-space elements="*"/&gt;
  
  &lt;xsl:template match="/"&gt;
    &lt;xsl:apply-templates select="/WRAPPER1/WRAPPER2/WRAPPER3/CONTENT" mode="umschlag"/&gt;
  &lt;/xsl:template&gt;
    
  &lt;xsl:template match="CONTENT" mode="umschlag"&gt;
    &lt;xsl:result-document href="{concat(@id,'.xml')}"&gt;
      &lt;umschlag&gt;
        &lt;metadaten&gt;&lt;!-- einige Metadaten --&gt;&lt;/env:metadata&gt;
        &lt;nutzdaten&gt;
            &lt;xsl:apply-templates select="ancestor::WRAPPER1"&gt;
              &lt;xsl:with-param name="this-id" select="generate-id()" tunnel="yes"/&gt;
            &lt;/xsl:apply-templates&gt;
        &lt;/nutzdaten&gt;
      &lt;/umschlag&gt;
    &lt;/xsl:result-document&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="node()|@*"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates select="node()|@*"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;
    
  &lt;xsl:template match="CONTENT"&gt;
    &lt;xsl:param name="this-element" tunnel="yes"/&gt;
    &lt;xsl:if test="$this-id = generate-id()"&gt;
      &lt;xsl:copy&gt;
        &lt;xsl:apply-templates select="node()|@*"/&gt;
      &lt;/xsl:copy&gt;
    &lt;/xsl:if&gt;
  &lt;/xsl:template&gt;
    
&lt;/xsl:stylesheet&gt;</verbatim>
                        <p>Im rekursiven Abstieg wird im Modus "umschlag" jedes CONTENT Element selektiert und
in einen Umschlag verpackt. Der eigentlich Inhalt des Umschlags wird generiert,
indem der gesamte XML Baum über die Standard-Kopierregel in das Element &lt;nutzdaten&gt;
gesetzt wird. Dabei wird aber nur derjenige CONTENT Abschnitt evaluiert, der
zu der als Parameter übergebenen generierten Id passt.</p>
                     
                  </chapter>
               
            
         </chapter>
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="8969a5d0-6c34-4bc8-8b60-3a070bc123d7"
               ismodule="no">
         
            <title>
               <title id="79507fbb-caa9-4316-8097-2d7e55208d81">XQuery Use Cases und Lösung</title>
            </title>
            
               <p>In diese Kapitel werden einige ausgewählte Themen zu XSLT dargestellt. Dabei geht es weder um Vollständigkeit noch um die beste/eleganteste Lösung, sondern eher um die Vorstellung eines Anwendungsszenarios mit einem potentiellen Lösungsansatz.</p>
            
         
         <chapter hyphenation="yes" chapterpage="no" id="3e443c28-8698-470b-b443-f286ff7ed2d5"
                  ismodule="no">
            
               <title>
                  <title id="743f34bc-c83e-49d3-9a2e-2c38d1c384c9">Namespaces</title>
               </title>
               
                  <p>Wenn man XML Instanzen aus unterschiedlichen Quellen mit XSLT verarbeiten will, wird man sich wohl
oder übel mit dem Thema Namespaces (NS) auseinander setzen müssen, um Konflikte in den 
Elementselektoren zu vermeiden.</p>
                  <p>Gerade bei hintereinandergeschalteten Transformationen kann es auch passieren, 
dass unerwartet ein Namespace in die Ausgabe generiert wird,
den der folgende Prozesschritt nicht versteht, weil er dort nicht deklariert wurde.</p>
                  <p>Es gibt meherere Möglichkeiten einen Namespace im Stylesheet zu deklarieren. Gehen wir davon aus,
dass in einem Transformationsschritt genau eine Quelle und max. eine Konfigurationsdatei verarbeitet 
wird, dann kann das Stylsheet-Element bspw. so aussehen:</p>
                  <verbatim>&lt;xsl:stylesheet version="2.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" 
  xmlns:tektur="https://namespace-eigener-xslt-funktionen"
  xmlns="http://namespace-in-der-xml-eingabe.com/"
  xpath-default-namespace="https://namespace-der-konfigdatei.com/"
  exclude-result-prefixes="#all"&gt;</verbatim>
                  <ul>
                     <li>
                        <p>Der <b>xsl</b> Namespace ist klar</p>
                     </li>
                     <li>
                        <p>Der <b>xs</b> Namespace ist notwendig, wenn man typisiert arbeiten will. Er erlaubt das Einbinden von Datentypen
nach der XML Schema Spezifikation<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                          address="https://de.wikipedia.org/wiki/XML_Schema">
                        <sup>↗↗</sup>
                     </url> und somit die 
bessere Validierung des Stylesheets zur Compile-Zeit.</p>
                     </li>
                     <li>
                        <p>Die Deklaration eines eigenen geprefixten Namespaces erlaubt das Einbinden von eigenen XSLT Funktionen, 
wie z.B. auch das Einbinden der FunctX Bibliothek<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                          address="http://www.xsltfunctions.com/">
                        <sup>↗↗</sup>
                     </url>
                  </p>
                     </li>
                     <li>
                        <p>Der Nicht-geprefixte Namespace ist der Default-Namespace und kann einen NS aus der Eingabe handeln</p>
                     </li>
                     <li>
                        <p>Das Attribut <b>xpath-default-namespace</b> gibt einen weiteren NS an, der in XPATH Funktionen verwendet werden kann.
In diesem Feld würde ich den NS einer Konfigurations- oder separaten Datendatei angeben.</p>
                     </li>
                  </ul>
                  <p>Mehr als einen NS in der Eingabe sollte man aus meiner Sicht bei der XML Verarbeitung nit XSLT vermeiden wenn es geht.
GGf. empfiehlt es sich, die Eingabe vor der Verabeitung zu normalisieren und Elemente ggf. umzubennen.</p>
                  <danger>
                     <cause>Befinden sich in den Eingabedaten Namespaces, die man in den XSLT Stylesheets nicht handelt - der Namespace kann auch nur
an einem ganz bestimmten Element hängen - so kannp bei der Transformation - ohne Fehlermeldung - zu unerwarteten Ergebnissen kommen.</cause>
                     <consequence>Deshalb sollte man die Daten im Vorfeld bzgl. Namespaces sehr genau analysieren.</consequence>
                  </danger>
                  <p>Namespaces in der Eingabe werden über die Kopfdeklaration in der Stylesheetdatei gehandelt, welcher Namespace
schliesslich in die Ausgabe geschrieben wird, hängt vom aktuell verarbeiteten Kontextknoten ab:</p>
                  <ul>
                     <li>
                        <p>Elemente, die man erzeugt, erhalten automatisch den Default-Namespace, wenn man nicht explizit einen NS angibt.</p>
                     </li>
                     <li>
                        <p>Elemente, die man kopiert, transportieren den Namespace, den sie in der Eingabe hatten, wenn man dies nicht explizit verhindert.</p>
                     </li>
                  </ul>
                  <p>Um diese beiden Default Einstellungen zu steuern (bzw. zu überschreiben) gibt es mehrere Möglichkeiten:</p>
                  <verbatim>&lt;xsl:element name="{local-name()}" namespace="{namespace-uri()}"&gt;</verbatim>
                  <p>Hier wird ein Element mit dem un-geprefixten Namespace des Kontextknotens deklariert.
Wenn der Kontextknoten keinen anderen Namespace hat, so wird hierdurch sichergestellt,
dass der Default Namespace auch tatsächlich in die Ausgabe kommt.</p>
                  <verbatim>&lt;xsl:element name="meinelement" namespace=""&gt;</verbatim>
                  <p>Hier wird ein Element ohne Namespace Angabe in die Ausgabe geschrieben. Es würde dann
den Default-Namespace der Ausgabe erben. Es gibt auch ein Attribut am xsl:copy Element,
das den Vorgang des Namespace-Kopierens steuern kann:</p>
                  <verbatim>&lt;xsl:template match="p"&gt;
  &lt;xsl:copy copy-namespaces="no"&gt;
     &lt;xsl:apply-templates/&gt;
   &lt;/xsl:copy&gt;
&lt;/xsl:template&gt;</verbatim>
                  <p>Hier wird der Namespace am p Element nicht in die Ausgabe geschrieben. Ggf. funktiniert diese
Funktion aber mit unerwarteten Ergebnissen, deshalb sollte man sich nicht darauf verlassen.</p>
                  <p>Ebenso kann eine Default-Kopierregel verwendet werden, die es verbietet einen Namespace
weiterzuvererben:</p>
                  <verbatim>&lt;xsl:template match="@* | node()"&gt;
   &lt;xsl:copy inherit-namespaces="no"&gt;
     &lt;xsl:apply-templates select="@* | node()"/&gt;
   &lt;/xsl:copy&gt;
&lt;/xsl:template&gt;</verbatim>
                  <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                     id="0087e948-91f4-4a6f-a7a5-27cc1593d170d6e73">
                     
                        <title>
                           <title id="ad139a27-9649-4c97-8f05-a62edd570cb7d6e74">Namespaces in XQuery</title>
                        </title>
                        <p>Während XSLT dazu dienen sollte, XML Daten in andere (XML-) Formate zu transformieren, dient XQuery 
z.B. dazu auf einer NoSQL Datenbank Daten aus unterschiedlichen Quellen
zu selektieren, zu harmonisieren und an verarbeitende Prozesse weiterzugeben.</p>
                        <p>Deshalb ist es für mich nicht so erstaunlich, dass das Namespace Konzept in XQuery irgendwie besser
funktioniert.</p>
                        <p>Damit man überhaupt Daten auf einem mit Namespaces versehenen XML Dokument selektieren
kann, müssen alle Namspaces am Anfang des XQuery Ausdrucks angegeben werden, das sieht so aus:</p>
                        <verbatim>xquery version "1.0-ml";

import module namespace tektur = "http://www.teturcms.de/xquery/common" 
                                  at "common.xqy";
import module namespace mem = "http://xqdev.com/in-mem-update" 
                                  at '/MarkLogic/appservices/utils/in-mem-update.xqy';
declare namespace local = "https://lambdawerk.com/code/alex-sandbox/1.0";
declare namespace weiredns = "https://weired-ns-in-input-data.com/weired/ns";
declare namespace xs = "http://www.w3.org/2001/XMLSchema"; </verbatim>
                        <p>Hier werden zuerst Funktionen aus anderen Modulen eingebunden, nämlich die in einer Datei common.xqy
im selben Verzeichnis aus der eigenen Entwicklung, sowie die Bibliothek mem aus der MArklogic
Umgebung. Danach wird ein NS local deklariert, den man verwenden wird, wenn im weiteren Verlauf
eigene XQuery Funktionen verwendet werden sollen, sowie der NS weiredns, der in den Eingabedaten
vorhanden ist. Der NS xs ist analog zum XSLT Beispiel gesetzt.</p>
                     
                  </chapter>
               
            
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="0846d6a2-6999-42ab-9e83-55bc197fc11c"
                  ismodule="no">
            
               <title>
                  <title id="0e661463-0259-4d9f-a784-93f4f169bc52">Abfragen mit XQuery</title>
               </title>
               
                  <p>Xquery führt im Publishing-Bereich ein Schattendasein. In meiner Zeit als XSL Programmierer für zwei Publishing  Firmen hatte ich damit nie zu tun. Erst als ich näher an den eigentlichen Daten war und mit XML Datenbanken zu tun hatte, kam ich mit XQuery in Berührung.</p>
                  <p>Während relationale Datenbanken mit SQL abgefragt werden, verwendet man bei XML Datenbanken, wie eXist<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="http://exist-db.org/exist/apps/homepage/index.html">
                  <sup>↗↗</sup>
               </url> oder Marklogic<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="https://de.marklogic.com/">
                  <sup>↗↗</sup>
               </url>, XQuery als Abfragesprache.</p>
                  <p>Aber auch einzelne XML Dokumente können z.B. in Oxygen XML Editor mit dem XQuery Builder Tool<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="https://www.oxygenxml.com/xml_editor/xquery_builder.html">
                  <sup>↗↗</sup>
               </url> oder auch per Saxon Kommandozeile abgefragt werden:</p>
                  <verbatim>java -cp usr/lib/saxon/saxon.jar net.sf.saxon.Query 
     -s:"schulen.xml" 
     -qs:"/schulen/schule[id='6']" 
     -o:"/Users/Alex/Desktop/schule_6.xml"</verbatim>
                  <p>Mit der Option <b>-qs </b>kann hier der Querystring angebenen werden. </p>
                  <p>Wie man an dem einfachen Beispiel schon sieht, ist XQuery mit XPATH verwandt. XQuery umfasst den Sprachumfang von XPATH bietet aber zusätzlich die FLOWR Syntax um mächtigere Abfragen stellen zu können. Mittels weiterer Extensions<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="http://cs.au.dk/~amoeller/XML/querying/flwrexp.html">
                  <sup>↗↗</sup>
               </url> können aber auch ganze Programme erstellt werden, die weit über die Funktionalität einer "Abfragesprache" hinausgehen.</p>
                  <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                     id="dbd25cc4-675f-4327-bec1-f80457cd9986d6e19">
                     
                        <title>
                           <title id="c7e8acb5-6c21-4de1-a88d-8bbd376bbbb4d6e20">XQuery Builder</title>
                        </title>
                        <p>Oxygen XML Editor bietet eine schöne Möglichkeit XQuery-Abfragen 
auf einem geladenen XML Dokument auszuführen. Dazu kann man 
seine Query in das betreffende Eingabefenster schreiben.</p>
                        <figure pdfwidth="page">
                           <subtitle>oXygen XQuery Builder</subtitle>
                           <img src="./client/data/0846d6a2-6999-42ab-9e83-55bc197fc11c/xquery-builder.png"/>
                        </figure>
                        <p>Mit folgendem Ergebnis:</p>
                        <verbatim>&lt;dates&gt;
  &lt;today&gt;2019-01-16+01:00&lt;/today&gt;
  &lt;formatted&gt;Wednesday, 16th January 2019&lt;/formatted&gt;
&lt;/dates&gt;</verbatim>
                     
                  </chapter>
                  <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                     id="7955ea5d-939e-47ca-8b87-de752d45673dd6e32">
                     
                        <title>
                           <title id="59f98501-17c8-47d7-a314-8f89c6b7299ed6e33">FLOWR Expression</title>
                        </title>
                        <p>FLOWR steht für for, let, where, order by, return. Das sind die Query-Anweisungen, die in 
dem Ausdruck erlaubt sind - in genau dieser Reihenfolge.</p>
                        <verbatim>let $bibliothek := .
for $x in $bibliothek//buecher,
    $y in $bibliothek//autoren/autor
where starts-with($autor, 'Grass')
    and $x/@autorId = $y/@id
return $x/titel</verbatim>
                        <p>In dieser Query werden die Titel aller Bücher von Grass zurückgeliefert.
Bemerkenswert ist hier die Syntax.</p>
                        <note>
                           <consequence>
                              <p>Normalerweise würde man zwischen den
einzelnen Anweisungen einen Blockabschluss, wie ein Semikolon erwarten.
Da wir aber hier funtional prorgammieren, ist die Sache etwas anders...</p>
                           </consequence>
                        </note>
                     
                  </chapter>
                  <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                     id="d4cc18f7-ad32-40d9-b0ed-abc2fe654b98d6e44">
                     
                        <title>
                           <title id="7dbf0fb3-8421-43c4-b792-0eba61c4bf27d6e44">XML per XQuery</title>
                        </title>
                        <p>Es ist aber auch möglich XML zu erzeugen, wobei natürlich für eine Transformation XSLT 
vorzuziehen ist. Dazu werden Tags direkt in die Expression geschrieben, wie z.B. hier:</p>
                        <verbatim>declare variable $nachname as xs:string external;
&lt;buecher autor="{$nachname}"&gt;
{
  let $bibliothek := .
  for $x in $bibliothek/buecher//buch,
      $y in $bibliothek/autoren//autor
  where starts-with($y, $nachname)
      and $x/@autorId = $y/@id
  order by $x/ausgabe
  return
  &lt;buch ausgabe="{$x/ausgabe}"&gt;
    {$x/titel}
  &lt;/buch&gt;
}
&lt;/buecher&gt;</verbatim>
                        <p>Speichert man dieses Schnippsel in einer Datei buecher.xquery ab,
so kann man mit der folgenden Kommandozeile auf einer buecher.xml
Datei als Eingabe suchen:</p>
                        <verbatim>java -cp usr/lib/saxon/saxon.jar net.sf.saxon.Query -t -s:buecher.xml 
                                                       -q:buecher.xquery 
                                                       -o:ergebnis.xml 
                                                       nachname=grass</verbatim>
                     
                  </chapter>
                  <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                     id="05c40eea-5e6f-4a74-9e6b-fb569fc33d29d6e55">
                     
                        <title>
                           <title id="72199b87-ef45-4bac-93aa-a03892a63e12d6e54">Document Projection</title>
                        </title>
                        <p>Document Projection<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                       address="http://www.saxonica.com/documentation/#!sourcedocs/projection">
                     <sup>↗↗</sup>
                  </url>  ist ein verstecktes Saxon XQuery Feature. Es funktioniert nur für eine einzige Abfrage.
Das kann schon recht hilfreich sein, wenn man ein mehrere 100MB großes Dokument durchsuchen
will.</p>
                        <p>Ohne Projection würde das Beispiel von oben so verarbeitet:</p>
                        <verbatim>java -cp usr/lib/saxon/saxon.jar net.sf.saxon.Query -t 
     -s:buecher.xml 
     -q:buecher.xquery 
     -o:ergebnis.xml 
     -projection:off 
     nachname=grass
Saxon-EE 9.7.0.20J from Saxonica
Java version 1.8.0_60
Using license serial number V005095
Analyzing query from Desktop/buecher.xquery
Generating byte code...
Analysis time: 201.10095 milliseconds
Processing file:/Users/Alex/buecher.xml
Using parser com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser
Building tree for file:/Users/Alex/buecher.xml 
using class net.sf.saxon.tree.tiny.TinyBuilder
Tree built in 3.482278ms
Tree size: 46 nodes, 58 characters, 6 attributes
Execution time: 27.137589ms
Memory used: 67031664</verbatim>
                        <p>Mit der Option -projection:on verändert sich die Ausführungszeit signifikant:</p>
                        <verbatim>[...]

Document projection for file:/Users/Alex/buecher.xml
-- Input nodes 50; output nodes 27; reduction = 46%
Tree built in 3.80615ms
Tree size: 26 nodes, 58 characters, 3 attributes
Execution time: 15.83463ms
Memory used: 64339064</verbatim>
                     
                  </chapter>
               
            
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="38f7a676-cbef-4a69-9ae9-d89bddde2719"
                  ismodule="no">
            
               <title>
                  <title id="d9ecd69d-0fbd-4931-8d5b-fe5bee02f362">Connector zu Marklogic in Oxygen</title>
               </title>
               
                  <p>Marklogic bietet zwar auf Port 8000 per Default ein Query Console im Browser, mit der man bestimmte Sachen ausprobieren kann. Komfortabler arbeitet man aber mit einem Oxygen-Connector. Dazu öffnet man den <i id="69aba0a2-ccaa-4d60-bbf7-1fd62f608ca5d6e6">Data Source Explorer</i>: </p>
                  <figure pdfwidth="page">
                     <desc id="9ec26a70-15c4-41e3-804e-2e53b5ab8ef6d6e10">oXygen Data Source Explorer View öffnen</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/show-view-data-source-explorer.png"/>
                  </figure>
                  <p>und konfiguriert eine neue Datenquelle:</p>
                  <figure pdfwidth="page">
                     <desc id="3f850e7f-8aa0-4afa-b743-7307baaaebc7d6e16">Neue Datenquelle in oXygen konfigurieren</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/configure-data-sources.png"/>
                  </figure>
                  <p>Dazu muss man den Marklogic Treiber installieren<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="https://www.oxygenxml.com/doc/versions/20.1/ug-editor/topics/configure-marklogic-datasource.html">
                  <sup>↗↗</sup>
               </url> und diesen im folgenden Screen verfügbar machen.</p>
                  <caution>
                     <cause>Das Jar sollte an einem soliden Ort abgespeichert werden, da hier nur ein Verweis auf diesen Ort gesetzt wird.</cause>
                     <consequence/>
                  </caution>
                  <figure pdfwidth="page">
                     <desc id="c2e5f47b-55e4-42dd-adcf-3e393d9b4fd4d6e27">Marklogic Treiber auswählen</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/add-marklogic-jar.png"/>
                  </figure>
                  <p>Natürlich ist auf der Serverseite auch eine Einstellung notwendig. Man wechselt als Admin in den Bereich <b>App Servers</b> und fügt einen neuen <b>WebDAV Server</b>  hinzu. Ggf. muss man bei der Auswahl der Datenbank diese noch auf "automatische Directory Erzeugung" umstellen.</p>
                  <figure pdfwidth="page">
                     <desc id="3edc02e3-2d0c-4a8a-9461-09f0769f96d0d6e39">Wechseln in die Marklogic App Server Verwaltung</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/appserver.png"/>
                  </figure>
                  <figure pdfwidth="page">
                     <desc id="1c0476fc-2a67-47eb-96c1-ff65bdd9fd53d6e43">WebDAV in Marklogic konfigurieren</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/marklogic-create-webdav.png"/>
                  </figure>
                  <p>Hat man den WebDAV Server erzeugt und diesem eine bestehende oder neu angelegte Datenbank zugewiesen, dann kann man diese DB im Konfigurationsdialog der neuen WebDav Connection auswählen.</p>
                  <figure pdfwidth="page">
                     <desc id="fa00df67-2ba2-447d-b9be-04cb1e142f79d6e50">Konfigurieren der WebDAV Connection Einstellungen in oXygen</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/cnfigure-database-connection.png"/>
                  </figure>
                  <p>Schliesslich hat man im Data Source Explorer in oxygen die neue Verbindung verfügbar und kann gefühlt wie im Dateisystem mit den Files auf dem Server arbeiten.</p>
                  <figure pdfwidth="page">
                     <desc id="0729c1e0-91c9-472d-bc9f-a33e8a77d5abd6e56">oXagen Data Source Explorer zeigt die WebDAV Verzeichnisse auf dem Marklogic Server</desc>
                     <img src="./client/data/38f7a676-cbef-4a69-9ae9-d89bddde2719/Data-Source_explorer.png"/>
                  </figure>
               
            
         </chapter>
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="b3eba8f1-fb04-4ab5-ac92-5f52c80d1936"
               ismodule="no">
         
            <title>
               <title id="05ed1e37-8006-4bb7-ba6a-7c143ff22106">Testing</title>
            </title>
            
               <p>In diese Kapitel werden einige ausgewählte Themen zum Testing von XSLT und XQuery Programmen dargestellt. Dabei geht es weder um Vollständigkeit noch um die beste/eleganteste Lösung, sondern eher um die Vorstellung eines Anwendungsszenarios mit einem potentiellen Lösungsansatz.</p>
            
         
         <chapter hyphenation="yes" chapterpage="no" id="6fd7b270-9d1f-4f8e-996f-13b5862956a9"
                  ismodule="no">
            
               <title>
                  <title id="a693fc99-5e16-4788-95a0-958870aa845a">Validierung mit Schematron</title>
               </title>
               
                  <p>Um die Korrektheit einer XML Instanz zu prüfen, gib es verschiedene Schemata, wie XSD, RNG oder DTD, welche der Parser beim Aufbau des DOM Baums heranzieht. Eine Validierung mit Apache Xerces könnte beispielsweise als Java Code folgendermaßen angestossen werden:</p>
                  <verbatim>URL schemaFile = new URL("http://host:port/filename.xsd");
Source xmlFile = new StreamSource(new File("web.xml"));
SchemaFactory schemaFactory = SchemaFactory
    .newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
try {
  Schema schema = schemaFactory.newSchema(schemaFile);
  Validator validator = schema.newValidator();
  validator.validate(xmlFile);
  System.out.println(xmlFile.getSystemId() + " is valid");
} catch (SAXException e) {
  System.out.println(xmlFile.getSystemId() + " is NOT valid reason:" + e);
} catch (IOException e) {</verbatim>
                  <p>Schema Dateien können aber auch in XML Editoren eingebunden werden, um schon während der Eingabe der XML Instanz die Korrektheit zu überprüfen. </p>
                  <p>Das geht einerseits über die Angabe des Doctypes in der XML Instanz, anderseits bieten auch alle Editoren die Möglichkeit ein bestimmtes Schema explizit auszuwählen, um gegen dieses auf Anforderung zu validieren.</p>
                  <p>Gilt es komplexere Businessregeln zu überprüfen, die über Syntax-, Konsistenz- und einfache Korrektheitschecks hinausgehen, empfiehlt sich eine Validierung mit Schematron Regeln.</p>
                  <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                     id="21e887d9-7aeb-43cc-a506-ed4ebb9b66d8d6e14">
                     
                        <title>
                           <title id="c802dd14-5953-4c24-8637-f7552d107e57d6e13">Schematron ist XSLT</title>
                        </title>
                        <p>Bei einer Schematron Validierung wird eine XML Instanz mit Hilfe eines automatisch generierten XSLT Stylesheets überprüft. Dieses kontextabhängige Stylesheet wird aus einer in der Schematron Syntax vom Autor verfassten Regelbasis, die wiederum in XML vorliegt, über ein zweites XSLT Stylesheet generiert - Dieses zweite XSLT Stylesheet ist sozusagen das eigentliche Schematron Programm. </p>
                        <p>Das folgende Diagramm veranschaulicht die Vorgehensweise anhand eines Filter-Szenarios, bei dem ein XML Dokument mit einigen ungültigen Passagen in eine gefilterte Darstellung überführt wird.</p>
                        <figure pdfwidth="page">
                           <subtitle>Schematron Validierung mit Filter</subtitle>
                           <img src="./client/data/6fd7b270-9d1f-4f8e-996f-13b5862956a9/schematron.svg"/>
                        </figure>
                        <p>Zu finden ist das Schematron Programm auf Github: https://github.com/Schematron/schematron. Dieses Repo ist etwas unübersichtlich. Der relevante Teil des Sourcecodes befindet sich unter: <b>schematron/code</b>
                        </p>
                     
                  </chapter>
                  <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                     id="f3496d06-b1ea-4959-8e31-db0afc948b52d6e30">
                     
                        <title>
                           <title id="0cc5ca05-4506-44eb-981b-f74a156e6da0d6e20">CLI Verwendung</title>
                        </title>
                        <p>Um die Schematron XSLT Skripte in eine eigene XSLT Anwendung per Kommandozeile einzubinden, könnte man folgendermassen vorgehen: </p>
                        <ul>
                           <li>
                              <p>Im eigenen GIT Projekt das Schematron Projekt als Submodule referenzieren.</p>
                           </li>
                           <li>
                              <p>Eine Regelbasis anlegen, beispielsweise <b>$project_name.sch</b>.</p>
                           </li>
                           <li>
                              <p>Zwei Batch-Skripte anlegen, beispielsweise <b>generate_schema.sh</b> und <b>validate.sh</b>.</p>
                           </li>
                        </ul>
                        <p>Mittels des Skripts <b>generate_schema.sh</b> wird aus der Schematron Regelbasis das Schematron XSLT Stylesheet generiert. Der Inhalt dieser Batchdatei könnte zum Beispiel so aussehen:</p>
                        <verbatim>saxon $script_dir/$project_name_validation.sch $script_dir/schematron/iso_dsdl_include.xsl
 | \ saxon -s:- $script_dir/schematron/iso_abstract_expand.xsl | \
saxon -s:- $script_dir/schematron/iso_svrl_for_xslt2.xsl \
  <b>generate-fired-rule</b>=false &gt; $script_dir/$project_name_validation.xsl</verbatim>
                        <p>Der Prozess zum Erzeugen des projektspezifischen Validerungs-XSLT-Skripts ist dreistufig und wird über die folgenden XSLT Schritte abgearbeitet.</p>
                        <ul>
                           <li>
                              <p>iso_dsdl_include.xsl</p>
                           </li>
                           <li>
                              <p>iso_abstract_expand.xsl</p>
                           </li>
                           <li>
                              <p>iso_svrl_for_xslt2.xsl</p>
                           </li>
                        </ul>
                        <p>Herauszufinden, was in diesen Skripten passiert, sei dem geneigten Leser selbst überlassen. Uns interessiert an dieser Stelle nur das Resultat, nämlich das XSLT Stylesheet <b>$project_name_validation.xsl.</b>
                        </p>
                        <p>Dieses Skript wird in der Batchdatei <b>validate.sh</b> aufgerufen:</p>
                        <verbatim>saxon $xml_instance_to_check.xml $script_dir/$project_name_validation.xsl \
  &gt; $validation-result.xml</verbatim>
                        <p>Die Ausgabe dieses Prüfprozesses ist eine XML Datei mit den Fehlern in der Eingabe-XML-Instanz, die weiterverarbeitet werden kann, beispielsweise als Filterkriterium für einen nachfolgenden Prozessschritt. Ihr Inhalt dieser Datei sieht z.B. wie folgt aus:</p>
                        <verbatim>&lt;svrl:schematron-output xmlns:svrl="http://purl.oclc.org/dsdl/svrl" [...]
  &lt;svrl:active-pattern document="file:/Users/alex/xml_instance_to_check.xml" 
   id="default" name="default"/&gt;
  &lt;svrl:failed-assert test="count(key('unique-ids', current()))=1"&gt;
    &lt;svrl:text&gt;ID is not unique!&lt;/svrl:text&gt;
    &lt;svrl:diagnostic-reference diagnostic="default"&gt;
      &lt;bk:id xmlns:bk="http://tekturcms/namespaces/book"&gt;1234-5678-9&lt;/my:id&gt;
    &lt;/svrl:diagnostic-reference&gt;
  &lt;/svrl:failed-assert&gt;
  [...]</verbatim>
                        <p>Neben den <b>svrl:failed-assert</b> Elementen, die angeben, was bei der überprüften XML-Instanz fehlgeschlagen ist, gibt es auch die Möglichkeit sich positive Ergebnisse anzeigen zu lassen - über das Element <b>svrl:successful-report</b>.</p>
                        <p>Konkret bedeutet das obige XML Schnipsel, dass unsere <b>id</b> mit dem Wert <b>1234-5688-9</b> im geprüften XML Dokument nicht eindeutig ist. Die Schematron Regelbasis, die wir zur Überprüfung angegebenen haben, sieht so aus:</p>
                        <verbatim>&lt;schema xmlns:sch="http://purl.oclc.org/dsdl/schematron" [...]
  &lt;xsl:key name="unique-ids" match="bk:id" use="."/&gt;
  &lt;sch:let name="date-regex" value="'^((19|2[0-9])[0-9]{2})-(0[1-9]|1[012])
                                     -(0[1-9]|[12][0-9]|3[01])$'"/&gt;
  &lt;sch:pattern id="default"&gt;
    &lt;sch:rule context="book"&gt;
      &lt;sch:assert id="check-book-id" role="error" test="count(key('unique-ids', bk:id))=1" 
                  diagnostics="default"&gt;ID is not unique!&lt;/sch:assert&gt;
      &lt;sch:assert id="check-book-published" role="error" 
                  test="matches(bk:published,$date-regex)
    &lt;/sch:rule&gt;
    [...]
  &lt;/sch:pattern&gt;
  &lt;sch:diagnostics&gt;
    &lt;sch:diagnostic id="default"&gt;
      &lt;xsl:element name="bk:id"&gt;
        &lt;xsl:value-of select="bk:id"/&gt;
      &lt;/xsl:element&gt;
    &lt;/sch:diagnostic&gt;
  &lt;/sch:diagnostics&gt;</verbatim>
                        <p>Neben der "successful" und "failed" Regeln ist auch die Deklaration von Funktionen und Variablen im Body der Regelbasis erlaubt. Dies ermöglicht komplexe Bedingungen, bespw. durch das Nachschlagen in einer Lookup-Tabelle abzuprüfen. </p>
                     
                  </chapter>
               
            
         </chapter>
         <chapter hyphenation="yes" chapterpage="no" id="cc183707-5352-4c9c-9c31-68047a882d0f"
                  ismodule="no">
            
               <title>
                  <title id="9b1e7086-25cc-4bdf-ba77-6adfb503603b">Erste Schritte mit Xspec</title>
               </title>
               
                  <p>XSpec ist ein <b>Test-Framework</b>
               <url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                    address="https://github.com/xspec">
                  <sup>↗↗</sup>
               </url> für XSLT, XQuery und Schematron. 
Um beispielsweise komplexe Schematron Regeln zu testen, hinterlegt man in einem <b>Test-Szenario</b> 
Erwartungswerte für positive und negative Testfälle in Form von XML Schnippseln.</p>
                  <verbatim>&lt;test-szenario&gt;
  &lt;testfall&gt;
    &lt;personen&gt;
      &lt;person&gt;
        &lt;vorname&gt;Horst&lt;/vorname&gt;
        &lt;<b>nachname</b>&gt;Schlämmer&lt;/<b>nachname</b>&gt;
        &lt;gewicht&gt;100&lt;/gewicht&gt;
      &lt;/person&gt;
      &lt;person&gt;
        &lt;vorname&gt;Gundula&lt;/vorname&gt;
        &lt;<b>nachname</b>&gt;&lt;/<b>nachname</b>&gt;
        &lt;gewicht&gt;60&lt;/gewicht&gt;
      &lt;/person&gt;
    &lt;/personen&gt;
  &lt;/testfall&gt;
&lt;/test-szenario&gt;</verbatim>
                  <p>in einer XSpec Datei *. werden <b>Assert- und Not-Assert-Methoden</b> deklariert:</p>
                  <verbatim>&lt;x:description xslt-version="2.0" xmlns:x="http://www.jenitennison.com/xslt/xspec" 
               schematron="test.sch"&gt;
  &lt;x:scenario label="ALL"&gt;
    &lt;x:context href="test.xml"/&gt;
    &lt;x:expect-not-assert id="person-nachname-rule" location="//person[1]/<b>nachname</b>"/&gt;
    &lt;x:expect-assert id="person-nachname-rule" location="//person[2]/<b>nachname</b>"/&gt;
  &lt;/x:scenario&gt;
&lt;/x:description&gt;</verbatim>
                  <p>Grds. bdeutet ein Assert, dass das Mapping zwischen tatsächlichem Wert und Erwartungswert des
Testfalls positiv erfüllt ist. Beim Not-Assert ist das Gegenteil der Fall. Im obigen Beispiel
reichen zwei Regeln, um den Testfall vollständig abzudecken.</p>
                  <p>Wenn man Schematron Regeln mit Hilfe von XSpec testen will, dann muss man ein bisschen um 
die Ecke denken. Denn auch diese Regeln werden mittels Assert und Not-Assert modelliert.</p>
                  <verbatim>&lt;sch:schema xmlns:sch="http://purl.oclc.org/dsdl/schematron" 
            xmlns:xsl="http://www.w3.org/1999/XSL/Transform" queryBinding="xslt2"&gt;
  &lt;sch:pattern id="main"&gt;
    &lt;sch:rule context="<b>nachname</b>"&gt;
      &lt;sch:assert id="person-nachname-rule" role="error" test="normalize-space(.)"&gt;
        Der Nachname der Person mit ID: &lt;sch:value-of select="@id"/&gt; fehlt! 
      &lt;/sch:assert&gt;
    &lt;/sch:rule&gt;
  &lt;/sch:pattern&gt;
&lt;/sch:schema&gt;</verbatim>
                  <p>In der Schematron-Regel wird zugesichert (Assert), dass jede Person einen Nachnamen hat.</p>
                  <p>Hat sie keinen Nachnamen so wird der Bericht zum Fehlerfall in die Schematron Ergebnisdatei
geschrieben. Diese Datei wertet nun Xspec aus.</p>
                  <note>
                     <consequence>
                        <p>Erscheint ein Fehler (= das Feld <b>nachname</b> ist leer), so greift bei Xspec die Assert-Regel! Das ist die umgekehrte Logik zu den Schematron Regeln.</p>
                     </consequence>
                  </note>
                  <p>Als Eselsbrücke kann man
ein Assert in der Xspec Datei gleichsetzen mit <b>Appear</b> und ein Not-Assert mit
<b>Not-Appear</b>. </p>
                  <p>Ein Assert sichert also zu, dass sich ein Fehlerbericht in der
Schematron Ergebnisdatei zum Testfall befindet. Ein Not-Assert sichert zu, dass
sich kein Fehlerbericht befindet. </p>
                  <p> Wie man sich leicht vorstellen kann, sind Assert-Regeln in diesem Fall leicht zu finden,
dazu muss man nur die Schematron Testregeln ins Leere zeigen lassen. Alles ist grün
und alles ist gut - dem Augenschein nach.</p>
               
            
         </chapter>
      </chapter>
   </chapter>
   <chapter hyphenation="yes" chapterpage="no" id="f606e9c6-3d46-48f3-8de4-46e13dc7d055"
            ismodule="no">
      
         <title>
            <title id="e4c14d2b-d2df-4a76-ac0c-4ecebfe223ae">Zusätzliches Know-How</title>
         </title>
         
            <p>Unsortierte Notizen, die für jeden XSLT-Programmierer interessant sein könnten.</p>
         
      
      <chapter hyphenation="yes" chapterpage="no" id="7dbb15ce-bbc5-4d91-b977-ed7e8117730e"
               ismodule="no">
         
            <title>
               <title id="5d677796-4ebf-49b1-85ba-45315312a0e4">GIT Einmaleins </title>
            </title>
            
               <p>Im Fachbereich Technische Dokumentation wird neue Technologie ein bisschen langsamer adaptiert, als in anderen Disziplinen der IT - schliesslich muss ja erst alles dokumentiert werden ...</p>
               <p>Bei Versionsverwaltungssystemen ist das nicht anders. Doch inzwischen hat auch GIT in manchen Entwicklerbüros Einzug gehalten und verdrängt Subversion.</p>
               <p>Ein Grund an dieser Stelle einmal zumindest die wichtigsten Befehle aufzulisten - Note to self:</p>
               <verbatim>GIT COMMANDS

CLONE
=====
git clone https://github.com/libgit2/libgit2
SIMPLE
======
git init
git add *
git commit -m "Form validation added”
[changes]
git add [changed files] or git commit -a
git diff —cached
git branch experimental
git checkout experimental
git commit -a -m "only in the experimental branch”
git checkout master
git merge experimental
git branch -d experimental

COLLABORATION
=============
push new branch git push -u origin newLocalBranch
bob$ git clone /home/alice/project myrepo
(edit files)
bob$ git commit -a
alice$ cd /home/alice/project
alice$ git pull /home/bob/myrepo master  (fetch &amp; merge)
(fetch and not merge)
alice$ git fetch /home/bob/myrepo master
alice$ git log -p HEAD..FETCH_HEAD
(visualization only)
gitk HEAD..FETCH_HEAD
gitk HEAD…FETCH_HEAD
—
git log
git show ea14 (firs chars is enough)
git grep "headline_font_size” v2.5

PULL REQUESTS
=============
(checkout branch)
git pull origin simple-examples
(changes)
git push origin simple-examples
Create a pull request using the form on the Github page and assign it to a Reviewer

MERGE CONFLICTS
===============
git pull origin master
=&gt; merga conflicts

TROUBLE SHOOTING
=================
git reset --hard origin/master
git tree
git status
git checkout 118886ee3f06738b53f089433078d35f4d70a8f9 vendor/error-report.xsl
git log --diff-filter=D --summary</verbatim>
            
         
      </chapter>
      <chapter hyphenation="yes" chapterpage="no" id="4100d43a-5b71-43ba-a05f-1063fcee8679"
               ismodule="no">
         
            <title>
               <title id="46cfa469-01ec-434d-ab13-e24ce0b06467">XML Editoren </title>
            </title>
            
               <p>Der XSLT Styesheet-Entwickler wird sich  gewöhnlich mit Eingabedaten beschäftigen, die entweder automatisch mittels irgendeines Prozesses erzeugt wurden, oder die durch einen menschlichen Autor mit einem XML Editor eingegeben wurden.</p>
               <p>Aus diesem Grund ist es ganz nützlich, die wichtigsten Editoren zu kennen. Wir unterscheiden zwischen Desktopapplikationen und Webanwendungen. Ausserdem unterscheiden wir noch ob der Editor WYSIWIG (<b>W</b>hat <b>Y</b>ou <b>S</b>ee <b>I</b>s <b>W</b>hat <b>Y</b>ou <b>G</b>et) oder WYSIWYM (<b>W</b>hat <b>Y</b>ou <b>S</b>ee <b>I</b>s <b>W</b>hat <b>Y</b>ou <b>M</b>ean)  unterstützt oder eine Mischung aus beidem darstellt.</p>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                  id="146278ce-5d82-46ad-ab61-19641f9ee295d6e52">
                  
                     <title>
                        <title id="346853d6-4d45-42f4-a7b8-77af38d96151d6e9">WYSIWYM Desktop</title>
                     </title>
                     <table type="dl">
                        <tgroup>
                           <colspec colwidth="0.25*"/>
                           <colspec colwidth="0.75*"/>
                           <tbody>
                              <row>
                                 <entry>
                                    <b>Editor</b>
                                 </entry>
                                 <entry>
                                    <b>Beschreibung</b>
                                 </entry>
                              </row>
                              <row>
                                 <entry>XMetal<url xmlns:tektur="http://www.stylesheet-entwicklung.de" address="https://xmetal.com/">
                              <sup>↗↗</sup>
                           </url>
                        </entry>
                                 <entry>
                                    <p>XMetal ist wahrscheinlich der am weitesten verbreitete reine WYSIWYM Editor. Er hat Schnittstellen zu COM und Java und kann daher in eigene CMS integriert werden.</p>
                                 </entry>
                              </row>
                              <row>
                                 <entry>Arbortext XML Editor<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                                address="https://www.ptc.com/en/products/service-lifecycle-management/arbortext/editor">
                              <sup>↗↗</sup>
                           </url>
                        </entry>
                                 <entry>
                                    <p>Arbortext XML Editor, früher bekannt als EPIC ist sehr betagt. Ich hatte damit im Bereich Luftfahrt/Verteidigung zu tun. Bekanntermassen ist sein Tabelleneditor etwas buggy.</p>
                                 </entry>
                              </row>
                           </tbody>
                        </tgroup>
                     </table>
                  
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                  id="9d364446-9b6b-4349-a9c2-729bf53407a7d6e73">
                  
                     <title>
                        <title id="4c42f7f1-6d2a-482d-8d84-2c500fb35927d6e74">WYSIWYG Desktop</title>
                     </title>
                     <p>XMetal kann so konfiguriert werden, dass bei einer einfachen DTD der Content Bereich wie Word aussieht. Auch Code Editoren, wie OxygenXML bieten diese Möglichkeit. Das Key-Handling bei dieser Variante zeigt aber schnell, dass die UX noch weit von herkömmlichen Textverarbeitungssystem, wie Word oder OpenOffice entfernt ist.  </p>
                  
               </chapter>
               <chapter hyphenation="yes" chapterpage="no" ismodule="yes"
                  id="afacfd28-5b1c-4b2e-a050-5c6fd6d37d28d6e78">
                  
                     <title>
                        <title id="092992f0-ac89-4bd8-bba5-a1d685135135d6e79">WYSIWYM Online</title>
                     </title>
                     <table type="dl">
                        <tgroup>
                           <colspec colwidth="0.25*"/>
                           <colspec colwidth="0.75*"/>
                           <tbody>
                              <row>
                                 <entry>
                                    <b>Editor</b>
                                 </entry>
                                 <entry>
                                    <b>Beschreibung</b>
                                 </entry>
                              </row>
                              <row>
                                 <entry>Oxygen XML WebAuthor<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                                address="https://www.oxygenxml.com/oxygen-xml-web-author/app/oxygen.html">
                              <sup>↗↗</sup>
                           </url>
                        </entry>
                                 <entry>
                                    <p>Dieser Online-Editor verwendet auf der Serverseite dieselbe Logik, wie das Desktop Programm des Herstellers. Das führt dazu, dass bei jedem Tastendruck eine Verbindung zum Server aufgebaut wird, und die Verarbeitung langsam werden kann. Zum Betrieb und bzgl. Customizing ist einschlägiges Java-Know-How erforderlich.</p>
                                 </entry>
                              </row>
                              <row>
                                 <entry>FontoXML<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                                address="https://www.fontoxml.com/">
                              <sup>↗↗</sup>
                           </url>
                        </entry>
                                 <entry>
                                    <p>FontoXML sieht schon fast aus wie Word. Neben der WYSWYG/M Darstellung, kann auch die XML Struktur in einem Seitenpanel angezeigt werden.</p>
                                 </entry>
                              </row>
                              <row>
                                 <entry>XEditor<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                                address="http://www.xeditor.com/portal">
                              <sup>↗↗</sup>
                           </url>
                        </entry>
                                 <entry>
                                    <p>Xeditor benutzt XSLT Transformationen, um aus der Eingabe die Editoransicht zu generieren. Beim Abspeichern wird der umgekehrte Weg bestritten. Das mag zwar auf den ersten Blick etwas holprig erscheinen, wie aber auch Tektur beweist, funktioniert das ganze recht gut und schnell.</p>
                                 </entry>
                              </row>
                              <row>
                                 <entry>Xopus<url xmlns:tektur="http://www.stylesheet-entwicklung.de"
                                address="http://xopusfiddle.net/VT7T/3/">
                              <sup>↗↗</sup>
                           </url>
                        </entry>
                                 <entry>
                                    <p>Xopus ist wohl der älteste web-basierte XML Editor. Ich hatte damit schon 2008 zu tun, als er für ein Redaktionssystem evaluiert wurde. Wir haben uns dann für eine eigene nicht-generische Lösung basierend auf dem Webeditor CKEditor entschieden.</p>
                                 </entry>
                              </row>
                           </tbody>
                        </tgroup>
                     </table>
                     <p>Das Customizing dieser Editoren erfordert einen sehr hohen Aufwand. Es müssen diverse Ressourcen angepasst werden, wie XSLT Skripte, XSD Schemas, CSS und Javascript. Das Schema wird meist über Kommandozeilentools in eine JS Repräsentation überführt. </p>
                     <p>Aus diesem Grund bieten einige Hersteller spezielle Schulungen an, wo man die Bedienung erlernen kann. Aus meiner Sicht ist das Problem "Webbasierter XML Editor" weltweit noch nicht ausreichend gelöst.</p>
                     <p>Die Kosten für den Betrieb rangieren um die 1000 EUR monatl. für ein 20 Benutzer-Setup.</p>
                  
               </chapter>
            
         
      </chapter>
   </chapter>
   <chapter hyphenation="yes" chapterpage="no" id="3dfad2c2-2299-461a-9d80-42237bbb5e89"
            ismodule="no">
      
         <title>
            <title id="fab91e1c-40b2-4fa4-8137-87e27882221d">Glossar </title>
         </title>
         
            <table type="dl">
               <tgroup>
                  <colspec colwidth="0.25*"/>
                  <colspec colwidth="0.75*"/>
                  <tbody>
                     <row>
                        <entry>
                           <b>Begriff</b>
                        </entry>
                        <entry>
                           <b>Beschreibung</b>
                        </entry>
                     </row>
                     <row>
                        <entry>Core-Stylesheet</entry>
                        <entry>
                           <p>In einem Stylesheet-Projekt bezeichnet das Core-Stylesheet eine bereits ausgiebig getestete Variante, die mittels Sub-Stylesheet unter Ausnutzung der XSLT Import Präzedenz überschrieben wird.</p>
                        </entry>
                     </row>
                     <row>
                        <entry>Sub-Stylesheet</entry>
                        <entry>
                           <p>Ein Sub-Stylesheet spezialisiert das Core-Stylesheet, damit Redundanz vermieden wird und somit die Wartbarkeit gewährleistet werden kann.</p>
                        </entry>
                     </row>
                     <row>
                        <entry>Parameterisierung</entry>
                        <entry>
                           <p>Bei der Parameterisierung wird ein bestehendes Stylesheet mit Parametern versehen, um für möglichst viele Produktvarianten und Ausgabeformate die gleiche Codebasis wiederverwenden zu können. Dadurch soll Redundanz eingespart werden und der Aufruf vereinfacht werden.</p>
                        </entry>
                     </row>
                     <row>
                        <entry>Topic Based Authoring</entry>
                        <entry>
                           <p>Beim Topic Based Authoring steht nicht das gesamte Buch im Vordergrund, sondern der Inhalt wird in wiederverwendbare Topics aufgeteilt, die dann in verschiedenen Publikationen wiederverwendet werden können. </p>
                        </entry>
                     </row>
                     <row>
                        <entry>DITA</entry>
                        <entry>
                           <p>DITA ist ein Informationsmodell für die Technische Dokumentation.</p>
                        </entry>
                     </row>
                     <row>
                        <entry>SGML</entry>
                        <entry>
                           <p>SGML ist der Vorläufer von XML.</p>
                        </entry>
                     </row>
                     <row>
                        <entry>TIOBE Index</entry>
                        <entry>
                           <p>Im TIOBE Index wird jährlich die Beliebtheit von Programmiersprachen erfasst.</p>
                        </entry>
                     </row>
                     <row>
                        <entry>Single Source Publishing</entry>
                        <entry>
                           <p>Beim Single Source Publishing wird aus einer XML Quelle eine Vielzahl von Ausgabeformaten erzeugt.</p>
                        </entry>
                     </row>
                     <row>
                        <entry>Pull Stylesheets</entry>
                        <entry/>
                     </row>
                  </tbody>
               </tgroup>
            </table>
         
      
   </chapter>
   <chapter hyphenation="yes" chapterpage="no" id="dac12b19-ef37-4e41-b88c-6f0ce7becbb8"
            ismodule="no">
      
         <title>
            <title id="3701e56d-cbbf-4125-bce3-cffcd3b10b4f">Tektur CCMS</title>
         </title>
         
            <p>Tekur CCMS ist ein web-basiertes Component Content Management System und befindet sich noch in der Entwicklung. Blog: <b>www.tekturcms.de</b>
            </p>
            <p>Hier sind einige Random Features:</p>
            <ul>
               <li>
                  <p>Die Inhalte werden nach dem DITA Content Model eingegeben. Die Ausgabe erfolgt über ein automatisches Satzsystem.</p>
               </li>
               <li>
                  <p>Grafiken können für die PDF-Ausgabe seitenbreit, spaltenbreit und in der Marginalie gesetzt werden.</p>
               </li>
               <li>
                  <p>Die Breite der Marginalie ist stufenlos einstellbar; die PDF-Ausgabe ist bzgl. der Formatierung weitestgehend konfigurierbar.</p>
               </li>
               <li>
                  <p>Layoutoptionen bzgl. Papierformat, Bemassung und Schriftgrößen können über einen einfachen Dialog eingestellt werden.</p>
               </li>
               <li>
                  <p>TOC und mehrstufige Register werden automatisch in der PDF-Ausgabe erzeugt.</p>
               </li>
               <li>
                  <p>Die Zellenbreite von CALS Tabellen kann mit der Maus eingestellt werden; Funktionen auf Zellen sind weitestgehend implementiert.</p>
               </li>
               <li>
                  <p>Copy 'n Paste funktioniert Element-weise und topic-übergreifend.</p>
               </li>
               <li>
                  <p>Paras, Listitems und Sections können mit den Pfeilbuttons in der Toolbar nach oben und unten verschoben werden.</p>
               </li>
               <li>
                  <p>Verlinkung auf andere Topics funktioniert über Referenzen und ein Linktext wird automatisch aktualisiert, wenn sich der Topic-Titel ändert.</p>
               </li>
               <li>
                  <p>Die DITA-Map kann u.a. mittels Drag 'n Drop editiert werden; Im Topic Editor gibt es an jeder Stelle ein dynamisches Kontextmenü für weitere Optionen.</p>
               </li>
               <li>
                  <p>Valide DITA Strukturen können exportiert und importiert werden.</p>
               </li>
               <li>
                  <p>Topics, Tasks und Maps können vom Autor an Reviewer und Approver für einen Kommentar- und Freigabeprozess überwiesen werden.</p>
               </li>
            </ul>
         
      
   </chapter>
</document>