<?xml version="1.0" encoding="UTF-8"?><elements><element id="86a66f53-eb4a-4cc0-b14c-12d5c2bb84bd" type="para"> Ausdrücke</element><element id="31bf12f5-ecec-4ada-965f-cb4e1539afc6" type="para">In nicht-funktionalen Programmiersprachen sind die Schlüsselwörter und  dazu da, um dem Compiler oder Interpreter mitzuteilen, dass eine bedingte Anweisung ausgewertet werden soll.</element><element id="c9ab5b21-d799-4bb6-a020-d7ab5750146ed6e12" type="para">Was für den Nicht-funktionalen Programmierer etwas befremdlich erscheint, ist der Umstand, dass in XQuery als Ausdrücke ausgewertet werden.</element><element id="e4d038c8-39fe-4f47-a81c-4a7d16a10c3ed6e17" type="para">Das ist einerseits sehr praktisch, weil es richtig angewandt den Code verkürzt und damit das Wesentliche herausstellt, kann aber auch weiter zur allg. Verwirrung bzgl. des kryptischen XQuery Codes beitragen.</element><element id="b0df228c-1f72-4a12-9302-805fa0022b03d6e11" type="para">Beispiel: Konditionale Server App</element><element id="2d0364b2-f8b1-47fa-996e-0f9ceba95e4fd6e13" type="para">Betrachten wir ein einfaches Beispiel: Wir generieren auf einer Marklogic-Webapp eine JSON Response. Da wir diesen Mechanismus an mehreren Stellen im Code einsetzen, empfiehlt es sich das Rendern des Headers in eine Funktion auszulagern.</element><element id="83a5cfc9-35c4-46fd-96ec-45482888fee8d7e15" type="code">declare function common:wrap-response($json) { xdmp:add-response-header(\"Pragma\", \"no-cache\"), xdmp:add-response-header(\"Cache-Control\", \"no-cache\"), xdmp:add-response-header(\"Expires\", \"0\"), xdmp:set-response-content-type('text\/json; charset=utf-8'), $json };</element><element id="9c2999c6-968d-4719-9036-fd0664b5bd57d6e19" type="para">In unserem Request-Handler wird je nach Auswertung einer Variablen eine bedingte Anweisung ausgeführt, diese sieht bspw. so aus:</element><element id="0a0eae6c-9885-4832-a524-12de08e43ad0d7e19" type="code">let $name := xdmp:get-request-field('name'), $is-afternoon := xs:time(current-dateTime()) gt xs:time('12:00:00') return if ($is-afternoon) then common:wrap-response(xdmp:unquote(concat('{\"greeting\":\"Good Afternoon! ',$name,'!\"}'))) else common:wrap-response(xdmp:unquote(concat('{\"greeting\":\"Good Morning! ',$name,'!\"}')))</element><element id="7795845c-ea88-42f8-8adf-ab4d0b5404fcd6e23" type="para">Als prozeduraler Programmierer wäre ich mit diesem Switch voll und ganz zufrieden, der funktionale Programmier erkennt abaer sofort einen Optimierungsbedarf.</element><element id="a553de2e-d73c-4a97-a1b1-5283220ffef3d6e25" type="para">Da es sich bei der bedingten Anweisung auch um einen Ausdruck handelt, der [[code:true}} oder [[code:false}} zurückgibt, können wir die gleichen Funktionsaufrufe herausziehen:</element><element id="7144deae-3ed1-4364-8679-69756fb5e482d7e25" type="code">ommon:wrap-response(xdmp:unquote( let $is-afternoon := xs:time(current-dateTime()) gt xs:time('12:00:00') return if ($is-afternoon) then concat('{\"greeting\":\"Good Afternoon! ',$name,'!\"}') else concat('{\"greeting\":\"Good Morning! ',$name,'!\"}') )</element><element id="c1d6576a-56e3-4dda-bc18-342e7e458553d6e29" type="para">Hier wird der abstrakt denkende Programmierer aber einwenden, dass eine abstrakte Logik nicht in eine Low-Level Funktion, wie [code:xsdmp:unquote] gewrapped werden sollte.</element><element id="a935a64f-2ed6-4682-84cb-3243f9dcbb49d6e31" type="para">Das stimmt - und mehr noch, die Maskierung mit sollte auch noch in unsere Funktion gepackt werden. So dass der Code schliesslich so aussehen würde:</element><element id="71716557-bb3b-4586-921e-17bbc557cb9ed7e31" type="code">declare function common:render-response($json) { xdmp:add-response-header(\"Pragma\", \"no-cache\"), xdmp:add-response-header(\"Cache-Control\", \"no-cache\"), xdmp:add-response-header(\"Expires\", \"0\"), xdmp:set-response-content-type('text\/json; charset=utf-8'), xdmp:unquote($json) }; common:render-response( let $is-afternoon := xs:time(current-dateTime()) gt xs:time('12:00:00') return if ($is-afternoon) then concat('{\"greeting\":\"Good Afternoon! ',$name,'!\"}') else concat('{\"greeting\":\"Good Morning! ',$name,'!\"}') )</element><element id="0a519a5c-c908-4d55-a9e8-d8ad9a4e7a81d6e36" type="para">Sicherlich lässt sich darüber streiten, ob nun der funktionale Ansatz besser lesbar ist als der prozedurale ganz oben.</element><element id="175752a8-d929-4081-83cf-c74b67da7d35d6e38" type="para">Ich denke jeder Programmierer hat hier seinen eigenen, individuellen und bewährten Programmierstil entwickelt, den er auch beibehalten sollte.</element></elements>