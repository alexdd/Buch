<?xml version="1.0" encoding="UTF-8"?><topic id="36c3f63e-dd10-4093-a16c-cbee33673613"><title id="dfdfffc1-06aa-4336-a2fc-0c18e69f047d">Deployment-Tools</title><body id="4f36f3fc-3264-4291-8eb5-dc61aca79320"><p id="6aa8b10e-2414-493e-9770-45a506d15b85">Will man eine größere MarkLogic Applikation maintainen, dann wird man um einen
Build- / Deployment-Manager[[xe1:Deployment-Manager]] nicht herumkommen. Denn gewöhnlich gilt es einen
Entwicklungsserver, einen Testserver und einen Prod-Server zu pflegen.[[xe1:Tools für MarkLogic;xe2:mlproj]]</p><p id="87a51f96-0ee3-4967-8c04-6d36d995903dd7e6">[[link]]ml-gradle[[fn:https://github.com/marklogic-community/ml-gradle*Projektseite auf GitHub zu ml-gradle]] und 
[[link]]ml-proj[[fn:http://mlproj.org/*Website des mlproj Projekts]] 
sind solche Tools. Das eine basiert auf der populären Java-Buildchain
gradle[[fn:https://gradle.org/*Website des Build-Tools gradle]], 
das andere ist eine NodeJS Applikation vom gleichen Maintainer, wie die 
zuvor beschriebene <xref href="7fd62b3e-5e73-4470-ae83-318570ddcb44" id="fbebbcc4-5f49-4b38-9b59-43e953b03044" type="topic">EXPath Konsole </xref>.</p><p id="bd70e9c7-03f3-4141-bb28-0ac05f1ca12ad7e8">Wie ich bei einer größeren Evaluierungssaufgabe aber herausfinden konnte, eignen sich beide Tools
eher für Projekte, die von der grünen Wiese aus gestartet werden, weil sie auf
Namenskonventionen in der Dateistruktur setzen.</p><p id="64ef4c57-c416-4b3e-9252-13712758b182d7e10">Beide beanspruchen zwar für sich eine (fast) vollständige Konfigurierbarkeit der Projektstruktur, 
jedoch ist diese mit einigen Fallstricken behaftet, so dass ich eine Migration eines Bestandsprojekts
leider nicht empfehlen kann.</p><section id="97340ffc-a49c-493e-9a0e-22a47e01c6fdd7e15"><title id="cbc37dc4-629e-4bbc-967a-ec0e37912ba6d7e13">ml-gradle</title><p id="611f8684-b18a-40e7-a2d4-f5d0cd2c05c8d7e15"><b id="0fff4d96-3dc6-4cfa-89f7-6c74aeb55e10d7e19">ml-gradle</b> basiert auf dem populären Java Build-Tool 
[[link]]ml-gradle[[fn:https://github.com/marklogic-community/ml-gradle*Projektseite auf GitHub zu ml-gradle]]
[[xe1:Tools für MarkLogic;xe2:ml-gradle]].
Mittels vordefinierter oder eigener Tasks werden JSON Dateien automatisiert erstellt, die als Payload für REST Calls auf MarkLogic
fungieren. Dabei wird die MarkLogic REST API[[fn:https://docs.marklogic.com/guide/rest-dev*Dokuseite zur MarkLogic REST API]] bedient. 
Bei der Deployment-Aktion selbst wird schliesslich das Payload eingesammelt und abgesetzt.</p><p id="8ef55fdd-f102-4e81-9d5c-49ca9156083fd7e17">Grds. ist diese Idee nicht verkehrt, es gibt aber nun mehrere Stellen, an denen die Konfiguration modifiziert werden kann -
was sich bei fehlender Disziplin der Entwickler natürlich eher nachteilig auswirken könnte:</p><ul id="a8c90210-541a-477f-9458-e243dac06bf3d7e19"><li id="570e95b7-af23-4ece-9a19-ccf467d10cc5d7e20"><p id="fcdefe16-9ac2-45f2-9b03-d4f809ca7959d7e21">Setzen [[link]]vordefinierter Properties[[fn:https://github.com/marklogic-community/ml-gradle/wiki/Property-reference*Properties für das MarkLogic Deployment-Tool ml-gradle]] in der Datei [[code:gradle.properties]]</p></li><li id="6830478c-8e55-4f3c-97a5-22c1ce16ed0ad7e23"><p id="b9a22081-d1c3-4874-ad4f-3fd1b5096988d7e24">Mittels vordefinierter [[link]]<undefined id="73cb8ce7-ca16-4452-8841-744ef3b66e86d7e26" href="undefined"/>Create-Tasks[[fn:https://github.com/marklogic-community/ml-gradle/wiki/Generating-new-resources*Dokuseite zu ml-gradle bzgl. der Tasks zum Erzeugen neuer Ressourcen]]<undefined id="35b4264d-1dff-4c3e-ba38-8d1b4f0dc889d7e28" href="undefined"/>, z.B. [[code:gradle mlNewDatabase]]</p><p id="f1477011-0826-478a-b30d-c317c0683c9fd7e30"> werden Skelett-Dateien erzeugt, die man manuell bzgl. fehlender Konfigurationsinformationen vervollständigt.</p></li><li id="a4b88c7b-bf0d-4921-8835-16a4edc5ca55d7e32"><p id="8b3b2700-a36f-4e29-a3f2-8ec60f35a898d7e33">Es gibt einen [[link]]Token-basierten Mechanismus[[fn:https://github.com/marklogic-community/ml-gradle/wiki/Configuring-resources*Dokuseite zu ml-gradle bzgl. Konfiguration von "Payload-Files"]], mit dem vordefinierte Platzhalter in Konfigurationsdateien (Payload-Files) dynamisch ersetzt werden.</p></li><li id="746ba499-7c9c-4c6d-829c-b355bb6b4ec5d7e35"><p id="2cefa918-331d-447f-99fc-396c6745156fd7e36">Eigene Groovy-Tasks können implementiert werden. Diese werden z.B. in der Datei [[code:build.gradle]] eingebunden. [[link]]Beispiel für einen einfachen Groovy-Task[[fn:https://github.com/marklogic-community/ml-gradle/wiki/Debugging-module-loading*Beispiel für einen einfachen Groovy-Task auf der Dokuseite zu ml-gradle]]</p></li></ul></section><section id="ae10c19a-ae8e-47e1-800a-6cbea441a85fd7e43"><title id="60e90042-0c7c-4cbf-be32-079b740a79e7d7e39">mlproj</title><p id="2a7848a6-1eae-4173-8dec-cf4f2db216ebd7e41"><b id="d01f9a96-1c1d-457e-a8e8-7fd5cdfea802d7e47">mlproj</b> ist eine NodeJS Applikation von [[link]]Florent Georges[[fn:http://fgeorges.org/*Homepage von Florent Georges]]. Wie auch bei ml-gradle würde ich den Umzug einer bestehenden Projektstruktur
auf mlproj aber nicht empfehlen, sondern damit ein Projekt von der grünen Wiese aus starten.</p><p id="d676f39f-55ea-4740-a669-f96b28a9c166d7e43">Während es bei ml-gradle darum geht, den Überblick über mehrere, teilweise automatisch generierte, Konfigurationsdateien und -optionen zu behalten, geschieht die Konfiguration bei mlproj in nur einer Datei [[code:prod.json]] bzw. [[code:dev.json]], welche die Einstellungen einer Basiskonfiguration [[code:base.json]] übernimmt bzw. überschreibt.</p><p id="5ab10b07-26fe-439f-86a2-2dfce354e59fd7e45">Natürlich ist der Erweiterungsmechanismus nicht ganz so mächtig, wie bei ml-gradle - schliesslich fehlt eine ausgewachsene Build-Chain als Unterbau. Ein NodeJS Programmierer wird damit aber gut zurechtkommen. Der Quellcode wirkt aufgeräumt und das Projekt ist gut dokumentiert.</p><p id="e9420f6f-da7d-47f7-a1cc-9af14e49bc5ed7e47">Beide Tools haben einen "Watch"-Modus, bei dem die Dateistruktur des Entwicklers überwacht wird. Sobald sich eine Datei ändert, wird diese nach MarkLogic hochgeladen. Als Beispiel für die umfangreichen Konfigurationsmöglichkeiten ist folgend der Docstring des "Watch"-Modus in mlproj wiedergegeben:</p><pre id="aa0ff15f-e785-4b9f-8f64-8e2a9141bb2bd7e56" xml:space="preserve">mlproj watch [-a srv|-b db] [-s src|-/ dir|-1 file] [what]

-a, --as, --server &lt;srv&gt; server, get its modules database
-b, --db, --database &lt;db&gt; target database
-B, --sys, --system-database &lt;db&gt; the name of the target system db
-s, --src, --source-set &lt;dir&gt; source set to watch
-/, --dir, --directory &lt;dir&gt; directory to watch
-1, --doc, --document &lt;file&gt; file to watch
&lt;what&gt; source set or directory to watch</pre></section></body></topic>