<div data-attribute-id="51877293-95b9-4486-b8f6-c006615a8109" class="topic show_menu tags" data-element="topic" data-deletable="false" data-tektur-editor-id="caa57c5c-03fb-4af6-b24b-28ff9c830900"><div class="gui-optional-elements-button" contenteditable="false"><div class="menu-icon" style="display:none">+</div></div><div data-attribute-id="40515442-a67d-49f4-9945-0f9d227bd97e" class="title pmarker tags" data-element="title" data-tektur-editor-id="4fb30801-fbaf-4e30-9c64-781c28bb8121" contenteditable="true">XSLT Streaming</div><div class="abstract optional show_menu tags" data-element="abstract" data-excluding="shortdesc" style="display:none" data-tektur-editor-id="c0a0bb37-41cb-465f-9459-a8766fe92eb4"><div class="gui-optional-elements-button" contenteditable="false"><div class="menu-icon" style="display:none">+</div></div><div class="placeholder text pmarker tags" data-element="p" data-tektur-editor-id="ca2d8451-2282-4799-b8fa-e93596351993" contenteditable="true"></div></div><div data-attribute-id="c582561a-858c-4fd8-8aeb-2af18ceedd3d" class="body show_menu tags" data-element="body" data-deletable="false" data-tektur-editor-id="b2079f17-9de6-4cb3-b10f-239aaac4b6c8"><div class="gui-optional-elements-button" contenteditable="false"><div class="menu-icon" style="display:none">+</div></div><div class="section tektur-wrapper tags" data-element="section" data-tektur-editor-id="4f130f58-35ea-43f5-849c-cdfc31038fef"><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="1b8326b9-86af-407d-b972-5b8d98339dec" class="p pmarker tags" data-element="p" data-tektur-editor-id="0a1f2296-8090-4df9-9752-07189e1bf880" contenteditable="true">Bei grossen flach strukturierten Datenmengen gibt es zwei Möglichkeiten:</div><ol data-attribute-id="55b454b3-3415-4755-9caa-141113ac3f5cd6e6" class="ol tags" data-element="ol" data-tektur-editor-id="96825f6e-78ec-4380-a25d-f8e16d90e099"><li data-attribute-id="ca269a85-cba5-48ac-b9ca-dba867f63fddd6e7" class="li tags" data-element="li" data-tektur-editor-id="05fa499c-255e-4e31-a764-9e13acfe7fbd"><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="b68b789a-b3c9-407f-ba6d-fa3f3e248cdcd6e8" class="p pmarker tags" data-element="p" data-tektur-editor-id="7ba893d2-421d-47f8-be24-0580f8d9d602" contenteditable="true">Für einfache Sammel- und Auswertungsaufgaben schreibt man sich am besten einen kleinen Parser, z.B. mit der Python sgmllib[[fn:https://docs.python.org/2/library/sgmllib.html]].</div></li><li data-attribute-id="e7423b7a-3ac5-4ad1-a3e8-202255a4b978d6e10" class="li tags" data-element="li" data-tektur-editor-id="d553c1a5-dca0-487d-aa03-1881e5fa1429"><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="57c4f664-96a8-4fcc-9f0b-3e9ee7dfb3ecd6e11" class="p pmarker tags" data-element="p" data-tektur-editor-id="720e3a49-122b-4a6d-a4ec-553a69ac58c0" contenteditable="true">Für komplexere Aufgaben, in denen man nicht an jeder Stelle über den ganzen XML Baum navigiert und sich die Werte zusammensuchen suchen muss, kann man die Streaming Funktion des Saxon XSLT Prozessors verwenden.</div></li></ol><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="a470215e-648e-4bb9-87f9-894c63b0dd90d6e13" class="p pmarker tags" data-element="p" data-tektur-editor-id="ffd3a56e-c235-4959-86ba-0426736f0e7d" contenteditable="true">XSLT Streaming ist in der XSLT Version 3.0 neu hinzugekommen[[fn:https://www.saxonica.com/html/documentation/sourcedocs/streaming/xslt-streaming.html]] und in der
kommerziellen Saxon-EE Löunsg implementiert[[fn:https://www.saxonica.com/html/documentation/sourcedocs/streaming/]]. Bei dieser Methode wird kein Eingabebaum im Speicher aufgebaut, was zu einer drastischen Performanzsteigerung führt.</div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="3646e5ae-e79b-4fe4-87dc-bf3d33d48095d6e15" class="p pmarker tags" data-element="p" data-tektur-editor-id="149cf8c8-2929-4747-96ea-c5628d0394a8" contenteditable="true">Es gibt ein paar Regeln, die man bei der Verarbeitung großer Datenmengen über die Streaming Funktionen beachten sollte:</div><ul data-element="ul" style="" data-tektur-editor-id="6a69212e-23f4-4021-93d4-3f39bba06af5" class="show_menu tags"><div class="gui-optional-elements-button" contenteditable="false"><div class="menu-icon" style="display:none">+</div></div><li class="li show_menu tags" data-element="li" data-tektur-editor-id="e1712bf9-55bb-4f2b-85c0-3937c2d8f92a"><div class="p pmarker tags" data-element="p" contenteditable="true" data-tektur-editor-id="63118dd2-99b8-48cb-baf2-14854edf809f">Bei einer XPATH Auswertung sollte nur ein einfacher Ausdruck mit höchstens einer konsumierenden Selektion gegeben sein. Konsumieren heißt, dass vom Kontextknoten aus eine Knotenmenge abwärts selektiert wird. Dagegen bleibt die Information bzgl. der Ancestor-Achse erhalten.</div></li><li class="li tags" data-element="li" data-tektur-editor-id="797a0251-1556-4dad-8fbd-d12cba4b34e8"><div class="p  pmarker tags" data-element="p" contenteditable="true" data-tektur-editor-id="e8e36462-c146-4f2c-8411-ca43808e38f7">Bei einer Selektion sollte man aber darauf achten nur atomarische Werte auszuwählen.</div></li><li class="li tags" data-element="li" data-tektur-editor-id="fa1dd8fe-e4e0-4a4f-9baa-a5f8a299180a"><div class="p  pmarker tags" data-element="p" contenteditable="true" data-tektur-editor-id="465b3eb6-8fa6-4bd3-9320-5c9378503f9e">Knotenmengen, die über die Streaming Option eingelesen wurden, können nicht einer Funktion übergeben werden. Sie sind auch nicht einer Variablen zuweisbar.</div></li><li class="li tags" data-element="li" data-tektur-editor-id="8b299193-e6f3-42f7-a826-29509d4fbdc0"><div class="p  pmarker tags" data-element="p" contenteditable="true" data-tektur-editor-id="821c444f-cd4b-412b-a392-4220cafb8d21">"Crawler”-Ausdrücke, wie //section sind nicht nicht zu verwenden, ebenso ein rekursiver Abstieg mit Selektion, wie bspw. mit einem Apply-Templates Call.</div></li></ul><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="76380020-ab1f-4121-86c3-c8f2cffb1396d6e19" class="p pmarker tags" data-element="p" data-tektur-editor-id="0437bdf3-ce38-45fd-bec9-553a99249f89" contenteditable="true">Zu Beginn der Streaming-Aktion kann man sich auf konventionelle Art und Weise Teilbäume, die nicht so performanzlastig aufgebaut werden, 
in einer Variablen abspeichern und im Verlauf der Streaming-Verarbeitung z.B. für einen Vergleich auswerten.</div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="6c3d953a-91cc-4be7-bf9d-65d3c6d6c75fd6e21" class="p pmarker tags" data-element="p" data-tektur-editor-id="7b2ab0f9-1377-4b5f-adc8-7cb6d1aa12d7" contenteditable="true">Ein einfaches Streaming Stylesheet könnte z.B. so aussehen:</div><div class="pre"><div data-attribute-id="90514307-2f4c-4076-af58-385fd5a10dabd6e23" data-attribute-xml_space="preserve" class="pre-content pmarker tags" data-element="pre" data-tektur-editor-id="c29b86c7-cc40-4287-b842-c17253ebc491" contenteditable="true">&#x3C;xsl:stylesheet version="3.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  exclude-result-prefixes="#all"&#x3E;
  
  &#x3C;xsl:output method="xml" indent="yes"/&#x3E;
  
  &#x3C;xsl:mode on-no-match="shallow-copy" use-accumulators="entry-count" streamable="true"/&#x3E;
  
  &#x3C;xsl:accumulator name="entry-count" as="xs:integer" initial-value="0" 
                   streamable="yes"&#x3E;
    &#x3C;xsl:accumulator-rule match="entry" select="$value + 1"/&#x3E;
  &#x3C;/xsl:accumulator&#x3E;
  
  &#x3C;xsl:template match="/"&#x3E;
    &#x3C;result&#x3E;
      &#x3C;xsl:apply-templates/&#x3E;
      &#x3C;count&#x3E;
        &#x3C;xsl:value-of select="accumulator-after('entry-count')"/&#x3E; 
      &#x3C;/count&#x3E;
    &#x3C;/result&#x3E;
  &#x3C;/xsl:template&#x3E;
  
&#x3C;/xsl:stylesheet&#x3E;</div></div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="4ba7c650-d5a0-489c-9392-3ab548afa421d6e25" class="p pmarker tags" data-element="p" data-tektur-editor-id="eda235a6-42d8-4f0b-9b4d-e7ec30ba5055" contenteditable="true">Diese Stylesheet hat einige Besonderheiten:</div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="06f1d8c6-03dd-4fa3-847b-4554e944f361d6e27" class="p pmarker tags" data-element="p" data-tektur-editor-id="ea38fdbb-3209-460a-931a-45174bc15b55" contenteditable="true">Zum einen wird darin ein Default-Modus deklariert, der jeden Knoten der Eingabeinstanz über
eine implizite Identity-Transformation (shallow-copy)[[fn:https://www.saxonica.com/html/documentation/xsl-elements/mode.html]]
in die Ausgabeinstanz kopiert.</div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="cda2834b-a464-49e5-9b3b-e8880252433cd6e29" class="p pmarker tags" data-element="p" data-tektur-editor-id="9a900160-5e6d-4d0b-82a9-0ba2f79e99a8" contenteditable="true">Auf herkömmlichem Weg würde man dafür ein Templates wie dieses verwenden:</div><div class="pre"><div data-attribute-id="c68efb34-5731-47cd-a875-ddcd69294489d6e32" data-attribute-xml_space="preserve" class="pre-content pmarker tags" data-element="pre" data-tektur-editor-id="15c49840-555c-499b-a5ee-19e152f77346" contenteditable="true">&#x3C;xsl:template match="node()|@*"
  &#x3C;xsl:copy&#x3E;
    &#x3C;xsl:apply-templates select="node()|@*"/&#x3E;
  &#x3C;/xsl:copy&#x3E;
&#x3C;/xsl:template&#x3E;</div></div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="6deb7053-43b9-437d-8ce4-ec81a69a7795d6e34" class="p pmarker tags" data-element="p" data-tektur-editor-id="60315117-6bff-42cb-96b5-16174af1b84a" contenteditable="true">Zum anderen wird ein Akkumulator verwendet. Normalerweise gibt es in XSLT keine Variablen,
sondern nur Konstanten, so wie das auch bei funktionalen Programmiersprachen der Fall ist.</div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="bce045c6-46f1-4745-8326-56beff21e266d6e36" class="p pmarker tags" data-element="p" data-tektur-editor-id="63bf6553-ec58-494f-bb28-115c6d77b916" contenteditable="true">Es gab zwar schon länger eine Saxon-Erweiterung, die die mehrmalige Zuweisung eines Wertes
an eine Variable erlaubte, im Normallfall braucht man diese Eigenschaft aber nicht.</div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="586338d8-49fa-4ddc-b715-99f9688ecd25d6e38" class="p pmarker tags" data-element="p" data-tektur-editor-id="a1e8ae92-4e29-4067-9d92-52ea716d6756" contenteditable="true">Ber der Verarbeitung sehr großer Datemengen, ist es aber unumgänglich, denn sonst
würde der Laufzeitstapel schnell an seine Grenzen gelangen.</div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="4a5b2945-71be-4b5c-be7f-2e33cd717a4cd6e40" class="p pmarker tags" data-element="p" data-tektur-editor-id="1515fd0e-7c8d-47d3-9991-32c88dfbbba7" contenteditable="true">Ein Akkumulator akkumuliert Werte, wie der Name schon sagt. Das können atomare Typen sein,
wie im obigen Beispiel, aber auch Datenstrukturen können aufgebaut werden, wie 
bspw. das Abspeichern des gerade prozessierten Teilbaums in einem Dictionary zur 
späteren Auswertung bzw. Gruppierung der Key-Elemente.</div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="825af8ca-d2ab-4357-ba6b-bbf4863f201fd6e42" class="p pmarker tags" data-element="p" data-tektur-editor-id="6552d578-e521-4915-af42-8f4191b457fd" contenteditable="true">Auch im Akkumulator muss das streamable="yes" Property gesetzt sein, wenn er im 
Streaming-Modus arbeiten soll. In diesem Modus kann der Akkumulatorwert erst ausgelesen werden,
wenn der untersuchte Baum vollständig durchlaufen wurde.</div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="8d27d621-4d12-4d40-a59e-8d58c45439a5d6e44" class="p pmarker tags" data-element="p" data-tektur-editor-id="7d9cdb0c-ad69-4317-8d2c-5780e88cc209" contenteditable="true">Um die Unterschiede zum "normalen" XSLT Betrieb festzustellen, können im obigen Beispiel 
einige offensichtlich korrekte Änderungen vorgenommen werden, die der Streaming 
Prozessor allerdings nicht akzeptiert.</div><div class="pre tags" data-tektur-editor-id="17ede8a2-7b2f-49d8-a12b-a3b31b6d08bb"><div class="pre-content pmarker show_menu tags" data-element="pre" contenteditable="true" data-tektur-editor-id="68e44b16-5f12-41aa-bb82-d95aa694f570">Cannot call accumulator-after except during the post-descent <div>phase of a streaming template</div></div></div><div class="text pmarker tags" data-element="p" contenteditable="true" data-tektur-editor-id="2c750b56-4a38-458d-bf3c-bbf703769955">Diese Fehlermeldung erscheint, wenn man den Apply-Templates Call entfernt. Der Akkumulator
wird also nur befüllt, wenn der Baum auch explizit durchlaufen wurde. Dieser Durchlauf 
kann auch ein reines Kopieren sein, bspw. kann man den Apply-Templates Call auch durch ein</div><div class="pre tags" data-tektur-editor-id="86f548c1-c94b-4ca0-be97-6f195c1cce0b"><div class="pre-content pmarker show_menu tags placeholder" data-element="pre" contenteditable="true" data-tektur-editor-id="b1149849-c3e9-47c5-92b3-10d63e20b40b">&#x3C;xsl:copy-of select="."/&#x3E;</div></div><div class="text pmarker tags" data-element="p" contenteditable="true" data-tektur-editor-id="05064b3f-404f-484c-8bfd-c8c6753d6278">ersetzen, was gleichbedeutend mit der Mode Einstellung</div><div class="pre tags" data-tektur-editor-id="e8882d9c-9b56-4635-84b7-6dec19cd92ab"><div class="pre-content pmarker show_menu tags placeholder" data-element="pre" contenteditable="true" data-tektur-editor-id="eeb667c6-9aaa-4a27-87d2-0623ac74ee3f">on-no-match="deep-copy"</div></div><div class="text pmarker tags" data-element="p" contenteditable="true" data-tektur-editor-id="b9acd673-4383-43c1-ab72-22c0167ae481">wäre. Wie man sieht hat sich in XSLT 3.0 viel bzgl. der Handhabung verschiedener
Verarbeitungsmodi getan. Anstatt Default-Match Regeln zu schreiben, kann man ganz oben
am Stylesheet Modus Properties setzen, die den Baumdurchlauf auf verschiedene
Arten realisieren.</div><div class="p tags pmarker placeholder" data-element="p" contenteditable="true" data-tektur-editor-id="aa2cf34e-e699-47a3-9aa9-af8e27e3f710">Die Verarbeitung großer Datenmenden ist aber mit Streaming etwas tricky und es sollte geprüft 
werden, ob ggf. konventionelles Performanz-optimiertes XSLT für den Answendungsfall ausreichen
würde.</div></div></div></div>