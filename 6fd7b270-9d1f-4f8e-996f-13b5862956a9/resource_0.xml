<?xml version="1.0" encoding="UTF-8"?><topic id="9d32e957-a332-40f5-bcbd-52fd6ed7f7da"><title id="a693fc99-5e16-4788-95a0-958870aa845a">Komplexe Validierung mit Schematron</title><body id="4db49812-1821-437b-a489-45eacebddee0"><p id="4e6cde2f-795e-42a2-97a3-67b0c72db22a">Um die Korrektheit einer XML Instanz zu prüfen, gib es verschiedene Schemata, wie XSD, RNG oder DTD, welche der Parser beim Aufbau des DOM Baums heranzieht. Eine Validierung mit Apache Xerces könnte beispielsweise als Java Code folgendermaßen angestossen werden:</p><pre id="721b6cb5-28be-489a-9f17-0ab159061d26d6e6" xml:space="preserve">URL schemaFile = new URL("http://host:port/filename.xsd");
Source xmlFile = new StreamSource(new File("web.xml"));
SchemaFactory schemaFactory = SchemaFactory
    .newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
try {
  Schema schema = schemaFactory.newSchema(schemaFile);
  Validator validator = schema.newValidator();
  validator.validate(xmlFile);
  System.out.println(xmlFile.getSystemId() + " is valid");
} catch (SAXException e) {
  System.out.println(xmlFile.getSystemId() + " is NOT valid reason:" + e);
} catch (IOException e) {</pre><p id="e0f8f3a8-ac48-4040-aa61-6d98bf685133d6e8">Schema Dateien können aber auch in XML Editoren eingebunden werden, um schon während der Eingabe der XML Instanz die Korrektheit zu überprüfen. </p><p id="3920a1e6-ddfe-499f-997b-33b7b330ae55d6e10">Das geht einerseits über die Angabe des Doctypes in der XML Instanz, anderseits bieten auch alle Editoren die Möglichkeit ein bestimmtes Schema explizit auszuwählen, um gegen dieses auf Anforderung zu validieren.</p><p id="0c8bf04d-6ef7-4b2b-9e36-3c115fdf5657d6e10">Gilt es komplexere Businessregeln zu überprüfen, die über Syntax-, Konsistenz- und einfache Korrektheitschecks hinausgehen, empfiehlt sich eine Validierung mit Schematron Regeln.</p><section id="af70cf43-417e-47cb-aadf-695fcd3d51e7d6e14"><title id="c802dd14-5953-4c24-8637-f7552d107e57d6e13">Schematron ist XSLT</title><p id="c7d6f54a-c183-4238-8fcd-65258833ebd9d6e15">Bei einer Schematron Validierung wird eine XML Instanz mit Hilfe eines automatisch generierten XSLT Stylesheets überprüft. Dieses kontextabhängige Stylesheet wird aus einer in der Schematron Syntax vom Autor verfassten Regelbasis, die wiederum in XML vorliegt, über ein zweites XSLT Stylesheet generiert - Dieses zweite XSLT Stylesheet ist sozusagen das eigentliche Schematron Programm. </p><p id="ca8d184a-924b-4ea6-bdab-3340c1bde072d6e19">Das folgende Diagramm veranschaulicht die Vorgehensweise anhand eines Filter-Szenarios, bei dem ein XML Dokument mit einigen ungültigen Passagen in eine gefilterte Darstellung überführt wird.</p> |   |                                                    Rejected by , .       <fig id="7b4d6915-e9d8-4db0-a65a-6b014e30d70cd6e21"><title id="8ed4cf2f-a93c-4075-b19a-61b54f2214ded6e23">Schematron Validierung mit Filter</title><image id="6e495d9f-b407-4fac-bf8e-e3abdb6b6d81d6e25" href="schematron.svg"/></fig><p id="4e1ec9a6-9a1a-470b-9e86-2708788be97bd6e19">Zu finden ist das Schematron Programm auf Github: https://github.com/Schematron/schematron. Dieses Repo ist etwas unübersichtlich. Der relevante Teil des Sourcecodes befindet sich unter: <b id="82b3a0b3-2923-4b6e-b0cf-7461ccdb21afd6e17">schematron/code</b></p></section><section id="59d154c3-c86b-43cd-b12d-2adfc7212bd7d6e30"><title id="0cc5ca05-4506-44eb-981b-f74a156e6da0d6e20">CLI Verwendung</title><p id="3f68c067-cd95-4b41-b51b-c594057af29fd6e22">Um die Schematron XSLT Skripte in eine eigene XSLT Anwendung per Kommandozeile einzubinden, könnte man folgendermassen vorgehen: </p><ul id="368e46b4-2935-46d4-b297-b69ea1f184f9d6e28"><li id="beaa7b40-6b08-40a3-b2ba-0adb6c981fe8d6e29"><p id="59142162-ceef-41df-a800-9a82f41eaff6d6e30">Im eigenen GIT Projekt das Schematron Projekt als Submodule referenzieren.</p></li><li id="9b6d2a32-4852-4160-b41b-862d27c79eb6d6e32"><p id="8a62a1b3-7fee-435a-bf97-c1948afb372ed6e33">Eine Regelbasis anlegen, beispielsweise <b id="908105b7-e0e4-4656-a73f-449c49c92efdd6e35">$project_name.sch</b>.</p></li><li id="0ae25d42-35fb-4e22-8244-0339392cfbe1d6e38"><p id="eab4b247-bdc0-4465-bc93-a032e7705a07d6e39">Zwei Batch-Skripte anlegen, beispielsweise <b id="cfcdb4b3-119e-4d43-ac1a-3fa7bd7a753bd6e47">generate_schema.sh</b> und <b id="e73b5101-e78c-4602-8557-705f32cdcd8cd6e46">validate.sh</b>.</p></li></ul><p id="998bb486-7c42-4af2-8e5b-0e85e56dc38ad6e50">Mittels des Skripts <b id="21bc9637-b020-4109-8a17-b6d1800423d1d6e52">generate_schema.sh</b> wird aus der Schematron Regelbasis das Schematron XSLT Stylesheet generiert. Der Inhalt dieser Batchdatei könnte zum Beispiel so aussehen:</p><pre id="2ccd7768-14ab-4a10-ae17-42f75a9bb28ed6e59" xml:space="preserve">saxon $script_dir/$project_name_validation.sch $script_dir/schematron/iso_dsdl_include.xsl
 | \ saxon -s:- $script_dir/schematron/iso_abstract_expand.xsl | \
saxon -s:- $script_dir/schematron/iso_svrl_for_xslt2.xsl \
  <b id="bf02c5f0-b12f-4646-a448-7f30126397fad6e57">generate-fired-rule</b>=false &gt; $script_dir/$project_name_validation.xsl</pre><p id="7be99f5c-fe71-459c-8ddf-9f08385e9169d6e54">Der Prozess zum Erzeugen des projektspezifischen Validerungs-XSLT-Skripts ist dreistufig und wird über die folgenden XSLT Schritte abgearbeitet.</p><ul id="9d6e90b6-c296-482a-a1e2-77c4b31d6a65d6e56"><li id="45781342-3ecf-42ae-8ab6-5ac71b0f4ff9d6e57"><p id="eb1a9bae-260a-4106-b5c9-b6851fdd2ba1d6e58">iso_dsdl_include.xsl</p></li><li id="7e655fce-dd9b-45b7-b7ed-a70107e495f8d6e60"><p id="a82297e3-5906-4320-99eb-713788e3b883d6e61">iso_abstract_expand.xsl</p></li><li id="8080fd50-b3ca-4df8-a4cf-06ac1f27971dd6e63"><p id="cab1d34a-07d6-4707-8cfd-1a22273d0703d6e64">iso_svrl_for_xslt2.xsl</p></li></ul><p id="315b3655-c795-42e1-908a-769f2ca0b68cd6e66">Herauszufinden, was in diesen Skripten passiert, sei dem geneigten Leser selbst überlassen. Uns interessiert an dieser Stelle nur das Resultat, nämlich das XSLT Stylesheet <b id="fecba66b-41af-4620-a748-e901a41ca7f1d6e74" href="undefined">$project_name_validation.xsl.</b></p><p id="a226a2f6-4408-401b-b164-9ee358f8bd09d6e76">Dieses Skript wird in der Batchdatei <b id="0db7ef83-4d36-4c36-90d4-6e67e2fe7b49d6e78">validate.sh</b> aufgerufen:</p><pre id="6be799fe-0e13-4639-915b-89b09ee64d6cd6e85" xml:space="preserve">saxon $xml_instance_to_check.xml $script_dir/$project_name_validation.xsl \
  &gt; $validation-result.xml</pre><p id="bd569a63-55f0-4524-bb53-0d3eeb1bdb59d6e83">Die Ausgabe dieses Prüfprozesses ist eine XML Datei mit den Fehlern in der Eingabe-XML-Instanz, die weiterverarbeitet werden kann, beispielsweise als Filterkriterium für einen nachfolgenden Prozessschritt. Ihr Inhalt dieser Datei sieht z.B. wie folgt aus:</p><pre id="2479441c-c5fc-42a0-aead-bb77054ea600d6e90" xml:space="preserve">&lt;svrl:schematron-output xmlns:svrl="http://purl.oclc.org/dsdl/svrl" [...]
  &lt;svrl:active-pattern document="file:/Users/alex/xml_instance_to_check.xml" 
   id="default" name="default"/&gt;
  &lt;svrl:failed-assert test="count(key('unique-ids', current()))=1"&gt;
    &lt;svrl:text&gt;ID is not unique!&lt;/svrl:text&gt;
    &lt;svrl:diagnostic-reference diagnostic="default"&gt;
      &lt;bk:id xmlns:bk="http://tekturcms/namespaces/book"&gt;1234-5678-9&lt;/my:id&gt;
    &lt;/svrl:diagnostic-reference&gt;
  &lt;/svrl:failed-assert&gt;
  [...]</pre><p id="62973ac6-dca8-47cf-b4aa-8e5b6c4242a6d6e88">Neben den <b id="7ad89680-6c2e-43d6-bfad-2966d9305fbed6e94" href="undefined">svrl:failed-assert</b> Elementen, die angeben, was bei der überprüften XML-Instanz fehlgeschlagen ist, gibt es auch die Möglichkeit sich positive Ergebnisse anzeigen zu lassen - über das Element <b id="a96f1de5-e6db-4a4d-886c-045eb2fa8362d6e97" href="undefined">svrl:successful-report</b>.</p><p id="a939cc7b-99b0-401a-8bc5-5b0c0f41882cd6e100">Konkret bedeutet das obige XML Schnipsel, dass unsere <b id="fff18c1e-dffc-445e-8a46-c2b6a09c75d8d6e96">id</b> mit dem Wert <b id="54b3de6b-905d-4133-b12e-474defcfa43bd6e99">1234-5688-9</b> im geprüften XML Dokument nicht eindeutig ist. Die Schematron Regelbasis, die wir zur Überprüfung angegebenen haben, sieht so aus:</p><pre id="a6ef8672-7b0c-405a-a073-882042323f48d6e108" xml:space="preserve">&lt;schema xmlns:sch="http://purl.oclc.org/dsdl/schematron" [...]
  &lt;xsl:key name="unique-ids" match="bk:id" use="."/&gt;
  &lt;sch:let name="date-regex" value="'^((19|2[0-9])[0-9]{2})-(0[1-9]|1[012])
                                     -(0[1-9]|[12][0-9]|3[01])$'"/&gt;
  &lt;sch:pattern id="default"&gt;
    &lt;sch:rule context="book"&gt;
      &lt;sch:assert id="check-book-id" role="error" test="count(key('unique-ids', bk:id))=1" 
                  diagnostics="default"&gt;ID is not unique!&lt;/sch:assert&gt;
      &lt;sch:assert id="check-book-published" role="error" 
                  test="matches(bk:published,$date-regex)
    &lt;/sch:rule&gt;
    [...]
  &lt;/sch:pattern&gt;
  &lt;sch:diagnostics&gt;
    &lt;sch:diagnostic id="default"&gt;
      &lt;xsl:element name="bk:id"&gt;
        &lt;xsl:value-of select="bk:id"/&gt;
      &lt;/xsl:element&gt;
    &lt;/sch:diagnostic&gt;
  &lt;/sch:diagnostics&gt;</pre><p id="86e8f330-f639-42dd-98da-7eebba76fb51d6e108">Neben der "successful" und "failed" Regeln ist auch die Deklaration von Funktionen und Variablen im Body der Regelbasis erlaubt. Dies ermöglicht komplexe Bedingungen, bespw. durch das Nachschlagen in einer Lookup-Tabelle abzuprüfen. </p></section></body></topic>