<?xml version="1.0" encoding="UTF-8"?><elements><element id="a693fc99-5e16-4788-95a0-958870aa845a" type="para">Validierung mit Schematron</element><element id="4e6cde2f-795e-42a2-97a3-67b0c72db22a" type="para">Um die Korrektheit einer XML Instanz zu prüfen, gib es verschiedene Schemata, wie XSD , RNG oder DTD  , welche der Parser beim Aufbau des DOM Baums heranzieht. Eine Validierung mit Apache Xerces könnte beispielsweise als Java Code folgendermaßen angestossen werden:</element><element id="1c11f6e7-bff1-4c65-933a-6c6963fd96add7e15" type="code">URL schemaFile = new URL(\"http:\/\/host:port\/filename.xsd\"); Source xmlFile = new StreamSource(new File(\"web.xml\")); SchemaFactory schemaFactory = SchemaFactory .newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI); try { Schema schema = schemaFactory.newSchema(schemaFile); Validator validator = schema.newValidator(); validator.validate(xmlFile); System.out.println(xmlFile.getSystemId() + \" is valid\"); } catch (SAXException e) { System.out.println(xmlFile.getSystemId() + \" is NOT valid reason:\" + e); } catch (IOException e) {</element><element id="e0f8f3a8-ac48-4040-aa61-6d98bf685133d6e8" type="para">Schema Dateien können aber auch in XML Editoren eingebunden werden, um schon während der Eingabe der XML Instanz die Korrektheit zu überprüfen.</element><element id="3920a1e6-ddfe-499f-997b-33b7b330ae55d6e10" type="para">Das geht einerseits über die Angabe des Doctypes in der XML Instanz, anderseits bieten auch alle Editoren die Möglichkeit ein bestimmtes Schema explizit auszuwählen, um gegen dieses auf Anforderung zu validieren.</element><element id="0c8bf04d-6ef7-4b2b-9e36-3c115fdf5657d6e10" type="para">Gilt es komplexere Businessregeln zu überprüfen, die über Syntax-, Konsistenz- und einfache Korrektheitschecks hinausgehen, empfiehlt sich eine Validierung mit Schematron Regeln.</element><element id="c802dd14-5953-4c24-8637-f7552d107e57d6e13" type="para">Schematron ist XSLT</element><element id="c7d6f54a-c183-4238-8fcd-65258833ebd9d6e15" type="para">Bei einer Schematron Validierung wird eine XML Instanz mit Hilfe eines automatisch generierten XSLT Stylesheets überprüft. Dieses kontextabhängige Stylesheet wird aus einer in der Schematron Syntax vom Autor verfassten Regelbasis, die wiederum in XML vorliegt, über ein zweites XSLT Stylesheet generiert - Dieses zweite XSLT Stylesheet ist sozusagen das eigentliche Schematron Programm.</element><element id="ca8d184a-924b-4ea6-bdab-3340c1bde072d6e19" type="para">Das folgende Diagramm veranschaulicht die Vorgehensweise anhand eines Filter-Szenarios , bei dem ein XML Dokument mit einigen ungültigen Passagen in eine gefilterte Darstellung überführt wird.</element><element id="14d10ed8-da18-4558-85da-bba3ee0d3519d7e32" type="para">Schematron Validierung mit Filter</element><element id="4e1ec9a6-9a1a-470b-9e86-2708788be97bd6e19" type="para">Zu finden ist das Schematron Repo auf Github . Dieses Repo ist etwas unübersichtlich. Der relevante Teil des Sourcecodes befindet sich unter: </element><element id="0cc5ca05-4506-44eb-981b-f74a156e6da0d6e20" type="para">CLI Verwendung</element><element id="3f68c067-cd95-4b41-b51b-c594057af29fd6e22" type="para">Um die Schematron XSLT Skripte in eine eigene XSLT Anwendung per Kommandozeile einzubinden, könnte man folgendermassen vorgehen:</element><element id="59142162-ceef-41df-a800-9a82f41eaff6d6e30" type="para">Im eigenen GIT Projekt das Schematron Projekt als Submodule referenzieren.</element><element id="8a62a1b3-7fee-435a-bf97-c1948afb372ed6e33" type="para">Eine Regelbasis anlegen, beispielsweise .</element><element id="eab4b247-bdc0-4465-bc93-a032e7705a07d6e39" type="para">Zwei Batch-Skripte anlegen, beispielsweise und .</element><element id="998bb486-7c42-4af2-8e5b-0e85e56dc38ad6e50" type="para">Mittels des Skripts wird aus der Schematron Regelbasis das Schematron XSLT Stylesheet generiert. Der Inhalt dieser Batchdatei könnte zum Beispiel so aussehen:</element><element id="26247364-5686-4b3a-8e1e-1cab4f253b82d7e56" type="code">saxon $script_dir\/$project_name_validation.sch $script_dir\/schematron\/iso_dsdl_include.xsl | \\ saxon -s:- $script_dir\/schematron\/iso_abstract_expand.xsl | \\ saxon -s:- $script_dir\/schematron\/iso_svrl_for_xslt2.xsl \\ generate-fired-rule =false &gt; $script_dir\/$project_name_validation.xsl</element><element id="7be99f5c-fe71-459c-8ddf-9f08385e9169d6e54" type="para">Der Prozess zum Erzeugen des projektspezifischen Validerungs-XSLT-Skripts ist dreistufig und wird über die folgenden XSLT Schritte abgearbeitet.</element><element id="eb1a9bae-260a-4106-b5c9-b6851fdd2ba1d6e58" type="para"> </element><element id="a82297e3-5906-4320-99eb-713788e3b883d6e61" type="para"> </element><element id="cab1d34a-07d6-4707-8cfd-1a22273d0703d6e64" type="para"> </element><element id="315b3655-c795-42e1-908a-769f2ca0b68cd6e66" type="para">Herauszufinden, was in diesen Skripten passiert, sei dem geneigten Leser selbst überlassen. Uns interessiert an dieser Stelle nur das Resultat, nämlich das XSLT Stylesheet .</element><element id="a226a2f6-4408-401b-b164-9ee358f8bd09d6e76" type="para">Dieses Skript wird in der Batchdatei aufgerufen:</element><element id="958107f0-f47f-4401-ad4a-9c69b2a1a5a3d7e77" type="code">saxon $xml_instance_to_check.xml $script_dir\/$project_name_validation.xsl \\ &gt; $validation-result.xml</element><element id="bd569a63-55f0-4524-bb53-0d3eeb1bdb59d6e83" type="para">Die Ausgabe dieses Prüfprozesses ist eine XML Datei mit den Fehlern in der Eingabe-XML-Instanz, die weiterverarbeitet werden kann, beispielsweise als Filterkriterium für einen nachfolgenden Prozessschritt. Ihr Inhalt dieser Datei sieht z.B. wie folgt aus:</element><element id="bd7c1f8c-ad3d-47a9-b422-dac4c7180d84d7e82" type="code">&lt;svrl:schematron-output xmlns:svrl=\"http:\/\/purl.oclc.org\/dsdl\/svrl\" [...] &lt;svrl:active-pattern document=\"file:\/Users\/alex\/xml_instance_to_check.xml\" id=\"default\" name=\"default\"\/&gt; &lt;svrl:failed-assert test=\"count(key('unique-ids', current()))=1\"&gt; &lt;svrl:text&gt;ID is not unique!&lt;\/svrl:text&gt; &lt;svrl:diagnostic-reference diagnostic=\"default\"&gt; &lt;bk:id xmlns:bk=\"http:\/\/tekturcms\/namespaces\/book\"&gt;1234-5678-9&lt;\/my:id&gt; &lt;\/svrl:diagnostic-reference&gt; &lt;\/svrl:failed-assert&gt; [...]</element><element id="62973ac6-dca8-47cf-b4aa-8e5b6c4242a6d6e88" type="para">Neben den Elementen, die angeben, was bei der überprüften XML-Instanz fehlgeschlagen ist, gibt es auch die Möglichkeit sich positive Ergebnisse anzeigen zu lassen - über das Element .</element><element id="a939cc7b-99b0-401a-8bc5-5b0c0f41882cd6e100" type="para">Konkret sagt uns das obige XML Schnipsel, dass unsere mit dem Wert im geprüften XML Dokument nicht eindeutig ist. Die Schematron Regelbasis, die wir zur Überprüfung angegebenen haben, sieht so aus:</element><element id="cf77a4b2-51fa-4a4d-b527-2c6c763d6274d7e88" type="code">&lt;schema xmlns:sch=\"http:\/\/purl.oclc.org\/dsdl\/schematron\" [...] &lt;xsl:key name=\"unique-ids\" match=\"bk:id\" use=\".\"\/&gt; &lt;sch:let name=\"date-regex\" value=\"'^((19|2[0-9])[0-9]{2})-(0[1-9]|1[012]) -(0[1-9]|[12][0-9]|3[01])$'\"\/&gt; &lt;sch:pattern id=\"default\"&gt; &lt;sch:rule context=\"book\"&gt; &lt;sch:assert id=\"check-book-id\" role=\"error\" test=\"count(key('unique-ids', bk:id))=1\" diagnostics=\"default\"&gt;ID is not unique!&lt;\/sch:assert&gt; &lt;sch:assert id=\"check-book-published\" role=\"error\" test=\"matches(bk:published,$date-regex) &lt;\/sch:rule&gt; [...] &lt;\/sch:pattern&gt; &lt;sch:diagnostics&gt; &lt;sch:diagnostic id=\"default\"&gt; &lt;xsl:element name=\"bk:id\"&gt; &lt;xsl:value-of select=\"bk:id\"\/&gt; &lt;\/xsl:element&gt; &lt;\/sch:diagnostic&gt; &lt;\/sch:diagnostics&gt;</element><element id="86e8f330-f639-42dd-98da-7eebba76fb51d6e108" type="para">Neben der \"successful\" und \"failed\" Regeln ist auch die Deklaration von Funktionen und Variablen im Body der Regelbasis erlaubt. Dies ermöglicht komplexe Bedingungen, bespw. durch das Nachschlagen in einer Lookup-Tabelle abzuprüfen.</element></elements>