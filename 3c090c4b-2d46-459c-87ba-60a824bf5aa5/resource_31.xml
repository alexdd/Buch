<?xml version="1.0" encoding="UTF-8"?><topic id="e3e3be23-3387-4f2d-bc88-628272b743f3"><title id="f19c130f-edfe-408f-a9e2-31b53d92bb4c">Aktuelle und vergangene Anwendungen</title><body id="9cc3bf17-5788-4134-a1d2-361e3105f53e"><p id="0d86999f-6918-45f8-aa05-ee775429e1db">Wie auch bei anderen Programmiersprachen, hat es einige Zeit gedauert bis sich für <b id="0fce7924-8d7a-456c-9cdf-184a94d85dd1d7e6">XSLT</b> der optimale Anwendungsbereich herauskristallisiert hat. Auch bei <b id="5ed2d76e-1683-4b46-a0ee-c73015b44724d7e9">XSLT</b> war ursprünglich das Internet und insbesondere Webseitenprogrammierung die treibende Kraft, weil meinte, mittels <b id="93c8fdc3-b88e-4649-8c3b-b320e251a454d7e12">XSLT</b> besonders gut Inhalt und Semantik trennen zu können. </p><p id="1cc2b53a-8cb6-4144-83d9-02b7d4475ce5d7e6">Relativ schnell hat sich aber <b id="348b9b17-b6b0-4772-ac1b-959cb7c330f0d7e17">CSS</b> in Verbindung mit <b id="3ab7a277-1918-4595-88ea-fd1bb4f0d1ecd7e20">JavaScrip</b>t als Standardlösung für diese Zecke bewährt. <b id="b3d7f78c-211c-434b-afd2-b0d9799286e0d7e23">XSLT</b> ist inzwischen Platzhirsch im Bereich <b id="fbfc7d44-ea1c-4b0d-8af7-2af439ef8d7fd7e26">Technische Dokumentation</b> und hier auch wohl unschlagbar.</p><section id="0de02978-01fe-4657-97bd-905fff5edf23d7e29"><title id="ab76273e-04a8-430a-9f91-9a1b68d9c981d6e7">XML Webseiten</title><p id="d23736ab-93da-4908-83d8-38ffd747db2dd6e9">Einen <b id="fe21d9a7-4312-4b8a-816f-5e55036575eed7e34">XSLT Prozessor</b> hat jeder Browser eingebaut. Es gab mal eine Zeit, in der es sehr populär war, Webseiten vom Server als <b id="b7166885-35ea-47fe-a647-4e295e56fd2ed7e37">XML </b>auszuliefern[[xe1:Anwendungsgebiete;xe2:XML Webseiten]]. <b id="68222186-82e5-4d7f-8a41-8651a0d0a0bad7e40">XML</b> erlaubt die semantische Auszeichung des Inhalts, und die strikte Trennung des Inhalts von Layout und Design. Wesentlich besser als dies mit <b id="c4eb1308-cb5c-4eea-9855-4556b136155dd7e43">HTML </b>und <b id="0fa2277d-ab45-4593-be70-68278230ddb5d7e46">CSS</b> jemals möglich wäre. U.a. wegen des exzessiven Einsatzes von <b id="bdd9f12e-5f9b-44d2-9cab-4506e47e1e8bd7e50">JavaScrip</b>t (auch inline), hat sich diese Idee nie vollständig durchgesetzt. Schliesslich wurde <b id="355067db-f1f7-4e4a-8b15-6012d1919dfbd7e53">XHTML</b> spezifiziert und jetzt gibt es <b id="07b5ea41-594e-43ca-bc6f-7850abbf11c0d7e56">HTML5</b>.</p><p id="c5dabda9-b019-4598-8fed-e6a685efd53cd6e17">Betrachten wir das folgende <b id="2c1fa776-26ec-4223-8afe-6eda84bb4f1ed7e61">XML</b> Beispiel:</p><pre id="f2f19560-088e-456d-b506-47f8e0b2e2c4d7e64" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;document&gt;
&lt;title&gt;Das ultimative Zwei-Kapitel Dokument&lt;/title&gt;
  &lt;chapter&gt;
    &lt;title&gt;Kapitel 1&lt;/title&gt;
    &lt;intro&gt;In Kapitel 1 wird kurz gesagt was Sache ist.&lt;/intro&gt;
    &lt;content&gt;Um es kurz zu machen, wie der Hase läuft steht in Kapitel 2.&lt;/content&gt;
  &lt;/chapter&gt;
  &lt;chapter&gt;
    &lt;title&gt;Kapitel 2&lt;/title&gt;
    &lt;intro&gt;Hier wird erklärt, wie der Hase läuft.&lt;/intro&gt;
    &lt;content&gt;Im Prinzip ist es ganz einfach.&lt;/content&gt;
  &lt;/chapter&gt;
&lt;/document&gt;</pre><p id="1450640b-064e-42c2-9881-547df58b7020d6e21">Ohne <b id="c69cdbe6-cd8f-492b-aa32-2da3e30127f9d7e68">XSLT Stylesheet</b> Zuweisung wird der Browser eine Datei mit diesem Inhalt als eingerücktes <b id="fba1d85c-bc8c-4f16-9af4-ae4af05b4878d7e71">XML</b> anzeigen - oder die Tags einfach ignorieren und den Textinhalt in einer Zeile darstellen. Fügt man eine [[link]]Processing Instruction[[fn:https://de.wikipedia.org/wiki/Verarbeitungsanweisung*Die Processing Instruction wertet der Parser als Kommando aus und nicht als Teil des XML Contents]][[xe1:XML Konstrukte;xe2:Processing Instruction]] am Anfang ein, wird ein <b id="89c4da73-8d18-44a9-ad02-1206b9541304d7e74">XSLT Stylesheet</b> vom Browser herangezogen und vor der Darstellung im Browser wird die so deklarierte <b id="da351a8f-b1da-4465-bf4c-7b9c1f15ee81d7e77">XML Transformation</b> ausgeführt:</p><pre id="8d7e86eb-2002-4ad0-97d2-fe4340359e67d7e80" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="formatiermich.xsl" ?&gt;
&lt;document&gt;
  &lt;title&gt;Das ultimative Zwei-Kapitel Dokument&lt;/title&gt;
  &lt;chapter&gt;
[...]</pre><p id="134c0541-26a7-4213-9b7d-ed83c8f08cbcd6e25">Das <b id="5918d5fe-32b5-4d0a-b522-e7018075d329d7e84">XML</b> kann nun im Browser geöffnet werden und alles wird schön formatiert angezeigt...</p><pre id="90f9fbf6-0f56-480b-ad17-1f8756759932d7e87" xml:space="preserve">&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="document"&gt;
  &lt;body&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/body&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="document/title"&gt;     
    &lt;h1&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/h1&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter"&gt;
    &lt;div class="chapter"&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/div&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter/title"&gt;
    &lt;h2&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/h2&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter/intro"&gt;
    &lt;div class="intro"&gt;
      &lt;i&gt;&lt;xsl:apply-templates/&gt;&lt;/i&gt;      
    &lt;/div&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter/content"&gt;
    &lt;p&gt;&lt;xsl:apply-templates/&gt;&lt;/p&gt;    
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</pre><p id="25706f42-0507-45a5-a2cc-66f12f9e87bdd6e30">Die <b id="2e36f4de-3413-420a-89dd-91e17423c225d6e25">Processing Instruction</b> hat keinen Einfluss auf den XML Inhalt und wird in einer anderen Eingabeverarbeitung nicht herangezogen.</p></section><section id="27b50efc-d594-47fc-a9d6-5416908e91f3d7e94"><title id="d1a0e576-5434-4f78-a143-0aba397514ddd6e33">Serverseitige Konvertierung</title><p id="a476b87f-7491-444d-8668-72f5e5719ebed6e35">Auch eine serverseitige Konvertierung[[xe1:Anwendungsgebiete;xe2:Serverseitige Konvertierung]] ist gebräuchlich. Ein Beispiel aus vergangenen Tagen - [[link]]WAP-Seiten[[fn:https://de.wikipedia.org/wiki/Wireless_Application_Protocol*Mittels dieser Technologie wurden Webinhalte auf Handys gespielt. Das war vor den Smartphones]] für unterschiedliche Handy-Modelle.</p><p id="b764a9c0-9b8f-411a-ab3a-6b9241047afed6e37">Früher hatten die Handys sehr unterschiedliche Displaygrößen. Handybrowser konnten nicht ausreichend <b id="48227612-ed4f-40e1-a24a-3cfa1a1bc733d7e101">JavaScript</b> und die Skalierung der WAP-Seite für das jeweilige Handy passierte nicht im Handy, sondern vor der Auslieferung auf der Serverseite. Dazu wurde eine <b id="695b1fff-9614-4198-8840-8253ad43a3f0d7e104">XML</b> Quelle mittels verschiedener <b id="7bd109f1-3914-4263-999e-8d446e63702cd7e107">XSLT Stylesheets</b> in unterschiedliche <b id="60e1ad81-aebe-446e-bd47-2e71df5ea32ad7e110">WML WAP</b> Repräsentationen transformiert.</p><p id="47042bcb-c720-41ec-819b-86527013fa52d6e39">So würde das Zwei-Kapitel Beispiel von oben im <b id="d6248a52-2d22-4442-b8ea-cce212cb7c3cd7e115">WML Format</b> aussehen (recht einfach gehalten):</p><pre id="51ff85ec-5ce1-4ef4-9c02-3e4852908ef5d7e118" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.1//EN" "http://www.wap.org/DTD/wml_1.1.xml"&gt;
&lt;wml&gt;
  &lt;head&gt;
    &lt;meta name="title" content="Das ultimative Zwei-Kapitel Dokument"/&gt;   
  &lt;/head&gt; 
  &lt;card id="chapter1" title="Kapitel 1"&gt;
    &lt;p&gt;&lt;i&gt;In Kapitel 1 wird kurz gesagt was Sache ist.&lt;/i&gt;&lt;/p&gt;        
    &lt;p&gt;Um es kurz zu machen, wie der Hase läuft steht in Kapitel 2.&lt;/p&gt;  
  &lt;/card&gt;
  &lt;card id="chapter2" title="Kapitel 2"&gt;
    &lt;p&gt;&lt;i&gt;Hier wird erklärt, wie der Hase läuft.&lt;/i&gt;&lt;/p&gt;
    &lt;p&gt;Im Prinzip ist es ganz einfach.&lt;/p&gt;
  &lt;/card&gt;
&lt;/wml&gt;</pre><p id="5d603262-8282-4d8f-bb2f-145b7ff53e92d6e43">Eine <b id="cf6dd96d-eee9-415e-8ae7-83c0b6b35c05d7e122">XSLT Transformation</b>, die die <b id="dc92c609-053a-45b8-8d38-0ca94e5e2c3bd7e125">XML </b>Daten von oben in diese <b id="65853dfc-dcc7-40d4-8c4c-6fc6bcdacbd7d7e128">WML</b> Darstellung überführt, könnte z.B. so implementiert werden:</p><pre id="030dfa66-c93b-4b3d-a984-6b28e9e5c196d7e131" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;

  &lt;xsl:output
    doctype-public="-//WAPFORUM//DTD WML 1.2//EN" 
    doctype-system="http://www.wapforum.org/DTD/wml12.dtd"
    indent="yes"/&gt;
    
  &lt;xsl:template match="document"&gt;
    &lt;wml&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/wml&gt;
  &lt;/xsl:template&gt;
    
  &lt;xsl:template match="document/title"&gt;
    &lt;head&gt;
      &lt;meta name="title"&gt;
        &lt;xsl:attribute name="content"&gt;
          &lt;xsl:value-of select="."/&gt;               
        &lt;/xsl:attribute&gt;
      &lt;/meta&gt;      
    &lt;/head&gt;
  &lt;/xsl:template&gt;
    
  &lt;xsl:template match="chapter"&gt;
    &lt;card id="{concat('chapter',count(preceding-sibling::chapter)+1)}"&gt;
      &lt;xsl:attribute name="title"&gt;
        &lt;xsl:value-of select="title"/&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:apply-templates select="*[not(self::title)]"/&gt;
    &lt;/card&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="node()|@*"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates select="node()|@*"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="processing-instruction()"/&gt;
  
  &lt;xsl:template match="intro"&gt;
    &lt;p&gt;&lt;i&gt;&lt;xsl:apply-templates/&gt;&lt;/i&gt;&lt;/p&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="content"&gt;
    &lt;p&gt;&lt;xsl:apply-templates/&gt;&lt;/p&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></section><section id="b4cd3a90-83ab-4e57-892f-21f9859c71dcd7e133"><title id="fa0123f8-d2ab-48fe-a8a4-69c5ea6e5b29d6e48">Multiple Ausgabeformate</title><p id="479bd9ce-f36a-4b96-a291-61f95e4e767dd6e50">Aus einer <b id="b9f393e6-0103-4e5a-9f36-71989c183a31d7e138">XML</b> Quelle können auch leicht weitere Format erzeugt werden, bspw. . [[link]]EPUB[[fn:https://de.wikipedia.org/wiki/EPUB*EPUB ist ein Dokumentformat für Ebook-Reader.]] ist das Standardformat für eBooks. Neben Tags zur Formatierung für den Content, gibt es bspw. auch Anweisungen zum Erzeugen des Inhaltsverzeichnisses oder anderer Navigationsstrukturen.</p><p id="e8969256-cea5-4fd0-b7bf-5f9eeb42b148d6e52">Weitere gängige Formate sind neben dem oben veralteten <b id="9a1f564e-61de-4a32-87e7-8d32edc2f96bd7e143">WML</b> Format, elektronische Ausgabe-Formate wie: [[link]]CHM[[fn:https://de.wikipedia.org/wiki/CHM_(Dateiformat*Die alte Windows-Hilfe. Läuft immer noch im Bereich Maschinenbau auf gekoppelten Rechnern mit alter Windows Software)]], [[link]]EclipseHelp[[fn:https://www.ibm.com/developerworks/library/os-echelp/index.html*Das Hilfe-Format der Eclipse Rich Client Plattform. Eclipse wird hauptsächlich von Programmierern als Editor benutzt]], [[link]]JavaHelp[[fn:https://en.wikipedia.org/wiki/JavaHelp*Damit wird bspw. das Java API formatiert als Webseite ausgegeben]], ..., Print-Ausgabe Formate, wie <b id="a80fa6e0-89e5-4238-89fa-1e705ba882e6d7e146">PDF</b> oder [[link]]Adobe Framemaker[[fn:https://de.wikipedia.org/wiki/FrameMaker*Mit Framemaker kann man manuell gesetzte Publikationen erstellen. Über Templates lässt sich das Layout aber auch automatisieren]],  oder XML Standard Austauschformate, wie <b id="c1514cb7-a74d-4d04-af74-877427e726acd7e149">DITA</b>, <b id="3e8b4a3c-d9c8-4757-adbe-9e780c504672d7e152">S1000D</b>, [[link]]PI-MOD[[fn:https://www.i4icm.de/forschungstransfer/pi-mod/*PI-Mod ist ein Informationsmodell, das am KIT (Uni Karlsruhe) entwickelt wird/wurde]], [[link]]JATS[[fn:https://de.wikipedia.org/wiki/Journal_Article_Tag_Suite*JATS ist ein sehr verbreitetes Informationsmodell im Bereich wissenschaftlicher Artikel und Fachliteratur]][[xe1:Standards;xe2:JATS]] oder [[link]]TEI[[fn:https://de.wikipedia.org/wiki/Text_Encoding_Initiative*Wikipediaseite zum TEI Standard]][[xe1:Standards;xe2:TEI]].</p></section><section id="51263355-d431-420f-ab23-62b4e072f6b7d7e155"><title id="4135a624-a45f-433c-8d0b-18416fe3765fd6e55">Menschenlesbare Ausgabe</title><p id="dc869a54-1cb6-4282-b816-825027432083d6e57">Kryptische <b id="011b78f3-0cd9-4560-a69b-5fa45f915c2dd7e160">XML</b> Log-, Daten- oder Konfigurationsfiles[[xe1:Anwendungsgebiete;xe2:Log- und Konfigurationsdaten]] können leicht mit <b id="332759ab-4404-4ccd-b52f-86e1e216de1ad7e163">XSLT</b> menschenlesbar formatiert werden. Ein Arbeitskollege im neuen Job kam kürzlich auf mich zu, ob ich um eine Möglichkeit wüsste, wie man sein kryptisches Datenfile für einen Übersetzungsdienst formatieren könnte:</p><pre id="957dc529-cdb6-4bf0-8b75-05fdc903185ed7e166" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;?&lt;?xml-stylesheet type="text/xsl" href="de.xsl"?&gt;
&lt;jcr:root xmlns:sling="http://sling.apache.org/jcr/sling/1.0"
  xmlns:jcr="http://www.jcp.org/jcr/1.0" 
  xmlns:mix="http://www.jcp.org/jcr/mix/1.0"
  xmlns:nt="http://www.jcp.org/jcr/nt/1.0"
  jcr:language="de"
  jcr:mixinTypes="[mix:language]"
  jcr:primaryType="sling:Folder"&gt;
&lt;b_manual 
  jcr:primaryType="sling:MessageEntry"
  sling:message="Bedienungsanleitung"/&gt;
  &lt;b_warning
    jcr:primaryType="sling:MessageEntry"
    sling:message="Warnung"/&gt;
  &lt;b_danger
    jcr:primaryType="sling:MessageEntry"
    sling:message="Vorsicht"/&gt;
  &lt;b_note
    jcr:primaryType="sling:MessageEntry"
    sling:message="Notiz"/&gt;
  &lt;b_notice
    jcr:primaryType="sling:MessageEntry"
    sling:message="Hinweis"/&gt;
  [...]</pre><p id="aaaf6a3a-55b3-4599-8bbd-59db3819473fd6e61">Mit einem eingehängten <b id="00a7fee2-ca41-4b1b-a7a4-a346e4a499ccd7e170">XSLT Stylesheet</b>[[code:de.xsl]] wird so ein Datenfile als Tabelle formatiert:</p><pre id="c22fd882-d21e-49f4-a9b2-ceb467b4e1e2d7e173" xml:space="preserve">&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:jcr="http://www.jcp.org/jcr/1.0"
  xmlns:sling="http://sling.apache.org/jcr/sling/1.0"&gt;
  
  &lt;xsl:template match="jcr:root"&gt;
    &lt;html&gt;
      &lt;table border="1" cellpadding="5" cellspacing="5"&gt;
        &lt;xsl:apply-templates/&gt;
      &lt;/table&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="*"&gt;
    &lt;tr&gt;
      &lt;td&gt;
        &lt;xsl:value-of select="concat(count(preceding::*[@sling:message]) + 1,'.')"/&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;xsl:value-of select="name()"/&gt;
      &lt;/td&gt;
      &lt;td contenteditable="true"&gt;
        &lt;xsl:value-of select="@sling:message"/&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre><p id="8306957f-386e-4c63-9c69-ee876511fecbd6e65">Hängt man an dieses Beispiel noch ein bisschen <b id="0533c5cd-8883-4a98-8e9d-f230dbe742ebd7e177">JavaScript</b> Logik und macht die Felder für die Übersetzungen mittels des <b id="760a5700-8216-44ff-90d9-c78b91af87b5d7e180">HTML5 </b>[[code:contenteditable]] Attributs[[xe1:Attribute;xe2:contenteditable]] editierbar, dann bräuchte man nur noch eine Rücktransformation <b id="470065ee-d757-4c96-8362-f382d1cee50fd7e183">HTML</b> nach<b id="e7bd7872-8d57-4804-b106-6e00b38e47b0d7e186"> XML</b> und hätte schon einen kleinen <b id="37d76098-5704-4129-9f79-976d387d2874d7e189">XML Editor </b>gebaut. So funktioniert auch der Editor in [[$productname]].</p></section><section id="05489cfe-4cf1-4694-9fdb-fd861ef5fecfd7e192"><title id="5ab04d47-2964-42e4-8002-ba2b7828111bd6e68">Diagramme darstellen</title><p id="6a649e53-dde4-4e49-8e01-1fb5ad83cf2ed6e70">Nachdem eine <b id="0708b47f-69f1-428c-840f-086bbda112b4d7e197">SVG</b>[[xe1:Standards;xe2:SVG]] Grafik[[xe1:Anwendungsgebiete;xe2:Visualisierung]] im <b id="e9750004-6947-4e29-a178-9e63c3bf9231d7e200">XML</b> Format vorliegt kann diese auch direkt aus <b id="9d5d696c-fc92-4e1e-84da-7c0e666d8dbed7e203">XML</b> Daten mittels <b id="6037568a-7d23-4406-8184-f7e3db18fcbcd7e206">XSLT</b> erzeugt werden. Über das <b id="5b9678ea-752a-4a72-a2d7-4933ee4db7d0d7e209">HTML5</b>[[code:&lt;svg&gt;]] Element kann so eine erzeugte Grafik inline in das ebenfalls durch das <b id="d33e9fb4-fdfe-4435-adb0-08b35c27324fd7e213">XSLT</b> generierte <b id="d13ec5d6-0b0d-43d0-b8b3-ccba45686f84d7e216">HTML</b> Dokument eingebunden werden.</p><p id="182ba4df-adcd-4102-af88-18c7570f7b71d6e72">Betrachten wir unser Beispiel von oben, erweitert um drei neue [[code:&lt;block&gt;]] Elemente:</p><pre id="8ce6605a-f878-4265-97cb-ce30b678af1fd7e221" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="chart.xsl" ?&gt;
&lt;document&gt;
  &lt;title&gt;Das ultimative Zwei-Kapitel Dokument&lt;/title&gt;
  &lt;chapter&gt;
    &lt;title&gt;Kapitel 1&lt;/title&gt;
    &lt;intro&gt;In Kapitel 1 wird kurz gesagt was Sache ist.&lt;/intro&gt;
    &lt;content&gt;Um es kurz zu machen, wie der Hase läuft steht in Kapitel 2.&lt;/content&gt;
  &lt;/chapter&gt;
  &lt;chapter&gt;
    &lt;title&gt;Kapitel 2&lt;/title&gt;
    &lt;intro&gt;Hier wird erklärt, wie der Hase läuft.&lt;/intro&gt;
    &lt;content&gt;Im Prinzip ist es ganz einfach. Betrachten wir doch drei gelbe Blöcke:
    &lt;/content&gt;
    &lt;block/&gt;
    &lt;block/&gt;
    &lt;block/&gt;
  &lt;/chapter&gt;
&lt;/document&gt;</pre><p id="f5656cd5-03c5-43a0-be15-a7187bbdab37d6e76">Wenn wir das <b id="99888b2c-75c4-4bef-8935-f196c2755919d7e225">XSLT Stylesheet</b> noch um eine Regel für das neue [[code:&lt;block&gt;]] Element ergänzen, so wie hier:</p><pre id="b0ef2dc0-1b58-4118-a22e-3c60f0daac84d7e228" xml:space="preserve">&lt;xsl:template match="block"&gt;
   &lt;svg style="background-color:yellow" width="30" height="30" 
     xmlns:xlink="http://www.w3.org/1999/xlink" 
     xmlns="http://www.w3.org/2000/svg"/&gt;
  &lt;br/&gt;
  &lt;br/&gt;
&lt;/xsl:template&gt;</pre><p id="1015bdf3-e31c-4085-b1cb-00c7cc2c5bd4d6e80">Dann erhalten wir drei schön formatierte gelbe <b id="a747adf4-3dda-48ba-ba1f-782b1bf54368d7e232">SVG</b> Blöcke ...</p><p id="f1e12ddb-1bcb-49c0-b938-0a77393018d1d6e82"><b id="276fca58-f8f9-4599-a1e6-318f31e908c5d6e83">Weiterführende Links:</b></p><ul id="278be9f3-273e-42c2-99d0-cc6f4bc6598ad6e85"><li id="7b8f33e5-e850-48c1-a804-9fb6e06e8667d6e86"><p id="d206a44d-c978-4902-9d62-0d34675e805dd6e87">[[link]]Client-side image generation with SVG and XSLT[[fn:http://surguy.net/articles/client-side-svg.xml*Automatische Image Erzeugung mit XSLT und SVG]]</p></li><li id="923ca5a1-1353-47cc-80da-9def9d2ec2f0d6e89"><p id="5689021e-dff9-4b37-9f33-35a0bb84a3c6d6e90">[[link]]Knotentyp Visualisierung im Apache Jack Rabbit Projekt[[fn:http://jackrabbit.apache.org/jcr/node-type-visualization.html*Visualisierung von Knoten im Apache Jack Rabbit Projekt]]</p></li></ul></section></body></topic>