<?xml version="1.0" encoding="UTF-8"?><topic id="e3e3be23-3387-4f2d-bc88-628272b743f3"><title id="f19c130f-edfe-408f-a9e2-31b53d92bb4c">Aktuelle und vergangene Anwendungen</title><body id="9cc3bf17-5788-4134-a1d2-361e3105f53e"><p id="0d86999f-6918-45f8-aa05-ee775429e1db">Wie auch bei anderen Programmiersprachen, hat es einige Zeit gedauert bis sich für XSLT der optimale Anwendungsbereich herauskristallisiert hat. Auch bei XSLT war ursprünglich das Internet und insbesondere Webseitenprogrammierung die treibende Kraft, weil meinte, mittels XSLT besonders gut Inhalt und Semantik trennen zu können. </p><p id="1cc2b53a-8cb6-4144-83d9-02b7d4475ce5d7e6">Relativ schnell hat sich aber <b id="348b9b17-b6b0-4772-ac1b-959cb7c330f0d7e17">CSS</b> in Verbindung mit <b id="5632ffbe-d9a1-4f31-af44-7855cbb68780d7e11">JavaScript</b> als Standardlösung für diese Zecke bewährt. <b id="b3d7f78c-211c-434b-afd2-b0d9799286e0d7e23">XSLT</b> ist inzwischen Platzhirsch im Bereich <b id="fbfc7d44-ea1c-4b0d-8af7-2af439ef8d7fd7e26">Technische Dokumentation</b> und hier auch wohl unschlagbar.</p><section id="9018ad0b-16d1-421c-8054-2b85dd01f507d7e20"><title id="ab76273e-04a8-430a-9f91-9a1b68d9c981d6e7">XML Webseiten</title><p id="d23736ab-93da-4908-83d8-38ffd747db2dd6e9">Einen XSLT Prozessor hat jeder Browser eingebaut. Es gab mal eine Zeit, in der es sehr populär war, Webseiten vom Server als XML auszuliefern[[xe1:Anwendungsgebiete;xe2:XML Webseiten]]. XML erlaubt die semantische Auszeichung des Inhalts, und die strikte Trennung des Inhalts von Layout und Design. Wesentlich besser als dies mit HTML und CSS jemals möglich wäre. U.a. wegen des exzessiven Einsatzes von JavaScript (auch inline), hat sich diese Idee nie vollständig durchgesetzt. Schliesslich wurde <b id="355067db-f1f7-4e4a-8b15-6012d1919dfbd7e53">XHTML</b> spezifiziert und jetzt gibt es <b id="07b5ea41-594e-43ca-bc6f-7850abbf11c0d7e56">HTML5</b>.</p><p id="c5dabda9-b019-4598-8fed-e6a685efd53cd6e17">Betrachten wir das folgende XML Beispiel:</p><pre id="25039128-07a6-4353-b043-a9ac727efb61d7e33" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;document&gt;
&lt;title&gt;Das ultimative Zwei-Kapitel Dokument&lt;/title&gt;
  &lt;chapter&gt;
    &lt;title&gt;Kapitel 1&lt;/title&gt;
    &lt;intro&gt;In Kapitel 1 wird kurz gesagt was Sache ist.&lt;/intro&gt;
    &lt;content&gt;Um es kurz zu machen, wie der Hase läuft steht in Kapitel 2.&lt;/content&gt;
  &lt;/chapter&gt;
  &lt;chapter&gt;
    &lt;title&gt;Kapitel 2&lt;/title&gt;
    &lt;intro&gt;Hier wird erklärt, wie der Hase läuft.&lt;/intro&gt;
    &lt;content&gt;Im Prinzip ist es ganz einfach.&lt;/content&gt;
  &lt;/chapter&gt;
&lt;/document&gt;</pre><p id="1450640b-064e-42c2-9881-547df58b7020d6e21">Ohne XSLT Stylesheet Zuweisung wird der Browser eine Datei mit diesem Inhalt als eingerücktes XML anzeigen - oder die Tags einfach ignorieren und den Textinhalt in einer Zeile darstellen. Fügt man eine [[link]]Processing Instruction[[fn:https://de.wikipedia.org/wiki/Verarbeitungsanweisung*Die Processing Instruction wertet der Parser als Kommando aus und nicht als Teil des XML Contents]][[xe1:XML Konstrukte;xe2:Processing Instruction]] am Anfang ein, wird ein XSLT Stylesheet vom Browser herangezogen und vor der Darstellung im Browser wird die so deklarierte XML Transformation ausgeführt:</p><pre id="c7f73d5c-488a-4fec-87c5-1b88c0b73686d7e37" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="formatiermich.xsl" ?&gt;
&lt;document&gt;
  &lt;title&gt;Das ultimative Zwei-Kapitel Dokument&lt;/title&gt;
  &lt;chapter&gt;
[...]</pre><p id="134c0541-26a7-4213-9b7d-ed83c8f08cbcd6e25">Das XML kann nun im Browser geöffnet werden und alles wird schön formatiert angezeigt...</p><pre id="d02ef5cb-9e1c-467c-a952-6faa57a6986bd7e41" xml:space="preserve">&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="document"&gt;
  &lt;body&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/body&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="document/title"&gt;     
    &lt;h1&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/h1&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter"&gt;
    &lt;div class="chapter"&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/div&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter/title"&gt;
    &lt;h2&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/h2&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter/intro"&gt;
    &lt;div class="intro"&gt;
      &lt;i&gt;&lt;xsl:apply-templates/&gt;&lt;/i&gt;      
    &lt;/div&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter/content"&gt;
    &lt;p&gt;&lt;xsl:apply-templates/&gt;&lt;/p&gt;    
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</pre><p id="25706f42-0507-45a5-a2cc-66f12f9e87bdd6e30">Die <b id="2e36f4de-3413-420a-89dd-91e17423c225d6e25">Processing Instruction</b> hat keinen Einfluss auf den XML Inhalt und wird in einer anderen Eingabeverarbeitung nicht herangezogen.</p></section><section id="dc7b836f-6c1b-40e3-a986-f1e5934b5f14d7e48"><title id="d1a0e576-5434-4f78-a143-0aba397514ddd6e33">Serverseitige Konvertierung</title><p id="a476b87f-7491-444d-8668-72f5e5719ebed6e35">Auch eine serverseitige Konvertierung[[xe1:Anwendungsgebiete;xe2:Serverseitige Konvertierung]] ist gebräuchlich. Ein Beispiel aus vergangenen Tagen - [[link]]WAP-Seiten[[fn:https://de.wikipedia.org/wiki/Wireless_Application_Protocol*Mittels dieser Technologie wurden Webinhalte auf Handys gespielt. Das war vor den Smartphones]] für unterschiedliche Handy-Modelle.</p><p id="b764a9c0-9b8f-411a-ab3a-6b9241047afed6e37">Früher hatten die Handys sehr unterschiedliche Displaygrößen. Handybrowser konnten nicht ausreichend JavaScript und die Skalierung der WAP-Seite für das jeweilige Handy passierte nicht im Handy, sondern vor der Auslieferung auf der Serverseite. Dazu wurde eine XML Quelle mittels verschiedener XSLT Stylesheets in unterschiedliche WML WAP Repräsentationen transformiert.</p><p id="47042bcb-c720-41ec-819b-86527013fa52d6e39">So würde das Zwei-Kapitel Beispiel von oben im WML Format aussehen (recht einfach gehalten):</p><pre id="57f41453-012e-4063-819c-b9ce77a97e95d7e57" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.1//EN" "http://www.wap.org/DTD/wml_1.1.xml"&gt;
&lt;wml&gt;
  &lt;head&gt;
    &lt;meta name="title" content="Das ultimative Zwei-Kapitel Dokument"/&gt;   
  &lt;/head&gt; 
  &lt;card id="chapter1" title="Kapitel 1"&gt;
    &lt;p&gt;&lt;i&gt;In Kapitel 1 wird kurz gesagt was Sache ist.&lt;/i&gt;&lt;/p&gt;        
    &lt;p&gt;Um es kurz zu machen, wie der Hase läuft steht in Kapitel 2.&lt;/p&gt;  
  &lt;/card&gt;
  &lt;card id="chapter2" title="Kapitel 2"&gt;
    &lt;p&gt;&lt;i&gt;Hier wird erklärt, wie der Hase läuft.&lt;/i&gt;&lt;/p&gt;
    &lt;p&gt;Im Prinzip ist es ganz einfach.&lt;/p&gt;
  &lt;/card&gt;
&lt;/wml&gt;</pre><p id="5d603262-8282-4d8f-bb2f-145b7ff53e92d6e43">Eine XSLT Transformation, die die XML Daten von oben in diese <b id="65853dfc-dcc7-40d4-8c4c-6fc6bcdacbd7d7e128">WML</b> Darstellung überführt, könnte z.B. so implementiert werden:</p><pre id="84685dd7-ea44-4b5b-ae45-e935d1a10c13d7e64" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;

  &lt;xsl:output
    doctype-public="-//WAPFORUM//DTD WML 1.2//EN" 
    doctype-system="http://www.wapforum.org/DTD/wml12.dtd"
    indent="yes"/&gt;
    
  &lt;xsl:template match="document"&gt;
    &lt;wml&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/wml&gt;
  &lt;/xsl:template&gt;
    
  &lt;xsl:template match="document/title"&gt;
    &lt;head&gt;
      &lt;meta name="title"&gt;
        &lt;xsl:attribute name="content"&gt;
          &lt;xsl:value-of select="."/&gt;               
        &lt;/xsl:attribute&gt;
      &lt;/meta&gt;      
    &lt;/head&gt;
  &lt;/xsl:template&gt;
    
  &lt;xsl:template match="chapter"&gt;
    &lt;card id="{concat('chapter',count(preceding-sibling::chapter)+1)}"&gt;
      &lt;xsl:attribute name="title"&gt;
        &lt;xsl:value-of select="title"/&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:apply-templates select="*[not(self::title)]"/&gt;
    &lt;/card&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="node()|@*"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates select="node()|@*"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="processing-instruction()"/&gt;
  
  &lt;xsl:template match="intro"&gt;
    &lt;p&gt;&lt;i&gt;&lt;xsl:apply-templates/&gt;&lt;/i&gt;&lt;/p&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="content"&gt;
    &lt;p&gt;&lt;xsl:apply-templates/&gt;&lt;/p&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></section><section id="50f09415-5dfa-4ce8-bac4-af105afd9853d7e66"><title id="fa0123f8-d2ab-48fe-a8a4-69c5ea6e5b29d6e48">Multiple Ausgabeformate</title><p id="479bd9ce-f36a-4b96-a291-61f95e4e767dd6e50">Aus einer XML Quelle können auch leicht weitere Format erzeugt werden, bspw. . [[link]]EPUB[[fn:https://de.wikipedia.org/wiki/EPUB*EPUB ist ein Dokumentformat für Ebook-Reader.]] ist das Standardformat für eBooks. Neben Tags zur Formatierung für den Content, gibt es bspw. auch Anweisungen zum Erzeugen des Inhaltsverzeichnisses oder anderer Navigationsstrukturen.</p><p id="e8969256-cea5-4fd0-b7bf-5f9eeb42b148d6e52">Weitere gängige Formate sind neben dem oben veralteten WML Format, elektronische Ausgabe-Formate wie: [[link]]CHM[[fn:https://de.wikipedia.org/wiki/CHM_(Dateiformat*Die alte Windows-Hilfe. Läuft immer noch im Bereich Maschinenbau auf gekoppelten Rechnern mit alter Windows Software)]], [[link]]EclipseHelp[[fn:https://www.ibm.com/developerworks/library/os-echelp/index.html*Das Hilfe-Format der Eclipse Rich Client Plattform. Eclipse wird hauptsächlich von Programmierern als Editor benutzt]], [[link]]JavaHelp[[fn:https://en.wikipedia.org/wiki/JavaHelp*Damit wird bspw. das Java API formatiert als Webseite ausgegeben]], ..., Print-Ausgabe Formate, wie PDF oder [[link]]Adobe Framemaker[[fn:https://de.wikipedia.org/wiki/FrameMaker*Mit Framemaker kann man manuell gesetzte Publikationen erstellen. Über Templates lässt sich das Layout aber auch automatisieren]],oder XML Standard Austauschformate, wie <b id="c1514cb7-a74d-4d04-af74-877427e726acd7e149">DITA</b>, <b id="3e8b4a3c-d9c8-4757-adbe-9e780c504672d7e152">S1000D</b>, [[link]]PI-MOD[[fn:https://www.i4icm.de/forschungstransfer/pi-mod/*PI-Mod ist ein Informationsmodell, das am KIT (Uni Karlsruhe) entwickelt wird/wurde]], [[link]]JATS[[fn:https://de.wikipedia.org/wiki/Journal_Article_Tag_Suite*JATS ist ein sehr verbreitetes Informationsmodell im Bereich wissenschaftlicher Artikel und Fachliteratur]][[xe1:Standards;xe2:JATS]] oder [[link]]TEI[[fn:https://de.wikipedia.org/wiki/Text_Encoding_Initiative*Wikipediaseite zum TEI Standard]][[xe1:Standards;xe2:TEI]].</p></section><section id="b6e36d4b-0788-40f3-b2af-84dadc90094ad7e79"><title id="4135a624-a45f-433c-8d0b-18416fe3765fd6e55">Menschenlesbare Ausgabe</title><p id="dc869a54-1cb6-4282-b816-825027432083d6e57">Kryptische XML Log-, Daten- oder Konfigurationsfiles[[xe1:Anwendungsgebiete;xe2:Log- und Konfigurationsdaten]] können leicht mit XSLT menschenlesbar formatiert werden. Ein Arbeitskollege im neuen Job kam kürzlich auf mich zu, ob ich um eine Möglichkeit wüsste, wie man sein kryptisches Datenfile für einen Übersetzungsdienst formatieren könnte:</p><pre id="e6d2305f-bf52-4b88-bfd1-c008cdd1e4b3d7e84" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;?&lt;?xml-stylesheet type="text/xsl" href="de.xsl"?&gt;
&lt;jcr:root xmlns:sling="http://sling.apache.org/jcr/sling/1.0"
  xmlns:jcr="http://www.jcp.org/jcr/1.0" 
  xmlns:mix="http://www.jcp.org/jcr/mix/1.0"
  xmlns:nt="http://www.jcp.org/jcr/nt/1.0"
  jcr:language="de"
  jcr:mixinTypes="[mix:language]"
  jcr:primaryType="sling:Folder"&gt;
&lt;b_manual 
  jcr:primaryType="sling:MessageEntry"
  sling:message="Bedienungsanleitung"/&gt;
  &lt;b_warning
    jcr:primaryType="sling:MessageEntry"
    sling:message="Warnung"/&gt;
  &lt;b_danger
    jcr:primaryType="sling:MessageEntry"
    sling:message="Vorsicht"/&gt;
  &lt;b_note
    jcr:primaryType="sling:MessageEntry"
    sling:message="Notiz"/&gt;
  &lt;b_notice
    jcr:primaryType="sling:MessageEntry"
    sling:message="Hinweis"/&gt;
  [...]</pre><p id="aaaf6a3a-55b3-4599-8bbd-59db3819473fd6e61">Mit einem eingehängten XSLT Stylesheet[[code:de.xsl]] wird so ein Datenfile als Tabelle formatiert:</p><pre id="3c1f94e4-6f3f-4a97-8f65-ae8a8db31a27d7e88" xml:space="preserve">&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:jcr="http://www.jcp.org/jcr/1.0"
  xmlns:sling="http://sling.apache.org/jcr/sling/1.0"&gt;
  
  &lt;xsl:template match="jcr:root"&gt;
    &lt;html&gt;
      &lt;table border="1" cellpadding="5" cellspacing="5"&gt;
        &lt;xsl:apply-templates/&gt;
      &lt;/table&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="*"&gt;
    &lt;tr&gt;
      &lt;td&gt;
        &lt;xsl:value-of select="concat(count(preceding::*[@sling:message]) + 1,'.')"/&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;xsl:value-of select="name()"/&gt;
      &lt;/td&gt;
      &lt;td contenteditable="true"&gt;
        &lt;xsl:value-of select="@sling:message"/&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre><p id="8306957f-386e-4c63-9c69-ee876511fecbd6e65">Hängt man an dieses Beispiel noch ein bisschen JavaScript Logik und macht die Felder für die Übersetzungen mittels des <b id="760a5700-8216-44ff-90d9-c78b91af87b5d7e180">HTML5 </b>[[code:contenteditable]] Attributs[[xe1:Attribute;xe2:contenteditable]] editierbar, dann bräuchte man nur noch eine Rücktransformation HTML nach XML und hätte schon einen kleinen XML Editor gebaut. So funktioniert auch der Editor in [[$productname]].</p></section><section id="eb91e07c-3cdf-4fa3-9d17-4951527efac0d7e95"><title id="5ab04d47-2964-42e4-8002-ba2b7828111bd6e68">Diagramme darstellen</title><p id="6a649e53-dde4-4e49-8e01-1fb5ad83cf2ed6e70">Nachdem eine <b id="0708b47f-69f1-428c-840f-086bbda112b4d7e197">SVG</b>[[xe1:Standards;xe2:SVG]] Grafik[[xe1:Anwendungsgebiete;xe2:Visualisierung]] im <b id="e9750004-6947-4e29-a178-9e63c3bf9231d7e200">XML</b> Format vorliegt kann diese auch direkt aus XML Daten mittels XSLT erzeugt werden. Über das HTML5[[code:&lt;svg&gt;]] Element kann so eine erzeugte Grafik inline in das ebenfalls durch das XSLT generierte HTML Dokument eingebunden werden.</p><p id="182ba4df-adcd-4102-af88-18c7570f7b71d6e72">Betrachten wir unser Beispiel von oben, erweitert um drei neue [[code:&lt;block&gt;]] Elemente:</p><pre id="24edebe4-c458-4369-b3db-40c0bb1190b6d7e108" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="chart.xsl" ?&gt;
&lt;document&gt;
  &lt;title&gt;Das ultimative Zwei-Kapitel Dokument&lt;/title&gt;
  &lt;chapter&gt;
    &lt;title&gt;Kapitel 1&lt;/title&gt;
    &lt;intro&gt;In Kapitel 1 wird kurz gesagt was Sache ist.&lt;/intro&gt;
    &lt;content&gt;Um es kurz zu machen, wie der Hase läuft steht in Kapitel 2.&lt;/content&gt;
  &lt;/chapter&gt;
  &lt;chapter&gt;
    &lt;title&gt;Kapitel 2&lt;/title&gt;
    &lt;intro&gt;Hier wird erklärt, wie der Hase läuft.&lt;/intro&gt;
    &lt;content&gt;Im Prinzip ist es ganz einfach. Betrachten wir doch drei gelbe Blöcke:
    &lt;/content&gt;
    &lt;block/&gt;
    &lt;block/&gt;
    &lt;block/&gt;
  &lt;/chapter&gt;
&lt;/document&gt;</pre><p id="f5656cd5-03c5-43a0-be15-a7187bbdab37d6e76">Wenn wir das XSLT Stylesheet noch um eine Regel für das neue [[code:&lt;block&gt;]] Element ergänzen, so wie hier:</p><pre id="15dcb6e0-75b3-48f7-840d-f36fb9314184d7e112" xml:space="preserve">&lt;xsl:template match="block"&gt;
   &lt;svg style="background-color:yellow" width="30" height="30" 
     xmlns:xlink="http://www.w3.org/1999/xlink" 
     xmlns="http://www.w3.org/2000/svg"/&gt;
  &lt;br/&gt;
  &lt;br/&gt;
&lt;/xsl:template&gt;</pre><p id="1015bdf3-e31c-4085-b1cb-00c7cc2c5bd4d6e80">Dann erhalten wir drei schön formatierte gelbe SVG Blöcke ...</p><p id="f1e12ddb-1bcb-49c0-b938-0a77393018d1d6e82"><b id="276fca58-f8f9-4599-a1e6-318f31e908c5d6e83">Weiterführende Links:</b></p><ul id="278be9f3-273e-42c2-99d0-cc6f4bc6598ad6e85"><li id="7b8f33e5-e850-48c1-a804-9fb6e06e8667d6e86"><p id="d206a44d-c978-4902-9d62-0d34675e805dd6e87">[[link]]Client-side image generation with SVG and XSLT[[fn:http://surguy.net/articles/client-side-svg.xml*Automatische Image Erzeugung mit XSLT und SVG]]</p></li><li id="923ca5a1-1353-47cc-80da-9def9d2ec2f0d6e89"><p id="5689021e-dff9-4b37-9f33-35a0bb84a3c6d6e90">[[link]]Knotentyp Visualisierung im Apache Jack Rabbit Projekt[[fn:http://jackrabbit.apache.org/jcr/node-type-visualization.html*Visualisierung von Knoten im Apache Jack Rabbit Projekt]]</p></li></ul></section></body></topic>