<?xml version="1.0" encoding="UTF-8"?><topic id="e3e3be23-3387-4f2d-bc88-628272b743f3"><title id="f19c130f-edfe-408f-a9e2-31b53d92bb4c">Anwendungsbeispiele</title><body id="9cc3bf17-5788-4134-a1d2-361e3105f53e"><p id="0d86999f-6918-45f8-aa05-ee775429e1db">Einige Beispiele - aktuell und aus vergangenen Tagen.</p><section id="4de6db85-d568-476c-be41-49c6a978dfced6e6"><title id="ab76273e-04a8-430a-9f91-9a1b68d9c981d6e7">XML Webseiten</title><p id="7b144600-7084-4b40-91a6-93115e9ebcffd6e9">Einen XSLT Prozessor hat jeder Browser eingebaut.&#8232; Es gab mal eine Zeit, in der es sehr populär war, Webseiten vom Server als XML auszuliefern. XML erlaubt die semantische Auszeichung des Inhalts, und die strikte Trennung des Inhalts von Layout und Design. Wesentlich besser als dies mit HTML und CSS jemals möglich wäre.</p><p id="9bf93bed-aab5-4e2e-83af-473f0a3ac1bcd6e11">Ich denke, u.a. wegen dem exzessiven Einsatz von Javascript (auch inline), hat sich diese Idee nie vollständig durchgesetzt. Schliesslich wurde  XHTML spezifiziert und jetzt gibt es HTML5.</p><p id="eacb4856-8541-40b8-8fb5-ff14a7799c09d6e13">Mein Blog[[fn:http://www.tekturcms.de]] ist immer noch mittels einer Browser-internen XSLT Transformation umgesetzt. Das kann man leicht überprüfen, indem man sich den Quelltext der Website anzeigen lässt.</p><p id="71c1121b-32e0-4571-a7eb-7f6b57a1d9cad6e15">Dabei wird das XML vom Browser on-the-fly nach HTML konvertiert und als Webseite formatiert dargestellt. &#8232;Alles was man dazu tun muss, ist im XML ganz zu Anfang eine sog. Processing Instruction einzufügen, welche ein XSLT Stylesheet referenziert. Der Broswer führt dann automatisch eine XSLT Transformation aus, bevor die HTML Repräsentation dargestellt wird.</p><p id="c5dabda9-b019-4598-8fed-e6a685efd53cd6e17">Betrachten wir das folgende einfache XML Beispiel:</p><pre id="050861a2-aab5-4fdf-a9f8-e27e2bd524a5d6e19" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;document&gt;
&lt;title&gt;Das ultimative Zwei-Kapitel Dokument&lt;/title&gt;
  &lt;chapter&gt;
    &lt;title&gt;Kapitel 1&lt;/title&gt;
    &lt;intro&gt;In Kapitel 1 wird kurz gesagt was Sache ist.&lt;/intro&gt;
    &lt;content&gt;Um es kurz zu machen, wie der Hase läuft steht in Kapitel 2.&lt;/content&gt;
  &lt;/chapter&gt;
  &lt;chapter&gt;
    &lt;title&gt;Kapitel 2&lt;/title&gt;
    &lt;intro&gt;Hier wird erklärt, wie der Hase läuft.&lt;/intro&gt;
    &lt;content&gt;Im Prinzip ist es ganz einfach.&lt;/content&gt;
  &lt;/chapter&gt;
&lt;/document&gt;</pre><p id="1450640b-064e-42c2-9881-547df58b7020d6e21">Ohne XSLT Stylesheet Zuweisung wird der Browser eine Datei mit diesem Inhalt als eingerücktes XML anzeigen - oder die Tags einfach ignorieren und den Textinhalt in einer Zeile darstellen.Fügt man eine Processing Instruction[[fn:https://de.wikipedia.org/wiki/Verarbeitungsanweisung]] am Anfang ein, wird ein XSLT Stylesheet vom Browser herangezogen und vor der Darstellung im Browser wird die so deklarierte XML Transformation ausgeführt:</p><pre id="edda03c3-5922-42b0-8649-b2a0d3d0f3bed6e23" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="formatiermich.xsl" ?&gt;
&lt;document&gt;
  &lt;title&gt;Das ultimative Zwei-Kapitel Dokument&lt;/title&gt;
  &lt;chapter&gt;
[...]</pre><p id="134c0541-26a7-4213-9b7d-ed83c8f08cbcd6e25">Jetzt kann man das XML einfach im Browser öffnen und alles wird schön formatiert - je nachdem welche Regeln in formatiermich.xsl gesetzt sind - angezeigt:</p><pre id="8c881d15-2b3a-49d4-a4bc-714dfdad56add6e27" xml:space="preserve">&#8232;&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:template match="/"&gt;
    &lt;html&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="document"&gt;
  &lt;body&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/body&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="document/title"&gt;     
    &lt;h1&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/h1&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter"&gt;
    &lt;div class="chapter"&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/div&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter/title"&gt;
    &lt;h2&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/h2&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter/intro"&gt;
    &lt;div class="intro"&gt;
      &lt;i&gt;?&lt;xsl:apply-templates/&gt;?&lt;/i&gt;      
    &lt;/div&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="chapter/content"&gt;?
    &lt;p&gt;?&lt;xsl:apply-templates/&gt;?&lt;/p&gt;?    
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</pre><p id="25706f42-0507-45a5-a2cc-66f12f9e87bdd6e30">Die Processing Instruction hat keinen Einfluss auf den XML Inhalt und wird in einer anderen Eingabeverarbeitung nicht herangezogen.</p></section><section id="b2dd531e-d051-4c51-8a7d-667fce172118d6e32"><title id="d1a0e576-5434-4f78-a143-0aba397514ddd6e33">Serverseitige Konvertierung</title><p id="a476b87f-7491-444d-8668-72f5e5719ebed6e35">Auch eine serverseitige Konvertierung ist gebräuchlich. Ein Beispiel aus vergangenen Tagen: &#8232;WAP-Seiten[[fn:https://de.wikipedia.org/wiki/Wireless_Application_Protocol]] für unterschiedliche Handy-Modelle.</p><p id="b764a9c0-9b8f-411a-ab3a-6b9241047afed6e37">Damals hatten die Handys sehr unterschiedliche Displaygrößen. Handybrowser konnten noch nicht ausreichend Javascript und die Skalierung der WAP-Seite für das jeweilige Handy passierte nicht im Handy, sondern vor der Auslieferung auf der Serverseite. Dazu wurde eine XML Quelle mittels verschiedener XSLT Stylesheets in unterschiedliche WML WAP Repräsentationen transformiert.</p><p id="47042bcb-c720-41ec-819b-86527013fa52d6e39">So würde das Zwei-Kapitel Beispiel von oben im WML Format aussehen (recht einfach gehalten):</p><pre id="8311410e-8766-4199-9798-c60a9568c195d6e41" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.1//EN" "http://www.wap.org/DTD/wml_1.1.xml"&gt;
&lt;wml&gt;
  &lt;head&gt;
    &lt;meta name="title" content="Das ultimative Zwei-Kapitel Dokument"/&gt;   
  &lt;/head&gt; 
  &lt;card id="chapter1" title="Kapitel 1"&gt;
    &lt;p&gt;&lt;i&gt;In Kapitel 1 wird kurz gesagt was Sache ist.&lt;/i&gt;&lt;/p&gt;        
    &lt;p&gt;Um es kurz zu machen, wie der Hase läuft steht in Kapitel 2.&lt;/p&gt;  
  &lt;/card&gt;
  &lt;card id="chapter2" title="Kapitel 2"&gt;
    &lt;p&gt;&lt;i&gt;Hier wird erklärt, wie der Hase läuft.&lt;/i&gt;&lt;/p&gt;
    &lt;p&gt;Im Prinzip ist es ganz einfach.&lt;/p&gt;
  &lt;/card&gt;
&lt;/wml&gt;</pre><p id="5d603262-8282-4d8f-bb2f-145b7ff53e92d6e43">Eine XSLT Transformation, die die XML Daten von oben in diese WML Darstellung überführt, könnte z.B. so implementiert werden:</p><pre id="b37c1801-dbe8-4c22-99e7-93aea698ead1d6e45" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;

  &lt;xsl:output
    doctype-public="-//WAPFORUM//DTD WML 1.2//EN" 
    doctype-system="http://www.wapforum.org/DTD/wml12.dtd"
    indent="yes"/&gt;
    
  &lt;xsl:template match="document"&gt;
    &lt;wml&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/wml&gt;
  &lt;/xsl:template&gt;
    
  &lt;xsl:template match="document/title"&gt;
    &lt;head&gt;
      &lt;meta name="title"&gt;
        &lt;xsl:attribute name="content"&gt;
          &lt;xsl:value-of select="."/&gt;               
        &lt;/xsl:attribute&gt;
      &lt;/meta&gt;      
    &lt;/head&gt;
  &lt;/xsl:template&gt;
    
  &lt;xsl:template match="chapter"&gt;
    &lt;card id="{concat('chapter',count(preceding-sibling::chapter)+1)}"&gt;
      &lt;xsl:attribute name="title"&gt;
        &lt;xsl:value-of select="title"/&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:apply-templates select="*[not(self::title)]"/&gt;
    &lt;/card&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="node()|@*"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates select="node()|@*"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="processing-instruction()"/&gt;
  
  &lt;xsl:template match="intro"&gt;
    &lt;p&gt;&lt;i&gt;&lt;xsl:apply-templates/&gt;&lt;/i&gt;&lt;/p&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="content"&gt;
    &lt;p&gt;&lt;xsl:apply-templates/&gt;&lt;/p&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre></section><section id="7e9a0978-ff50-41c1-a851-9ea38c2b6e85d6e47"><title id="fa0123f8-d2ab-48fe-a8a4-69c5ea6e5b29d6e48">Single Source Publishing</title><p id="479bd9ce-f36a-4b96-a291-61f95e4e767dd6e50">Aus einer XML Quelle können auch leicht weitere Format erzeugt werden, bspw. ePub. &#8232;EPUB[[fn:https://de.wikipedia.org/wiki/EPUB]] ist das Standardformat für eBooks und neben Tags zur Formatierung für den Content, gibt es bspw. auch Anweisungen zum Erzeugen des Inhaltsverzeichnisses oder anderer Navigationsstrukturen.</p><p id="e8969256-cea5-4fd0-b7bf-5f9eeb42b148d6e52">Weitere gängige Formate sind neben dem oben gezeigten veralteten WML Format, elektronische Ausgabe-Formate wie: CHM[[fn:https://de.wikipedia.org/wiki/CHM_(Dateiformat)]], EclipseHelp[[fn:https://www.ibm.com/developerworks/library/os-echelp/index.html]], JavaHelp[[fn:https://en.wikipedia.org/wiki/JavaHelp]], ..., Print-Ausgabe Formate, wie PDF oder Adobe Framemaker[[fn:https://de.wikipedia.org/wiki/FrameMaker]],  oder XML Standard Austauschformate, wie DITA, S1000D[[fn:https://de.wikipedia.org/wiki/S1000D]], PI-MOD[[fn:https://www.i4icm.de/forschungstransfer/pi-mod/]], JATS[[fn:https://de.wikipedia.org/wiki/Journal_Article_Tag_Suite]] oder TEI[[fn:https://de.wikipedia.org/wiki/Text_Encoding_Initiative]].</p></section><section id="74a3cf66-b679-4c05-af24-7983bfa55d5cd6e54"><title id="4135a624-a45f-433c-8d0b-18416fe3765fd6e55">Menschenlesbar machen</title><p id="dc869a54-1cb6-4282-b816-825027432083d6e57">Kryptische XML Log-, Daten- oder Konfigurationsfiles können leicht mit XSLT menschenlesbar formatiert werden&#8232;Ein Arbeitskollege im neuen Job kam kürzlich auf mich zu, ob ich um eine Möglichkeit wüsste, wie man sein kryptisches Datenfile für einen Übersetzungsdienst menschenlesbar formatieren könnte - XSLT to the Rescue:</p><pre id="89acd5cf-8def-4d31-aea5-2a08dfb46f1fd6e59" xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;?&lt;?xml-stylesheet type="text/xsl" href="de.xsl"?&gt;
&lt;jcr:root xmlns:sling="http://sling.apache.org/jcr/sling/1.0"
  xmlns:jcr="http://www.jcp.org/jcr/1.0" 
  xmlns:mix="http://www.jcp.org/jcr/mix/1.0"
  xmlns:nt="http://www.jcp.org/jcr/nt/1.0"
  jcr:language="de"
  jcr:mixinTypes="[mix:language]"
  jcr:primaryType="sling:Folder"&gt;
&lt;b_manual 
  jcr:primaryType="sling:MessageEntry"
  sling:message="Bedienungsanleitung"/&gt;
  &lt;b_warning
    jcr:primaryType="sling:MessageEntry"
    sling:message="Warnung"/&gt;
  &lt;b_danger
    jcr:primaryType="sling:MessageEntry"
    sling:message="Vorsicht"/&gt;
  &lt;b_note
    jcr:primaryType="sling:MessageEntry"
    sling:message="Notiz"/&gt;
  &lt;b_notice
    jcr:primaryType="sling:MessageEntry"
    sling:message="Hinweis"/&gt;
  [...]</pre></section></body></topic>