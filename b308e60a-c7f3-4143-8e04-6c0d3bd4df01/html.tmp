<div data-attribute-id="e7a9c8c6-7155-402a-9c95-89d45fc022de" class="topic show_menu tags" data-element="topic" data-deletable="false" data-tektur-editor-id="d3a29ee7-979d-4635-91a2-7e0f639a13f9"><div class="gui-optional-elements-button" contenteditable="false"><div class="menu-icon" style="display:none">+</div></div><div data-attribute-id="8a54eb22-afbb-4741-b3e5-8088e75c9ebd" class="title pmarker tags" data-element="title" data-tektur-editor-id="7f177b2e-c526-4d10-ab02-a2c003db80d2" contenteditable="true">XSLT Iterator</div><div class="abstract optional show_menu tags" data-element="abstract" data-excluding="shortdesc" style="display:none" data-tektur-editor-id="55337ef2-e4fe-4bfe-8f56-f6f315230181"><div class="gui-optional-elements-button" contenteditable="false"><div class="menu-icon" style="display:none">+</div></div><div class="placeholder text pmarker tags" data-element="p" data-tektur-editor-id="cd72d2b5-8d21-4cbe-a891-867635844c92" contenteditable="true"></div></div><div data-attribute-id="a4eb5204-67d2-446b-97f6-89871c6a031d" class="body show_menu tags" data-element="body" data-deletable="false" data-tektur-editor-id="1d443e16-6023-438d-a3fb-4359847e23b4"><div class="gui-optional-elements-button" contenteditable="false"><div class="menu-icon" style="display:none">+</div></div><div class="section tektur-wrapper tags" data-element="section" data-tektur-editor-id="1325e118-479d-444b-9cff-a45f6a611117"><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="9b154448-31c9-495f-bc85-ecb297deece8" class="p pmarker tags" data-element="p" data-tektur-editor-id="8086ac3c-49a5-4b3a-a85f-88cd6743ded7" contenteditable="true">XSLT Streaming<span class="bracket-tags-marker" id="e7ad5aec-3355-41b4-b6d9-7813b1191291">[[<span class="bracket-tags">xe1:Verarbeitungsmethoden; xe2:XSLT Streaming</span>]]</span> ist ziemlich tricky. Betrachten wir ein einfaches Problem. Es soll ein kommaseparierter Report aus folgender XML Quelle generiert werden.</div><div class="pre"><div data-attribute-id="8f4a340a-8e8e-4914-884f-1362c5d51213d6e6" data-attribute-xml_space="preserve" class="pre-content pmarker tags" data-element="pre" data-tektur-editor-id="2c1e0e30-8f2f-4694-af8f-daf9788869fb" contenteditable="true">&#x3C;status-report&#x3E;
  &#x3C;status-change&#x3E;
    &#x3C;billing_id&#x3E;360788&#x3C;/dentaltrac_encounter_id&#x3E;
    &#x3C;claim_ids&#x3E;967382,673647&#x3C;/claim_ids&#x3E;
    &#x3C;status&#x3E;open&#x3C;/status&#x3E;
    &#x3C;time_stamp&#x3E;2019-02-22T13:53:34.605Z&#x3C;/status_time&#x3E;
  &#x3C;/status-change&#x3E;
  &#x3C;status-change&#x3E;
    &#x3C;billing_id&#x3E;360788&#x3C;/dentaltrac_encounter_id&#x3E;
    &#x3C;claim_ids&#x3E;967382,673647&#x3C;/claim_ids&#x3E;
    &#x3C;status&#x3E;open&#x3C;/status&#x3E;
    &#x3C;time_stamp&#x3E;2019-02-22T13:53:34.605Z&#x3C;/status_time&#x3E;
  &#x3C;/status-change&#x3E;
  [...]</div></div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="22848135-aec4-4770-9e80-b03304ac973cd6e10" class="p pmarker tags" data-element="p" data-tektur-editor-id="254ee638-9ac4-4026-aeff-0d7b65bfd39f" contenteditable="true">Mit einer <span class="bracket-tags-marker" id="793b359f-6917-4e70-bc7f-24eb7216b79e">[[<span class="bracket-tags">code:for-each</span>]]</span> Loop und einem Named-Template würde das so gehen:</div><div class="pre"><div data-attribute-id="e12d5b66-a0f9-484c-9d3e-86db848cfb15d6e10" data-attribute-xml_space="preserve" class="pre-content pmarker tags" data-element="pre" data-tektur-editor-id="2efbeb0c-cab3-464e-9c71-3252ef340fb7" contenteditable="true">
&#x3C;xsl:template name="main"&#x3E;
  &#x3C;xsl:for-each select="$input-file/status-report/status-change"&#x3E;
    &#x3C;xsl:value-of select="concat(billing_id,',')"/&#x3E;
    &#x3C;xsl:value-of select="concat(claim_ids,',')"/&#x3E;
    &#x3C;xsl:value-of select="concat(status,',')"/&#x3E;
    &#x3C;xsl:value-of select="concat(format-dateTime(xs:dateTime(time_stamp),
                                        '[Y]-[M]-[D] [H]:[m]'),'&#x26;#10;')"/&#x3E;
  &#x3C;/xsl:for-each&#x3E;
&#x3C;/xsl:template&#x3E;</div></div><div class="placeholder text pmarker tags" data-element="p" data-tektur-editor-id="4482a88e-26ff-4137-962a-b114c5436b57" contenteditable="true"></div><div data-element="note" class="show_menu tags" data-tektur-editor-id="4db9b614-82b3-4035-8a76-213e59e3627b"><div class="gui-optional-elements-button" contenteditable="false"><div class="menu-icon" style="display:none">+</div></div><div class="note"><div class="signal-word">NOTE</div><div class="hcontent"><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="73c07d96-20b6-4482-96ce-258d1673e1a7d6e15" class="p pmarker tags" data-element="p" data-tektur-editor-id="4f503086-f457-4d22-8d86-95f56c9dffcf" contenteditable="true">Named-Templates, die direkt über den Saxon Aufruf <span class="bracket-tags-marker" id="c8d4f312-774c-48bf-abb1-f18782c44195">[[<span class="bracket-tags">code:saxon -it:main</span>]]</span> aufgerufen werden, sind dann
brauchbar, wenn keine eindeutige Eingabequelle vorhanden ist, bspw. weil aus mehreren
Quellen eingelesen werden soll, wenn die Eingabe von einem Webservice kommt oder 
vom XSLT Skript selbst erzeugt wird.</div></div></div></div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="d769fa8b-5761-43cf-88ab-842d569d1e7dd6e17" class="p pmarker tags" data-element="p" data-tektur-editor-id="4c3866c2-92dd-40de-93a5-b538f5601d70" contenteditable="true">Im vorliegenden Fall wird von einer Datei eingelesen - wir brauchen also kein Named-Template. Statt der <span class="bracket-tags-marker" id="5bf40f87-ecbf-4ac5-9dcb-7da914b98ab0">[[<span class="bracket-tags">code_for-each</span>]]</span> Schleife können wir uns auch auf den rekursiven Abstieg des XSLT Prozessors
verlassen, was den Code weiter vereinfacht:</div><div class="pre"><div data-attribute-id="8354e2dc-41b1-402a-8923-3109faf71a36d6e17" data-attribute-xml_space="preserve" class="pre-content pmarker tags" data-element="pre" data-tektur-editor-id="f9e0ffe8-98b8-4aee-ab66-a70904bfc4fe" contenteditable="true">
&#x3C;xsl:template match="/status-report/status-change"&#x3E;
  &#x3C;xsl:value-of select="concat(billing_id,',')"/&#x3E;
  &#x3C;xsl:value-of select="concat(claim_ids,',')"/&#x3E;
  &#x3C;xsl:value-of select="concat(status,',')"/&#x3E;
  &#x3C;xsl:value-of select="concat(format-dateTime(xs:dateTime(time_stamp),
                                      '[Y]-[M]-[D] [H]:[m]'),'&#x26;#10;')"/&#x3E;
&#x3C;/xsl:template&#x3E;</div></div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="1babc673-5450-4c9f-94d7-02027e879a51d6e21" class="p pmarker tags" data-element="p" data-tektur-editor-id="1e986519-06a5-4f59-890f-3fb45b291ef1" contenteditable="true">Wollen wir große Datenmengen schnell verarbeiten mit ein paar Hundert MB, so ist es sinnvoll
auf die neue XSLT3.0 Streaming Option umzuschalten, weil dadurch kein Eingabebaunm in-Memory
aufgebaut wird. Wie schon im Kapitel <span class="link tags" data-element="link" data-tektur-editor-id="3488cd63-8d28-404a-8c32-6694daa8c6bb" href="51bec5b9-1207-45cc-9bf2-b6ce3e300547" data-type="topic">XSLT Akkumulator</span> angesprochen, gibt es dazu mehrere Möglichkeiten.</div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="24530e61-5662-4972-844c-140ea8d8dc0dd6e23" class="p pmarker tags" data-element="p" data-tektur-editor-id="c9af2a8e-e62e-4f0e-a9d1-92c1c4fbe2ac" contenteditable="true">Wir betrachten hier das <span class="bracket-tags-marker" id="7386db7b-6bf4-4058-bd7a-7b615003506f">[[<span class="bracket-tags">code:xsl:iterator</span>]]</span><span class="bracket-tags-marker" id="e60fc138-0822-45a4-a8b9-e9e060b6f29c">[[<span class="bracket-tags">link</span>]]</span>(Doku)<span class="bracket-tags-marker" id="092e0172-1a44-4541-a28e-0f4b6ddf1477">[[<span class="bracket-tags">fn:https://www.saxonica.com/html/documentation/xsl-elements/iterate.html*Der Iterator ist ein Konzept um XSLT Streaming zu realisieren</span>]]</span>
 Konstrukt und stossen dabei auf einige Fallstricke. Zunächst einmal unsere Settings:</div><ul data-attribute-id="4a98621c-143a-4c7b-9943-ff38c9887bc5d6e25" class="ul tags" data-element="ul" data-tektur-editor-id="874cf0e9-c582-4e8b-a01c-e7b86de45e8e"><li data-attribute-id="fbfa58c7-8873-4589-8458-2cee8344e3b9d6e26" class="li tags" data-element="li" data-tektur-editor-id="8043b957-436b-4d14-919b-d2e5b6e37867"><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="d51bf51d-3d8e-4665-9991-84f7d01f7aefd6e27" class="p pmarker tags" data-element="p" data-tektur-editor-id="a8ad4931-f31b-4fce-aee7-0ea9922773a3" contenteditable="true">Wir benutzen <span class="bracket-tags-marker" id="a97d14a8-a600-4206-bed4-4cb354a0af93">[[<span class="bracket-tags">code:xsl:source-document</span>]]</span> in Verbindung mit dem <span class="bracket-tags-marker" id="c6ce7895-13e1-4f37-a6e5-ac827f01d695">[[<span class="bracket-tags">code:streamable='yes'</span>]]</span> Attribut,
um dem Prozessor mitzuteilen, dass er im Streaming Modus arbeiten soll.</div></li><li data-attribute-id="658c209b-2f3a-4dde-9fc2-6b996f8ae4b5d6e29" class="li tags" data-element="li" data-tektur-editor-id="67ba0c72-abe1-4ccd-a6f0-aa22aaa75ec7"><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="edab82eb-21c5-45c3-b543-4c0ac06ad281d6e30" class="p pmarker tags" data-element="p" data-tektur-editor-id="b01b32d7-508f-41e5-b6e8-a400a54dbd1a" contenteditable="true">Wenn wir die Quelle über einen Parameter einlesen, dann müssen wir auch die Transformation über ein Named-Template
starten.</div></li></ul><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="0d5b49f3-2dfb-475c-b317-d76e9aac06a0d6e33" class="p pmarker tags" data-element="p" data-tektur-editor-id="0a073fc0-fb3a-4769-b55e-f6e09eaaf5fd" contenteditable="true">Ohne zu wissen, wie XSLT Streaming genau funktioniert, setzen wir eine Reihe von <span class="bracket-tags-marker" id="61517f77-88ef-4957-8c73-0f2db378633b">[[<span class="bracket-tags">code:value-of select</span>]]</span> statements in den Iterator:</div><div class="pre"><div data-attribute-id="baa6b427-fa25-4267-94c8-ef66627c3fbbd6e36" data-attribute-xml_space="preserve" class="pre-content pmarker tags" data-element="pre" data-tektur-editor-id="10184102-f31b-4f2b-b42b-9f2f7030d858" contenteditable="true">
&#x3C;xsl:template name="main"&#x3E;
  &#x3C;xsl:source-document href="{$input-file}" streamable='yes'&#x3E;
    &#x3C;xsl:iterate select="status-report/status-change"&#x3E;
      &#x3C;xsl:value-of select="concat(billing_id,',')"/&#x3E;
      &#x3C;xsl:value-of select="concat(claim_ids,',')"/&#x3E;
      &#x3C;xsl:value-of select="concat(status,',')"/&#x3E;
      &#x3C;xsl:value-of select="concat(format-dateTime(xs:dateTime(time_stamp),
                                          '[Y]-[M]-[D] [H]:[m]'),'&#x26;#10;')"/&#x3E;
    &#x3C;/xsl:iterate&#x3E;
  &#x3C;/xsl:source-document&#x3E; 
&#x3C;/xsl:template&#x3E;</div></div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="63c6b0e7-5dbc-499b-87d1-a8f566085023d6e37" class="p pmarker tags" data-element="p" data-tektur-editor-id="455bf70d-9248-4b55-81c8-6c8dadd87bf1" contenteditable="true">und werden dafür prompt mit einer Fehlermeldung belohnt:</div><div class="pre"><div data-attribute-id="7829866e-29d1-41c4-b5a5-8bef29e67675d6e40" data-attribute-xml_space="preserve" class="pre-content pmarker tags" data-element="pre" data-tektur-editor-id="39d342a4-674d-4ed4-8851-6a33ab86ace9" contenteditable="true">Static error on line 16 column 64 of report.xsl:
  XTSE3430: The body of the xsl:stream instruction is not streamable
  *  There is more than one consuming operand: {xsl:value-of} on line 18, and
  {xsl:value-of} on line 19</div></div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="ed797bc5-78cf-4d81-8f07-25d049bb3e78d6e41" class="p pmarker tags" data-element="p" data-tektur-editor-id="0d1b83d6-f8c5-40f2-b103-b2a0cb2e33f0" contenteditable="true">In diesem Iterator ist also nur eine "konsumierende" <span class="bracket-tags-marker" id="ed1c8b25-fe75-4d72-a346-0a5bb3b2b226">[[<span class="bracket-tags">code:value-of</span>]]</span> Operation erlaubt. Um nur einmal zu selektieren, müssen wir - auf Kosten der Lesbarkeit - ziemlich umbauen. Eine Lösung könnte z.B. so aussehen:</div><div class="pre"><div data-attribute-id="6b9f4660-7925-4869-be23-8c7c44d0ca7cd6e44" data-attribute-xml_space="preserve" class="pre-content pmarker tags" data-element="pre" data-tektur-editor-id="c7aff3cc-8874-40a5-9a67-180f82eb57ca" contenteditable="true">&#x3C;?xml version="1.0" encoding="UTF-8"?&#x3E;
&#x3C;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  exclude-result-prefixes="xs"
  xpath-default-namespace="https://tekturcms.de/schema/status-report/1.0"
  version="3.0"&#x3E;
   
  &#x3C;xsl:param name="input-file" required="yes"/&#x3E;
  
  &#x3C;xsl:output method="text"/&#x3E;
 
  &#x3C;!-- https://www.saxonica.com/html/documentation/xsl-elements/iterate.html --&#x3E;

  &#x3C;xsl:template name="main"&#x3E;
    &#x3C;xsl:source-document href="{$input-file}" streamable='yes'&#x3E;
      &#x3C;xsl:iterate select="status-report/status-change/*"&#x3E;
        &#x3C;xsl:choose&#x3E;
          &#x3C;xsl:when test="name()='time_stamp'"&#x3E;
            &#x3C;xsl:value-of select="concat(format-dateTime(xs:dateTime(time_stamp),
                                               '[Y]-[M]-[D] [H]:[m]'),'&#x26;#10;')"/&#x3E;
          &#x3C;/xsl:when&#x3E;
          &#x3C;xsl:otherwise&#x3E;
            &#x3C;xsl:value-of select="concat(.,',')"/&#x3E;
          &#x3C;/xsl:otherwise&#x3E;
        &#x3C;/xsl:choose&#x3E;
      &#x3C;/xsl:iterate&#x3E;
    &#x3C;/xsl:source-document&#x3E;
  &#x3C;/xsl:template&#x3E;  
&#x3C;/xsl:stylesheet&#x3E;
</div></div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="469ff8e1-b60e-47fa-906b-f0ba5ffcbe0ed6e48" class="p pmarker tags" data-element="p" data-tektur-editor-id="63b6b060-ba67-4110-a173-e75c30d39256" contenteditable="true">Hier wird davon ausgegangen, dass das Element mit Namen 'time_stamp' als letztes in der Sequenz vorkommt und beim Auftreten (<span class="bracket-tags-marker" id="fd03c76b-eaec-4fcc-8fb2-566a2322e8ff">[[<span class="bracket-tags">code:&#x26;#10;</span>]]</span>) wird ein Zeilenumbruch gesetzt. Der deklarative Ansatz aus dem ersten Beispiel geht dabei verloren. </div><div data-element="note" class="show_menu tags" data-tektur-editor-id="7a4ab5ab-7c1f-495a-83a8-9c555ad4fa4e"><div class="gui-optional-elements-button" contenteditable="false"><div class="menu-icon" style="display:none">+</div></div><div class="note"><div class="signal-word">NOTE</div><div class="hcontent"><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="b7628b73-64d2-4adb-9e79-b0c0e27ea202d6e51" class="p pmarker tags" data-element="p" data-tektur-editor-id="22e5419e-c37e-41c6-9632-d696ae488775" contenteditable="true">Logisch wird beim XSLT Streaming auf einer niedrigeren Abstraktionsebene programmiert, um den Anforderungen des Prozessors gerecht zu werden.</div></div></div></div><div xmlns:xr="http://www.tekturcms.de/2012/xr/common" xmlns:xlink="http://www.w3.org/1999/xlink" data-attribute-id="25b7064f-3652-4cf9-96d9-de474327f073d6e53" class="p pmarker tags" data-element="p" data-tektur-editor-id="949e0066-4f62-4e48-be4d-cdbd6b50052b" contenteditable="true">Für eine <span data-attribute-id="61cd3405-cf36-4bc0-a923-4074c1eb8973d6e55" class="b tags" data-element="b" data-tektur-editor-id="0002a894-aff8-4ee8-be37-c478093dc0a5">1.6 GB Datei</span> benötigt das obige Skript auf meinem Rechner gute<span data-attribute-id="90b6c3a0-5c88-4ee6-a51d-e9d6bd76df56d6e58" class="b tags" data-element="b" data-tektur-editor-id="d3806c43-fa50-4d0d-8bb4-b8cf5d5335e8"> drei Minuten</span>. Der traditionelle temlate-match Ansatz bricht mit einer Out-of-Memory Exception ab, selbst wenn man den Java Heap Size auf 4GB einstellt.</div></div></div></div>